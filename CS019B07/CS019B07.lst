MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; CS019B05, 08/07/09, changing code to slow down new serve motors from Hillhouse products.
                      00002 
                      00003         list      p=16f73            ; list directive to define processor
                      00004         #include <p16f73.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 ; P16F73.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00320         LIST
                      00005 
                      00006 ;       __CONFIG   _CP_OFF & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
2007   3FE6           00007         __CONFIG   _CP_ALL & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
                      00008 
                      00009 ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00010 ; The lables following the directive are located in the respective .inc file.
                      00011 ; See respective data sheet for additional information on configuration word.
                      00012 
                      00013 ;*********************************************************************
                      00014 ; Definitions
                      00015 ;*********************************************************************
                      00016 ;
  000000A8            00017 MSEC5_LSB       equ     0xa8    
                      00018 ;NORMAL 
  00000061            00019 MSEC5_MSB       equ     0x61
                      00020 
                      00021 ;SIM MSEC5_MSB  equ     0xfe
                      00022 
                      00023 ; msec5 init value to count up to 1 second
                      00024 ; 200 5msec ticks (255 - 200)
                      00025 ;TICK_CNT       equ     0x37
  00000057            00026 TICK_CNT        equ     0x57
                      00027 ; remote block init value to count down to 1/2 second
  00000053            00028 BLOCK_CNT       equ     0x53
                      00029 ; I/O, Interrupt and Option Definitions
                      00030 ;
                      00031 ;OPTIONVAL      equ     88h             ;10001000b: portB no pull-up, tmr0 int
  000000C8            00032 OPTIONVAL       equ     0c8h            ;11001000b: portB no pull-up,  RB0/INT rising edge, tmr0 int
                      00033 ;OPTIONVAL      equ     088h            ;11001000b: portB no pull-up,  RB0/INT falling edge, tmr0 int
  000000A0            00034 INTCONVAL       equ     0a0h            ; set GIE, TOIE
                      00035 
                      00036                                         ; port A:
  00000000            00037 SPINPBIT        equ     00h             ; analog input for ball spin     a/d channel 0
  00000001            00038 SPDBIT          equ     01h             ; analog input for ball speed    a/d channel 1
  00000002            00039 BATTERY         equ     02h             ; analog input for battery level a/d channel 2
  00000003            00040 FEEDBIT         equ     03h             ; analog input for feed rate     a/d channel 3
  00000004            00041 SWEEPEN         equ     04h             ; analog input for sweep enable switch a/d channel 4 (PORTA bit 
                            5)
  0000003F            00042 TRISAVAL        equ     3fh             ;00111111b: A0 - A5 as input
  00000002            00043 ADCON1VAL       equ     2               ; RA0,1,2,3,5 are analog        ;MJZ DEBUG, COMMENTED THIS LINE
                      00044 ;ADCON1VAL      equ     6               ;MJZ DEBUG, ADDED THIS LINE, CHANGED ALL ANALOG INPUTS TO DIGITA
                            L INPUTS
  00000081            00045 ADCON0VAL       equ     081h            ;10000001b: fosc/32, channel 0
  00000004            00046 LINESWBIT       equ 04h                 ;MJZ ADDED LINE, 2-LINE LIMIT SWITCH INPUT BIT, LOW=SWITCH ON, H
                            IGH=SWITCH OFF
                      00047 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00048                                         ; port B:
  000000F1            00049 TRISBVAL        equ     0f1h            ;11110001b: B1,B2,B3 as output
  00000001            00050 RED_LED         equ     1               ;  bit 1 controls red led
  00000002            00051 GREEN_LED       equ     2               ;  bit 2 controls green led
  00000003            00052 FEED_LED        equ     3               ;  bit 3 controls feed led
  00000002            00053 RED_LED_ON      equ     2               ;  value to turn on red led
  00000004            00054 GREEN_LED_ON    equ     4               ;  value to turn on green led
                      00055 
                      00056                                         ; port C:
  00000000            00057 PWMOUTBIT       equ     00h             ; software PWM output for feed motor
  00000003            00058 SWEEP_EN        equ     03h             ; sweep motor enable (digital out)
  00000004            00059 ELEV_EN         equ     04h             ; elevation motor enable (digital out)
  00000040            00060 BEEP_OFF        equ     0x40            ; bit 6 on disables beep
  000000A0            00061 TRISCVAL        equ     0a0h            ;10100000b: C7,C5 as input
  00000002            00062 PWM1            equ     2
  00000001            00063 PWM2            equ     1
                      00064 
  00000030            00065 FLASH_TIME      equ     30h
  00000004            00066 PAUSE_TIME      equ     4
                      00067 
                      00068 ;***** VARIABLE DEFINITIONS
  00000020            00069 w_temp          equ     0x20            ; variable used for context saving 
  00000021            00070 status_temp     equ     0x21            ; variable used for context saving
  00000022            00071 temp            equ     0x22
  00000023            00072 pwr_on_code     EQU     0x23
  00000024            00073 t_top_pwm       equ     0x24            ; target value for top PWM
  00000025            00074 c_top_pwm       equ     0x25            ; current value for top PWM
  00000026            00075 t_bot_pwm       equ     0x26            ; target value for bot PWM
  00000027            00076 c_bot_pwm       equ     0x27            ; current value for bot PWM
  00000028            00077 top_inited      equ     0x28            ; top motor init done
  00000029            00078 bot_inited      equ     0x29            ; bottom motor init done
  0000002A            00079 feed_inited     equ     0x2a            ; feed motor init done
  0000002B            00080 sweep_inited    equ     0x2b            ; sweep motor init done
                      00081 
  0000002C            00082 stackw          equ     0x2c            ; stack to push/pop the W-register
  0000002D            00083 stacks          equ     0x2d            ; stack to push/pop the STATUS-reg
  0000002E            00084 counter         equ     0x2e            ; counter: input frequency
                      00085                                         ;   f1 = crystalfreq. / 4 / 255
  0000002F            00086 counter2        equ     0x2f            ; counter2: input frequency
                      00087                                         ;   f2 = f1 / 128
  00000030            00088 pwmdesired      equ     0x30            ; target PWM of feed motor value 0..255
  00000031            00089 pwmmax          equ     0x31            ; register to support generation PWM
  00000032            00090 pwmhelp         equ     0x32            ; used as temp storage of pwmdesired
                      00091 
  00000033            00092 a2d_chan        equ     0x33            ; next channel to acquire a2d
                      00093 
  00000034            00094 seconds         equ     0x34            ; seconds since poweron
  00000035            00095 msec5           equ     0x35            ; number of 5msec intrs
  00000036            00096 init_done       equ     0x36            ; power up initialization done
  00000037            00097 soft_pwm        equ     0x37            ; software PWM module enabled
                      00098 
  00000038            00099 spin_a2d        equ     0x38            ; a2d value from a2d chan 0
  00000039            00100 spd_a2d         equ     0x39            ; a2d value from a2d chan 1
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003A            00101 bat_a2d         equ     0x3a            ; a2d value from a2d chan 2
  0000003B            00102 feed_a2d        equ     0x3b            ; a2d value from a2d chan 3
  0000003C            00103 sweep_a2d       equ     0x3c            ; a2d value from a2d chan 4
                      00104 
  0000003D            00105 calc_pwm        equ     0x3d            ; temporarily variable for calculating PWM
  0000003E            00106 delta_c         equ     0x3e            ; temp var
  0000003F            00107 delta_s         equ     0x3f            ; temp var
                      00108 
  00000040            00109 wait_cnt        equ     0x40            ; counter for wait routine
                      00110 ;err_no         equ     0x41            ; motor error number    ;MJZ COMMENTED THIS LINE
                      00111                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00112                                         ;              4= bottom serve err, 5= sweep motor error
  00000041            00113 err_no          equ     0x41            ; motor error number    ;MJZ ADDED THIS LINE
                      00114                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00115                                         ;              4= bottom serve err, 5= POWER OFF ERROR
  00000042            00116 flash_code      equ     0x42            ; local variable used by motor_err()
  00000043            00117 led_bits        equ     0x43            ; memory copy of LED bits on PORTB
  00000044            00118 rbif_wait       equ     0x44            ; delay for rechecking rbif
                      00119 
  00000045            00120 power_level     equ     0x45            ; power level for set led: 0 is > 2.6v, 1 is > 2.5V, 2 is > 2.4v
                            , 3 is < 2.4v
  00000046            00121 power_level_r   equ     0x46            ; lowest power level for this 16 second period
  00000047            00122 power_level_tmp equ     0x47            ; temp var 
  00000048            00123 delay           equ     0x48            ; delay var
                      00124 
  00000049            00125 mult1           equ     0x49            ; temp var for mult_sub routine
  0000004A            00126 mult2           equ     0x4a            ; temp var for mult_sub routine
  0000004B            00127 mult3           equ     0x4b            ; temp var for mult_sub routine
  0000004C            00128 rbif_bits       equ     0x4c            ; bit mask for checking motor errors
  0000004D            00129 sweep_is_on     equ     0x4d            ; sweep motor on flag
  0000004E            00130 r1              equ     0x4e            ; result of mult1 x mult2
  0000004F            00131 r2              equ     0x4f            ; result of mult1 x mult2
                      00132 
  00000050            00133 remote_toggle   equ     0x50            ; toggle bits for remote control
  00000000            00134 FEED_BIT        equ     0
  00000001            00135 SWEEP_BIT       equ     1
  00000005            00136 REMOTE_BIT      equ     5
  00000001            00137 FEED_TOGGLE     equ     0x01            ; bit 0:  0 = feed off, 1 = feed on
  00000002            00138 SWEEP_TOGGLE    equ     0x02            ; bit 1:  0 = sweep off, 1 = sweep on
  00000020            00139 REMOTE_ON       equ     0x20            ; bit 5:  0 = remote disabled, 1= enabled
  00000051            00140 remote_block    equ     0x51            ; time to block remote transmission input
  00000052            00141 FF_count        equ     0x52            ; remaining FF's to send for beep
  00000053            00142 last_sweep      equ     0x53            ;
  00000054            00143 beep_count      equ     0x54            ; DEBUG
                      00144 
                      00145 
                      00146 
  00000055            00147 linesw_toggle   equ 0x55        ;MJZ ADDED THIS LINE, BIT 4 IS 2-LINE SWITCH TOGGLE BIT
  00000056            00148 sweep_timer             equ 0x56        ;MJZ ADDED THIS LINE, REACHES 0 MEANS NO 2-LINE SWITCH DETECTED 
                            BETWEEN SIDE TO SIDE SWEEPS
  00000057            00149 feed_rate_type  equ 0x57        ;MJZ ADDED THIS LINE, BIT 0=0 FOR NORMAL FEED RATE ALGORITHM, 
                      00150                                                         ;MJZ ADDED THIS LINE, BIT 0=1 FOR RESTRICTED MAX
                             RATE IN 2-LINE MODE
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151 
                      00152 
                      00153 
                      00154 ;----------------------------------------------------------------------
                      00155 ; PWM-module constant
  00000016            00156 PWMADJUSTVAL    equ     .22
                      00157         ; correction number, defined by the following factors:
                      00158         ; time from timer interrupt to executing PC 004 + 3 cycles
                      00159         ; computing time from PC=004 to required edge   +18 cycles
                      00160         ; lost timer cycles due to writing the time     + 2 cycles
                      00161         ; cal desired PWM value to timer loading value  + 2 cycles
                      00162         ; time from timer loading to gen required edge  - 1 cycle
                      00163         ; valid value for hardware (unknown diff to the data sheet)
                      00164         ; 3+18+2+2-1=22
                      00165         ; value value for PICSIM version 5.11 (error of PICSIM):
                      00166         ; 0+18+2+2-1=21
  0000001D            00167 PWMMAXVAL       equ     .29
                      00168         ; loading value for pwmmax
                      00169         ; If n is the maximum length of a high pulse, which has to be
                      00170         ; generated by the skipping method, then is PWMMAXVAL = n+1.
                      00171         ; The max length of a low pulse using the skip method is n-1.
                      00172 
                      00173 
                      00174 
                      00175 ;**********************************************************************
0000                  00176                 ORG     0x000             ; processor reset vector
0000   018A           00177                 clrf    PCLATH            ; ensure page bits are cleared
0001   2810           00178                 goto    main              ; go to beginning of program
                      00179 
                      00180 
0004                  00181                 ORG     0x004             ; interrupt vector location
0004   00A0           00182                 movwf   w_temp            ; save off current W register contents
0005   0803           00183                 movf    STATUS,w          ; move status register into W register
0006   1283           00184                 bcf     STATUS,RP0        ; ensure file register bank set to 0
0007   00A1           00185                 movwf   status_temp       ; save off contents of STATUS register
                      00186 
                      00187 ; isr code can go here or be located as a call subroutine elsewhere
0008   190B           00188                 btfsc   INTCON,T0IF      ; check for timer0 interrupt
0009   2083           00189                 call    PwmInt
                      00190 
000A   1283           00191                 bcf     STATUS,RP0        ; ensure file register bank set to 0
000B   0821           00192                 movf    status_temp,w     ; retrieve copy of STATUS register
000C   0083           00193                 movwf   STATUS            ; restore pre-isr STATUS register contents
000D   0EA0           00194                 swapf   w_temp,f
000E   0E20           00195                 swapf   w_temp,w          ; restore pre-isr W register contents
000F   0009           00196                 retfie                    ; return from interrupt
                      00197 
0010                  00198 main
                      00199 ; init code 
                      00200         ;configuration of the PWM module
0010   018B           00201         clrf    INTCON                  ; disable all intrs
0011   0197           00202         clrf    CCP1CON                 ; CCP1 Module is off
0012   019D           00203         clrf    CCP2CON                 ; CCP2 Module is off
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013   0181           00204         clrf    TMR0                    ; reset timer
0014   01B0           00205         clrf    pwmdesired              ; reset value of software PWM is 0
0015   01A4           00206         clrf    t_top_pwm
0016   01A6           00207         clrf    t_bot_pwm
0017   01A5           00208         clrf    c_top_pwm
0018   01A7           00209         clrf    c_bot_pwm
0019   01A8           00210         clrf    top_inited
001A   01A9           00211         clrf    bot_inited
001B   01AA           00212         clrf    feed_inited
001C   01AB           00213         clrf    sweep_inited
                      00214 ;       clrw
                      00215 ;       clrf    PORTC                   ; reset all output to 0 before port C
001D   3040           00216         movlw   BEEP_OFF                ; reset all output to 0 except BEEP_OFF before port C
001E   0087           00217         movwf   PORTC                   ; is changed from input to output 
                      00218                                         ; to suppress an uncontrolled
                      00219                                         ; spike
001F   0186           00220         clrf    PORTB                   ; turn off red led, green led, and feed led
0020   01A3           00221         clrf    pwr_on_code             ; reset type code
0021   301D           00222         movlw   PWMMAXVAL               ; set support register
0022   00B1           00223         movwf   pwmmax                  ;
                      00224         ; configuration of the PIC
0023   1683           00225         bsf     STATUS,RP0              ; register page 1
0024   303F           00226         movlw   TRISAVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0025   0085           00227         movwf   TRISA                   ; ...port A
0026   30F1           00228         movlw   TRISBVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0027   0086           00229         movwf   TRISB                   ; ...port B
0028   30A0           00230         movlw   TRISCVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0029   0087           00231         movwf   TRISC                   ; ...port C
002A   3002           00232         movlw   ADCON1VAL               ; set inputs of ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002B   009F           00233         movwf   ADCON1                  ; ...adc
002C   30C8           00234         movlw   OPTIONVAL               ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002D   0081           00235         movwf   OPTION_REG              ; ...PIC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002E   080E           00236         movf    PCON,w                  ; pick up NOT_POR and NOT_BOR
002F   3903           00237         andlw   3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0030   148E           00238         bsf     PCON,NOT_POR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0031   140E           00239         bsf     PCON,NOT_BOR
0032   1283           00240         bcf     STATUS,RP0              ; register page 0
0033   00A3           00241         movwf   pwr_on_code
0034   3018           00242         movlw   0x18                    ; get NOT_TO and NOT_PD
0035   0503           00243         andwf   STATUS,w
0036   04A3           00244         iorwf   pwr_on_code,f                   ; or with NOT_POR and NOT_BOR
0037   0064           00245         clrwdt
                      00246 ;
                      00247 ; init variables
0038   01B4           00248         clrf    seconds
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0039   01B6           00249         clrf    init_done               ; power on init not done
003A   01B7           00250         clrf    soft_pwm                ; software pwm module not enabled
003B   01C3           00251         clrf    led_bits
003C   30A8           00252         movlw   MSEC5_LSB               ; init  timer1 to count up to 5 msec
003D   008E           00253         movwf   TMR1L
003E   3061           00254         movlw   MSEC5_MSB
003F   008F           00255         movwf   TMR1H
0040   3001           00256         movlw   0x01                    ; enables TMR1, FOSC/4, 1:1 prescale
0041   0090           00257         movwf   T1CON   
0042   3057           00258         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
0043   00B5           00259         movwf   msec5
                      00260 
0044   01D6           00261         clrf    sweep_timer             ;MJZ ADDED THIS LINE
0045   01D7           00262         clrf    feed_rate_type  ;MJZ ADDED THIS LINE
                      00263 
                      00264 
                      00265 ; on power up
                      00266 ;
0046                  00267 at0sec
0046   2110           00268         call    sec0init
                      00269 ;       movlw   0xf8                    ; SIM ONLY
                      00270 ;       movwf   msec5                   ; SIM ONLY
                      00271 ; main idle loop
                      00272 ;
0047                  00273 idle
0047   0064           00274         clrwdt                          ; toggle watchdog
0048   1C0C           00275         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0049   2847           00276         goto    idle
004A   30A8           00277         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
004B   008E           00278         movwf   TMR1L
004C   3061           00279         movlw   MSEC5_MSB
004D   008F           00280         movwf   TMR1H
004E   100C           00281         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
                      00282 ;       call    chk_rbif                ; check if RB7:RB4 pins changed - motors error  ;MJZ COMMENTED T
                            HIS LINE
004F   247E           00283         call    chk_rbif                ;MJZ ADDED THIS LINE, CHECK IF RB7:RB4 PINS CHANGED - MOTOR ERRO
                            RS OR POWER OFF
0050   260D           00284         call    chk_intf                ;MJZ ADDED THIS LINE, CHECK FOR BALL DROPPED
0051   25BB           00285         call    chk_remote
0052   25E5           00286         call    chk_2linesw             ;MJZ ADDED LINE, CHECK IF 2-LINE LIMIT SWITCH IS ON, NEEDS TO BE
                             CHECKED EVERY 5MS
                      00287                                                         ;TO ENSURE STOP POSITION ACCURACY & CONSISTANCY
0053   0FB5           00288         incfsz  msec5,f                 ; if msec5 overflowed,
0054   2864           00289         goto    not_second
                      00290 ;       movlw   0x55                    ; DEBUG
                      00291 ;       btfss   remote_toggle,REMOTE_BIT        ; DEBUG
                      00292 ;       call    putchar                 ; DEBUG
                      00293 
Message[305]: Using default destination of 1 (file).
0055   03D6           00294         decf    sweep_timer                     ;MJZ ADDED THIS LINE, SWEEP TIMER COUNTDOWN SECONDS
                      00295 
0056   1845           00296         btfsc   power_level,0           ;MJZ ADDED THIS LINE
0057   261E           00297         call    toggle_green_led        ;MJZ ADDED THIS LINE, IF POWER_LEVEL=1 (OR 3), TOGGLE GREEN LED 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            (POWER_LEVEL 3 NEVER GETS HERE)
0058   18C5           00298         btfsc   power_level,1           ;MJZ ADDED THIS LINE
0059   2621           00299         call    toggle_red_led          ;MJZ ADDED THIS LINE, IF POWER_LEVEL=2 (OR 3), TOGGLE RED LED (P
                            OWER_LEVEL 3 NEVER GETS HERE)
                      00300 
005A   144C           00301         bsf     rbif_bits,0                     ; start checking for sweep motor error again
005B   3057           00302         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
005C   00B5           00303         movwf   msec5
                      00304 ;       movlw   0xf8                    ; SIM ONLY
                      00305 ;       movwf   msec5                   ; SIM ONLY
005D   0B36           00306         decfsz  init_done,w             ;   and init not done
005E   286F           00307         goto    i_second                ;   do init stuff
005F   0AB4           00308         incf    seconds,f               ; msec5 overflowed, actually toggled every 1 seconds
0060   0834           00309         movf    seconds,w
0061   390F           00310         andlw   0x0f                    ; update battery led every 16 seconds
0062   1903           00311         btfsc   STATUS,Z
0063   2516           00312         call    update_bat_led
                      00313 
0064                  00314 not_second:
0064   3007           00315         movlw   7
0065   0535           00316         andwf   msec5,w
0066   0782           00317         addwf   PCL,f
0067   296C           00318         goto    tick0
0068   2979           00319         goto    tick1
0069   2987           00320         goto    tick2
006A   298C           00321         goto    tick3
006B   29A2           00322         goto    tick4
006C   29A8           00323         goto    tick5
006D   29AB           00324         goto    tick6
006E   29AE           00325         goto    tick7
                      00326 
006F                  00327 i_second:
006F   0A34           00328         incf    seconds,w               ; msec5 overflowed, actually toggled every 1.25 seconds
0070   00B4           00329         movwf   seconds
0071   0782           00330         addwf   PCL,f
0072   2846           00331         goto    at0sec                  ; 0 second - this won't happen
0073   28E3           00332         goto    at1sec                  ; 1 second
0074   28FA           00333         goto    at2sec                  ; 2 seconds
0075   28FA           00334         goto    at3sec                  ; 3 seconds
0076   28FB           00335         goto    at4sec
0077   28FC           00336         goto    at5sec
0078   2904           00337         goto    at6sec
0079   2905           00338         goto    at7sec
007A   2908           00339         goto    at8sec
007B   2909           00340         goto    at9sec
007C   2909           00341         goto    at10sec
007D   2909           00342         goto    at11sec
007E   290A           00343         goto    at12sec
007F   290A           00344         goto    at13sec
0080   290B           00345         goto    at14sec
0081   290D           00346         goto    at15sec
                      00347 
                      00348 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00349 
0082   2847           00350         goto    idle
                      00351 ; end of main
                      00352 
                      00353 ;--- software PWM Generator
                      00354 ;
0083                  00355 PwmInt
0083   110B           00356         bcf     INTCON,T0IF             ; clear interrupt flag
0084   1807           00357         btfsc   PORTC,PWMOUTBIT         ; which edge is required?
0085   28B6           00358         goto    Lowpulse                ; -> goto falling edge
0086                  00359 Highpulse
0086   0930           00360         comf    pwmdesired,W            ; get desired PWM value
0087   00B2           00361         movwf   pwmhelp                 ; store val for the foll low pulse
0088   07B1           00362         addwf   pwmmax,F                ; calc number of inst's to skip
0089   1C03           00363         btfss   STATUS,C                ; which method to use?
008A   28AF           00364         goto    HighImpInt              ; -> using interrupt
008B                  00365 HighImpShrt
008B   0831           00366         movf    pwmmax,W                ; get number of inst's to skip
008C   0782           00367         addwf   PCL,F                   ; skip n instructions
008D   1407           00368         bsf     PORTC,PWMOUTBIT         ; rising edge, 28 cycles hi pulse
008E   1407           00369         bsf     PORTC,PWMOUTBIT         ; 27 cycles
008F   1407           00370         bsf     PORTC,PWMOUTBIT         ; 26 cycles
0090   1407           00371         bsf     PORTC,PWMOUTBIT         ; 25 cycles
0091   1407           00372         bsf     PORTC,PWMOUTBIT         ; 24 cycles
0092   1407           00373         bsf     PORTC,PWMOUTBIT         ; 23 cycles
0093   1407           00374         bsf     PORTC,PWMOUTBIT         ; 22 cycles
0094   1407           00375         bsf     PORTC,PWMOUTBIT         ; 21 cycles
0095   1407           00376         bsf     PORTC,PWMOUTBIT         ; 20 cycles
0096   1407           00377         bsf     PORTC,PWMOUTBIT         ; 19 cycles
0097   1407           00378         bsf     PORTC,PWMOUTBIT         ; 18 cycles
0098   1407           00379         bsf     PORTC,PWMOUTBIT         ; 17 cycles
0099   1407           00380         bsf     PORTC,PWMOUTBIT         ; 16 cycles
009A   1407           00381         bsf     PORTC,PWMOUTBIT         ; 15 cycles
009B   1407           00382         bsf     PORTC,PWMOUTBIT         ; 14 cycles
009C   1407           00383         bsf     PORTC,PWMOUTBIT         ; 13 cycles
009D   1407           00384         bsf     PORTC,PWMOUTBIT         ; 12 cycles
009E   1407           00385         bsf     PORTC,PWMOUTBIT         ; 11 cycles
009F   1407           00386         bsf     PORTC,PWMOUTBIT         ; 10 cycles
00A0   1407           00387         bsf     PORTC,PWMOUTBIT         ; 9 cycles
00A1   1407           00388         bsf     PORTC,PWMOUTBIT         ; 8 cycles
00A2   1407           00389         bsf     PORTC,PWMOUTBIT         ; 7 cycles
00A3   1407           00390         bsf     PORTC,PWMOUTBIT         ; 6 cycles
00A4   1407           00391         bsf     PORTC,PWMOUTBIT         ; 5 cycles
00A5   1407           00392         bsf     PORTC,PWMOUTBIT         ; 4 cycles
00A6   1407           00393         bsf     PORTC,PWMOUTBIT         ; 3 cycles
00A7   1407           00394         bsf     PORTC,PWMOUTBIT         ; 2 cycles
00A8   1407           00395         bsf     PORTC,PWMOUTBIT         ; 1 cycle
00A9   1007           00396         bcf     PORTC,PWMOUTBIT         ; fall edge, start of the following
                      00397                                         ; low pulse using the interrupt
00AA   0AAE           00398         incf    counter,F               ; trigger counter, cause there was
                      00399                                         ; a rising edge
00AB   0932           00400         comf    pwmhelp,W               ; get required low pulse length
00AC   3E1B           00401         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00402                                         ; Edge was generated 5 cycles before
                      00403                                         ; usual point of time
00AD   0081           00404         movwf   TMR0                    ; put value into timer
00AE   28DF           00405         goto    LowImpInt2              ; low pulse using int is running
00AF                  00406 HighImpInt                              ; high pulse using interrupt
00AF   3E16           00407         addlw   PWMADJUSTVAL            ; calculate timer loading value
00B0   0081           00408         movwf   TMR0                    ; put value into timer
00B1                  00409 HighImpInt2
00B1   1407           00410         bsf     PORTC,PWMOUTBIT         ; generate rising edge
00B2   0AAE           00411         incf    counter,F               ; trigger counter, because there was a rising edge
00B3   301C           00412         movlw   PWMMAXVAL-1             ; "repair"...
00B4   00B1           00413         movwf   pwmmax                  ; ...support register
00B5   0008           00414         return                          ; return to main isr
                      00415 
                      00416 
00B6                  00417 Lowpulse
00B6   0932           00418         comf    pwmhelp,W               ; get required pulse length
00B7   07B1           00419         addwf   pwmmax,F                ; calc number of inst's to skip
00B8   1C03           00420         btfss   STATUS,C                ; which method is to use?
00B9   28DD           00421         goto    LowImpInt               ; ->using interrupt
00BA                  00422 LowImpShrt
00BA   0831           00423         movf    pwmmax,W                ; get number of inst's to skip
00BB   0782           00424         addwf   PCL,F                   ; skip n instructions
00BC   1007           00425         bcf     PORTC,PWMOUTBIT         ; falling edge, 27 cycles low pulse
00BD   1007           00426         bcf     PORTC,PWMOUTBIT         ; 26 cycles
00BE   1007           00427         bcf     PORTC,PWMOUTBIT         ; 25 cycles
00BF   1007           00428         bcf     PORTC,PWMOUTBIT         ; 24 cycles
00C0   1007           00429         bcf     PORTC,PWMOUTBIT         ; 23 cycles
00C1   1007           00430         bcf     PORTC,PWMOUTBIT         ; 22 cycles
00C2   1007           00431         bcf     PORTC,PWMOUTBIT         ; 21 cycles
00C3   1007           00432         bcf     PORTC,PWMOUTBIT         ; 20 cycles
00C4   1007           00433         bcf     PORTC,PWMOUTBIT         ; 19 cycles
00C5   1007           00434         bcf     PORTC,PWMOUTBIT         ; 18 cycles
00C6   1007           00435         bcf     PORTC,PWMOUTBIT         ; 17 cycles
00C7   1007           00436         bcf     PORTC,PWMOUTBIT         ; 16 cycles
00C8   1007           00437         bcf     PORTC,PWMOUTBIT         ; 15 cycles
00C9   1007           00438         bcf     PORTC,PWMOUTBIT         ; 14 cycles
00CA   1007           00439         bcf     PORTC,PWMOUTBIT         ; 13 cycles
00CB   1007           00440         bcf     PORTC,PWMOUTBIT         ; 12 cycles
00CC   1007           00441         bcf     PORTC,PWMOUTBIT         ; 11 cycles
00CD   1007           00442         bcf     PORTC,PWMOUTBIT         ; 10 cycles
00CE   1007           00443         bcf     PORTC,PWMOUTBIT         ; 9 cycles
00CF   1007           00444         bcf     PORTC,PWMOUTBIT         ; 8 cycles
00D0   1007           00445         bcf     PORTC,PWMOUTBIT         ; 7 cycles
00D1   1007           00446         bcf     PORTC,PWMOUTBIT         ; 6 cycles
00D2   1007           00447         bcf     PORTC,PWMOUTBIT         ; 5 cycles
00D3   1007           00448         bcf     PORTC,PWMOUTBIT         ; 4 cycles
00D4   1007           00449         bcf     PORTC,PWMOUTBIT         ; 3 cycles
00D5   1007           00450         bcf     PORTC,PWMOUTBIT         ; 2 cycles
00D6   1007           00451         bcf     PORTC,PWMOUTBIT         ; 1 cycles
00D7   1407           00452         bsf     PORTC,PWMOUTBIT         ; rising edge; start of the next
                      00453                                         ; high pulse using the interrupt
00D8   0930           00454         comf    pwmdesired,W            ; get desired PWM value
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D9   00B2           00455         movwf   pwmhelp                 ; store val for the next lo pulse
00DA   3E1B           00456         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
                      00457                                         ; Edge was gen'd 5 cycles before
                      00458                                         ; usual point of time.
00DB   0081           00459         movwf   TMR0                    ; put value into timer
00DC   28B1           00460         goto    HighImpInt2             ; high pulse using int is running
00DD                  00461 LowImpInt                               ; low pulse using interrupt
00DD   3E16           00462         addlw   PWMADJUSTVAL            ; calculate timer loading value
00DE   0081           00463         movwf   TMR0                    ; put value into timer
00DF                  00464 LowImpInt2
00DF   1007           00465         bcf     PORTC,PWMOUTBIT         ; generate falling edge
00E0   301D           00466         movlw   PWMMAXVAL               ; "repair" ...
00E1   00B1           00467         movwf   pwmmax                  ; ... support register
00E2   0008           00468         return                          ; return to main isr
                      00469 
                      00470 
                      00471 
                      00472 
                      00473 ; this is really part of main loop, moved here so PWNINT can reside below 0x100
                      00474 
                      00475 ; enable top motor 20KHz, 10% duty cycle
00E3                  00476 at1sec
                      00477 
00E3   0191           00478         clrf    TMR2                    ; clear timer2
00E4   0192           00479         clrf    T2CON                   ; hardware pwm prescaler is one, timer 2 off
                      00480 ;       movlw   0x02                    ; hardware pwm prescaler is 16, timer 2 off
                      00481 ;       movwf   T2CON
00E5   1683           00482         bsf     STATUS,RP0              ; register page 1
00E6   30FF           00483         movlw   0xff                    ; period is 50 us if prescaler is 1, 82 us if prescaler is 16
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E7   0092           00484         movwf   PR2                     ;
00E8   1283           00485         bcf     STATUS,RP0              ; register page 0
                      00486 ;       movlw   0x7f
00E9   3019           00487         movlw   0x19
00EA   00A4           00488         movwf   t_top_pwm
00EB   00A6           00489         movwf   t_bot_pwm
00EC   00A5           00490         movwf   c_top_pwm
00ED   00A7           00491         movwf   c_bot_pwm
                      00492 ;       movlw   0x7f                    ; 50% duty cycle
00EE   3019           00493         movlw   0x19                    ; 10% duty cycle
00EF   0095           00494         movwf   CCPR1L                  ;
00F0   009B           00495         movwf   CCPR2L
00F1   1683           00496         bsf     STATUS,RP0              ; bank1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   1107           00497         bcf     TRISC,PWM1              ; make pin for pwm1 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F3   1087           00498         bcf     TRISC,PWM2              ; make pin for pwm2 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   018C           00499         clrf    PIE1                    ; disable peripheral interrupts
00F5   1283           00500         bcf     STATUS,RP0              ; bank0
00F6   018C           00501         clrf    PIR1                    ; clear peripheral interrupts flags
00F7   300C           00502         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (top)
                      00503 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (top)
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F8   0097           00504         movwf   CCP1CON
                      00505 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (bottom)
                      00506 ;       movwf   CCP2CON
00F9   1512           00507         bsf     T2CON,TMR2ON            ; timer2 starts to increment
                      00508 
                      00509 ; fall through to atcom
                      00510 
00FA                  00511 at2sec
00FA                  00512 at3sec
                      00513 
00FA   290C           00514         goto    atcom
                      00515 
00FB                  00516 at4sec
                      00517 
                      00518 ;; Top motor duty cycle set to pot
                      00519 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00520 ; Bottom motor duty cycle set to pot
                      00521 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot
00FB   290C           00522         goto    atcom
                      00523 
00FC                  00524 at5sec
                      00525 
                      00526 ; Bottom motor 10% duty cycle
00FC   3019           00527         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on, now original 10% duty cycle 
                      00528                                                         ; got changed before we got here.
00FD   00A6           00529         movwf   t_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FE   00A7           00530         movwf   c_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FF   3019           00531         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
0100   009B           00532         movwf   CCPR2L                  ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
                      00533 
0101   300C           00534         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00535 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (bottom)
0102   009D           00536         movwf   CCP2CON
                      00537 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00538 ;       movwf   CCP1CON
0103   290C           00539         goto    atcom
                      00540 
0104                  00541 at6sec
                      00542         
0104   290C           00543         goto    atcom
                      00544 
0105                  00545 at7sec
                      00546 
                      00547 ;; Top motor duty cycle set to pot, 06/15/05 MJZ change
0105   0AA8           00548         incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00549 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00550 ;; Bottom motor duty cycle set to pot,  ; 06/15/05 MJZ changes, set to pot sooner than original
0106   0AA9           00551         incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, see above line
                      00552 
0107   290C           00553         goto    atcom
                      00554 
                      00555 ; fall through to atcom
0108                  00556 at8sec
                      00557 ;; Bottom motor duty cycle set to pot
                      00558 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, move to "at7sec"
                      00559 ; Top motor duty cycle set to pot
                      00560 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot
0108   290C           00561         goto    atcom
                      00562 
0109                  00563 at9sec
0109                  00564 at10sec
0109                  00565 at11sec
0109   290C           00566         goto    atcom
010A                  00567 at12sec
                      00568 ; sweep motor control
                      00569 ;       incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00570 ;       bcf     rbif_bits,0             ;  don't check for sweep motor error
                      00571 ;       incf    init_done,f             ; set initialization done flag
                      00572 
                      00573 ; fall through to atcom
010A                  00574 at13sec
                      00575 ;       movf    feed_a2d,w
                      00576 ;       sublw   0x3f                    ; if input < 1.25V (no borrow), power feed motor to pot
                      00577 ;       btfsc   STATUS,C                ; else force to 1.25V for 1 sec, then set to pot
                      00578 ;       goto    under_1_25
                      00579 ;       movlw   0x3f
                      00580 ;       movwf   feed_a2d
                      00581 ;under_1_25
                      00582 ;       call    init_feed_pwm
010A   290C           00583         goto    atcom
                      00584 
010B                  00585 at14sec
                      00586 ;       movf    feed_a2d,w
                      00587 ;       sublw   0x7f                    ; if input < 2.5V (no borrow), power feed motor to pot
                      00588 ;       btfsc   STATUS,C                ; else force to 2.5V for 1 sec, then set to pot
                      00589 ;       goto    under_2_5
                      00590 ;       movlw   0x7f
                      00591 ;       movwf   feed_a2d
                      00592 ;under_2_5
                      00593 ;       call    init_feed_pwm
010B   290C           00594         goto    atcom
                      00595 
                      00596 
                      00597 
010C                  00598 atcom:
010C   2847           00599         goto    idle
                      00600 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010D                  00601 at15sec:
                      00602 ; if feed motor a2d input > 1.0V, enable feed motor to pot
010D   0AAA           00603         incf    feed_inited,f           ; enable feed motor if input > 1.0V
010E   0AB6           00604         incf    init_done,f             ; set initialization done flag
010F   2847           00605         goto    idle                    ; goto main idle loop
                      00606 
0110                  00607 sec0init:
                      00608         ; init usart
0110   1683           00609         bsf     STATUS,RP0              ; goto bank 1
                      00610 ;       movlw   0xff                    ; 1200 baud
0111   3081           00611         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0112   0099           00612         movwf   SPBRG
0113   3020           00613         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0114   0098           00614         movwf   TXSTA                   ; asynchronous mode, low speed mode
0115   1283           00615         bcf     STATUS,RP0              ; goto bank 0
0116   3090           00616         movlw   0x90                    ; 8-bit receive, receiver enabled
0117   0098           00617         movwf   RCSTA                   ; serial port enabled
                      00618 
0118   25A9           00619         call    usart_off               ; turn off usart, disable beep
                      00620 
                      00621 ;       movlw   0x0f                    ; change to 0x0d - don't check feed motor
0119   300D           00622         movlw   0x0d
011A   00CC           00623         movwf   rbif_bits               ; check all motor errors
011B   0181           00624         clrf    TMR0
011C   01B3           00625         clrf    a2d_chan
011D   231A           00626         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
011E   00B8           00627         movwf   spin_a2d                ; save value
011F   3C8F           00628         sublw   0x8f                    ; if spin_a2d < 143
0120   308F           00629         movlw   0x8f
0121   1803           00630         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0122   00B8           00631         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0123   0838           00632         movf    spin_a2d,w              ; 
0124   3E06           00633         addlw   6       
0125   30FA           00634         movlw   0xfa                    ; if spin_a2d > 250
0126   1803           00635         btfsc   STATUS,C                ; 
0127   00B8           00636         movwf   spin_a2d                ;  spin_a2d = 250
                      00637 
0128   3001           00638         movlw   1
0129   00B3           00639         movwf   a2d_chan
012A   231A           00640         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
012B   00B9           00641         movwf   spd_a2d
012C   3C8F           00642         sublw   0x8f                    ; if speed_a2d < 143
012D   308F           00643         movlw   0x8f
012E   1803           00644         btfsc   STATUS,C                ;  skip if borrow - speed_a2d > 143
012F   00B9           00645         movwf   spd_a2d                 ;  if speed_a2d < 143, speed_a2d = 143
0130   0839           00646         movf    spd_a2d,w               ; 
0131   3E06           00647         addlw   6       
0132   30FA           00648         movlw   0xfa                    ; if spd_a2d > 250
0133   1803           00649         btfsc   STATUS,C                ; 
0134   00B9           00650         movwf   spd_a2d                 ;  spd_a2d = 250
                      00651 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0135   3002           00652         movlw   2
0136   00B3           00653         movwf   a2d_chan
0137   231A           00654         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00655 ;       movlw   0xff                    ; SIM - force battery ok
0138   00BA           00656         movwf   bat_a2d         
0139   3003           00657         movlw   3
013A   00B3           00658         movwf   a2d_chan
013B   231A           00659         call    acq_a2d                 ; acquire chan3 a2d - feed rate
013C   00BB           00660         movwf   feed_a2d
013D   3C14           00661         sublw   0x14                    ; 20 - feed_a2d
013E   1C03           00662         btfss   STATUS,C                ;  skip if no borrow - feed_a2d < 20
013F   2945           00663         goto    feed_ok
0140   083B           00664         movf    feed_a2d,w
0141   3C0F           00665         sublw   0x0f                    ; 15 - feed_a2d
0142   3014           00666         movlw   0x14
0143   1C03           00667         btfss   STATUS,C                ;  skip if no borrow - feed _a2d < 11
0144   00BB           00668         movwf   feed_a2d                ;  if 15 < feed_a2d < 20, speed_a2d = 20
0145                  00669 feed_ok
                      00670 
0145   3004           00671         movlw   4
0146   00B3           00672         movwf   a2d_chan
0147   231A           00673         call    acq_a2d                 ; acquire chan4 a2d - sweep enable
0148   00BC           00674         movwf   sweep_a2d
                      00675         
                      00676 ;       btfsc   PORTB,0                 ;MJZ COMMENTED THIS LINE
                      00677 ;       goto    power_is_off            ; if RB0 is set, power switch is off    ;MJZ COMMENTED THIS LINE
0149   1A06           00678         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
014A   2C46           00679         goto    power_is_off    ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
                      00680 
014B   083A           00681         movf    bat_a2d,w               ; get battery level
                      00682 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - bat_a2d)
014C   3C84           00683         sublw   0x84                    ; at power on, battery must be at least 2.6V to power up motors
014D   1803           00684         btfsc   STATUS,C                ;    skip if borrow (> 2.6V)    ;MJZ DEBUG, COMMENTED THIS LINE
                      00685 ;       btfss   STATUS,C                ;MJZ DEBUG, ADDED THIS LINE FOR SIMULATION TO GET PAST NO BATTER
                            Y INPUT
014E   2CE4           00686         goto    bat_dead                ;  battery exhausted, shut down all motors
014F   1607           00687         bsf     PORTC,ELEV_EN           ; else enable elevation motor
0150   0186           00688         clrf    PORTB                   ; on 1st power up, getting motor error
0151   018B           00689         clrf    INTCON                  ;  so make sure conditions are cleared
0152   01CD           00690         clrf    sweep_is_on             ; clear sweep motor on flag
0153   01D5           00691         clrf    linesw_toggle   ;MJZ CLEAR 2-LINE SWITCH TOGGLE BYTE
0154   2505           00692         call    init_bat_level
                      00693 ; sweep motor control
0155   0AAB           00694         incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00695 
0156   1623           00696         bsf     pwr_on_code,NOT_TO      ; ignore watchdog timeout reset
0157   0823           00697         movf    pwr_on_code,w           ; change bits to code : 0 = pwr on reset, 
                      00698                                         ;                       1= BOR, 2=wdt, 3=reset
0158   00A2           00699         movwf   temp
0159   01A3           00700         clrf    pwr_on_code
015A   1CA2           00701         btfss   temp,NOT_POR
015B   2966           00702         goto    pwr_on_reset
015C   0AA3           00703         incf    pwr_on_code,f
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

015D   1C22           00704         btfss   temp,NOT_BOR
015E   2962           00705         goto    npwr_on_reset
015F   0AA3           00706         incf    pwr_on_code,f
0160   1A22           00707         btfsc   temp,NOT_TO
0161   0AA3           00708         incf    pwr_on_code,f
0162                  00709 npwr_on_reset:                          ; not power on reset (and not watchdog timeout)
0162   3006           00710         movlw   6
0163   00C2           00711         movwf   flash_code
0164   24D2           00712         call    flash_error
0165   2962           00713         goto    npwr_on_reset
                      00714 
0166                  00715 pwr_on_reset:
                      00716 
0166   01D0           00717         clrf    remote_toggle           ; feed and sweep toggle are both off
0167   16D0           00718         bsf     remote_toggle,REMOTE_BIT        ; remote switch is off
0168   01D1           00719         clrf    remote_block            ; blocking of remote xmitter is off
0169   01D2           00720         clrf    FF_count                ; no FF's to send
016A   01D4           00721         clrf    beep_count
                      00722         
016B   0008           00723         return
                      00724 
016C                  00725 tick0:
016C   01B3           00726         clrf    a2d_chan
016D   231A           00727         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
016E   00B8           00728         movwf   spin_a2d                ; save value
016F   3C8F           00729         sublw   0x8f                    ; if spin_a2d < 143
0170   308F           00730         movlw   0x8f
0171   1803           00731         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0172   00B8           00732         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0173   0838           00733         movf    spin_a2d,w              ; 
0174   3E06           00734         addlw   6       
0175   30FA           00735         movlw   0xfa                    ; if spin_a2d > 250
0176   1803           00736         btfsc   STATUS,C                ; 
0177   00B8           00737         movwf   spin_a2d                ;  spin_a2d = 250
0178   2847           00738         goto    idle
                      00739 
0179                  00740 tick1:
0179   3001           00741         movlw   1
017A   00B3           00742         movwf   a2d_chan
017B   231A           00743         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
                      00744 ;       movlw   0xfa                    ; SIM - force speed max
017C   00B9           00745         movwf   spd_a2d
                      00746 ; 08/07/09 start
                      00747 ;       sublw   0x8f                    ; if spd_a2d < 143, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00748 ;       movlw   0x8f                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
                      00749 ;       sublw   0x98                    ; if spd_a2d < 152, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00750 ;       movlw   0x98                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
017D   3C8F           00751         sublw   0x8f
017E   308F           00752         movlw   0x8f
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00753 ; 08/07/09 end
017F   1803           00754         btfsc   STATUS,C                ;  skip if borrow - spd_a2d > 143
0180   00B9           00755         movwf   spd_a2d                 ;  if spd_a2d < 143, spd_a2d = 143
0181   0839           00756         movf    spd_a2d,w               ; 
                      00757 ; 08/07/09 start
0182   3E06           00758         addlw   6       
0183   30FA           00759         movlw   0xfa                    ; if spd_a2d > 250
0184   1803           00760         btfsc   STATUS,C                ; 
0185   00B9           00761         movwf   spd_a2d                 ;  spd_a2d = 250
                      00762 ;       addlw   0x20    
                      00763 ;       movlw   0xe0                    ; if spd_a2d > 224, approx 85% of original max of 250
                      00764 ;       btfsc   STATUS,C                ; 
                      00765 ;       movwf   spd_a2d                 ;  spd_a2d = 224
                      00766 ; 08/07/09 end
0186   2847           00767         goto    idle
                      00768 
0187                  00769 tick2:
0187   3002           00770         movlw   2
0188   00B3           00771         movwf   a2d_chan
0189   231A           00772         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00773 ;       movlw   0xff                    ; SIM - force battery ok
018A   00BA           00774         movwf   bat_a2d         
                      00775 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
                      00776 ;       btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V )
                      00777 ;       goto    bat_dead                ;  battery exhausted, shut down all motors
                      00778         ; update battery led here if battery level changed
                      00779 
018B   2847           00780         goto    idle
                      00781 
018C                  00782 tick3:
018C   3003           00783         movlw   3
018D   00B3           00784         movwf   a2d_chan
018E   231A           00785         call    acq_a2d                         ; acquire chan3 a2d - feed rate
                      00786 ;       movlw   0xff                            ; SIM - force feed ok
018F   00BB           00787         movwf   feed_a2d
0190   3C14           00788         sublw   0x14                            ; 20 - feed_a2d
0191   1C03           00789         btfss   STATUS,C                        ; skip if no borrow - feed_a2d < 20
                      00790 ;       goto    feed_ok1                        ; MJZ COMMENTED THIS LINE
0192   2999           00791         goto    chk_feed_rate_type      ; MJZ ADDED LINE, IF > 20, CHECK IF MUST RESTRICT MAXIMUM FEED R
                            ATE FOR 2-LINE MODE
0193   083B           00792         movf    feed_a2d,w
0194   3C0F           00793         sublw   0x0f                            ; 15 - feed_a2d
0195   3014           00794         movlw   0x14
0196   1C03           00795         btfss   STATUS,C                        ; skip if no borrow - feed _a2d < 11
0197   00BB           00796         movwf   feed_a2d                        ; if 17 < feed_a2d < 20, speed_a2d = 20
0198   29A1           00797         goto    feed_ok1                        ; MJZ ADDED LINE
                      00798 ;feed_ok1                                               ; MJZ COMMENTED THIS LINE
                      00799 ;       goto    idle                            ; MJZ COMMENTED THIS LINE
0199                  00800 chk_feed_rate_type:                             ; MJZ ADDED LINE
0199   1C57           00801         btfss   feed_rate_type,0        ; MJZ ADDED LINE, IF SET, MUST RESTRICT MAXIMUM FEED RATE FOR 2-
                            LINE MODE
019A   29A1           00802         goto    feed_ok1                        ; MJZ ADDED LINE
019B   083B           00803         movf    feed_a2d,w                      ; MJZ ADDED LINE
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00804 ; CS019B06 start
                      00805 ;       sublw   0x57                            ; MJZ ADDED LINE, MAXIMUM FEED RATE FOR 2-LINE MODE
019C   3CC8           00806         sublw   0xc8                            ; MJZ ADDED LINE, MAXIMUM FEED RATE FOR 2-LINE MODE
                      00807 ; CS019B06 end
019D   1803           00808         btfsc   STATUS,C                        ; MJZ ADDED LINE, SKIP IF BORROW, IF FEED RATE HIGHER TH
                            AN 0X57 (first try was 0x40)
019E   29A1           00809         goto    feed_ok1                        ; MJZ ADDED LINE, OK IF FEED RATE ALREADY LESS THAN 0X57
                      00810 ; CS019B06 start
                      00811 ;       movlw   0x57                            ; MJZ ADDED LINE
019F   30C8           00812         movlw   0xc8                            ; MJZ ADDED LINE        a little more than 3.5 seconds b
                            etween balls
                      00813 ; CS019B06 end
01A0   00BB           00814         movwf   feed_a2d                        ; MJZ ADDED LINE, RESTRICT FEED RATE TO 0X57 (first try 
                            was 0x40) MAXIMUM FOR 2-LINE MODE
01A1                  00815 feed_ok1:                                               ; MJZ ADDED LINE
01A1   2847           00816         goto idle                                       ; MJZ ADDED LINE
                      00817 
01A2                  00818 tick4:
01A2   3004           00819         movlw   4
01A3   00B3           00820         movwf   a2d_chan
01A4   231A           00821         call    acq_a2d                         ; acquire chan4 a2d - sweep enable
01A5   00BC           00822         movwf   sweep_a2d
01A6   22F8           00823         call    update_remote           ; check if remote enable switch had changed
01A7   2847           00824         goto    idle
                      00825 
01A8                  00826 tick5:
01A8   2339           00827         call    calc_bot_pwm
01A9   23C3           00828         call    calc_top_pwm
01AA   2847           00829         goto    idle
                      00830 
01AB                  00831 tick6:
01AB   21B2           00832         call    update_top_pwm
                      00833 ;       call    update_top_pwm
                      00834 ;       call    update_bot_pwm
01AC   21CD           00835         call    update_bot_pwm
01AD   2847           00836         goto    idle
                      00837 
01AE                  00838 tick7:
01AE   21E8           00839         call    update_feed_pwm
01AF   22E1           00840         call    update_sweep
                      00841 ;       call    update_bat_led
01B0   2537           00842         call    record_bat_level
01B1   2847           00843         goto    idle
                      00844 
                      00845 
01B2                  00846 update_top_pwm:
01B2   0B28           00847         decfsz  top_inited,w            ; if TOP MOTOR PWM inited,
                      00848 ;       goto    upd_exit                ; 06/09/05 MJZ commented this line, see next line
01B3   2624           00849         call    top_not_inited  ; 06/09/05 MJZ added this line, at power-on, ramp up top serve motor reg
                            ardless of speed pot
01B4   0825           00850         movf    c_top_pwm,w             ;  load current top pwm value into W
01B5   0224           00851         subwf   t_top_pwm,w             ;  W = (target - current)
01B6   1903           00852         btfsc   STATUS,Z                ;  if current top pwm value equal target top pwm value
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B7   29CC           00853         goto    upd_exit                ;   done
01B8   1C03           00854         btfss   STATUS,C                ;  if current top pwm value < than target ( borrow cleared)
01B9   29C2           00855         goto    dec_top                 ;       (goto dec_top if borrow set)
01BA   39F8           00856         andlw   0xf8                    ;  if delta < 8
01BB   1D03           00857         btfss   STATUS,Z
01BC   29BF           00858         goto    inc_top_by_8
01BD   0A25           00859         incf    c_top_pwm,w             ;   incr top pwm value and save to W
01BE   29CA           00860         goto    set_top
01BF                  00861 inc_top_by_8:                           ; else incr top pwm value by 8
                      00862 ;       movlw   8
                      00863 ;       btfss   init_done,0             ;      if init_done flag is set
01BF   3004           00864         movlw   4                       ;      else inc by 4
01C0   0725           00865         addwf   c_top_pwm,w
01C1   29CA           00866         goto    set_top
01C2                  00867 dec_top:
01C2   3C00           00868         sublw   0                       ; figure out delta to decrement
01C3   39F8           00869         andlw   0xf8                    ; if delta < 8
01C4   1D03           00870         btfss   STATUS,Z
01C5   29C8           00871         goto    dec_top_by_8
01C6   0325           00872         decf    c_top_pwm,w             ;  dec top pwm value and save to W
01C7   29CA           00873         goto    set_top
01C8                  00874 dec_top_by_8
                      00875 ;       movlw   8
                      00876 ;       btfss   init_done,0             ; if init_done flag is not set
01C8   3004           00877         movlw   4                       ;      dec by 4
01C9   0225           00878         subwf   c_top_pwm,w             ; else dec top pwm value by 8
01CA                  00879 set_top:
01CA   00A5           00880         movwf   c_top_pwm               ;  save current top pwm value
01CB   0095           00881         movwf   CCPR1L                  ;  write new duty cycle value to PWM module 1
01CC                  00882 upd_exit:
01CC   0008           00883         return
                      00884 
01CD                  00885 update_bot_pwm:                         ; check if bottom pwm duty cycle need updating
01CD   0B29           00886         decfsz  bot_inited,w            ; if BOTTOM MOTOR PWM inited,
                      00887 ;       goto    update_done             ; 06/15/05 MJZ change, see next line
01CE   2627           00888         call    bot_not_inited  ; 06/15/05 MJZ change for ramping up bottom serve motor at power-on
01CF   0827           00889         movf    c_bot_pwm,w             ;  load current bottom pwm value into W
01D0   0226           00890         subwf   t_bot_pwm,w             ;  W = target - current
01D1   1903           00891         btfsc   STATUS,Z                ;  if current bottom pwm value = target bottom pwm value
01D2   29E7           00892         goto    update_done             ;   goto exit
01D3   1C03           00893         btfss   STATUS,C                ;  if current bottom pwm value < target ( no borrow)
01D4   29DD           00894         goto    dec_bot                 ; 
01D5   39F8           00895         andlw   0xf8                    ;  if delta < 8
01D6   1D03           00896         btfss   STATUS,Z
01D7   29DA           00897         goto    inc_bot_by_8
01D8   0A27           00898         incf    c_bot_pwm,w             ;   incr bottom pwm value and save to W
01D9   29E5           00899         goto    set_bot
01DA                  00900 inc_bot_by_8:
                      00901 ;       movlw   8                       ; else inc bot pwm value by 8
                      00902 ;       btfss   init_done,0             ;      if init_done flag is set
01DA   3004           00903         movlw   4                       ;      else inc by 4
01DB   0727           00904         addwf   c_bot_pwm,w
01DC   29E5           00905         goto    set_bot
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00906 
01DD                  00907 dec_bot:
01DD   3C00           00908         sublw   0                       ; figure out delta to decr
01DE   39F8           00909         andlw   0xf8                    ; if delta < 8
01DF   1D03           00910         btfss   STATUS,Z
01E0   29E3           00911         goto    dec_bot_by_8
01E1   0327           00912         decf    c_bot_pwm,w             ;  dec bottom pwm value and save to W
01E2   29E5           00913         goto    set_bot
01E3                  00914 dec_bot_by_8
                      00915 ;       movlw   8                       ; else dec bot pwm value by 8
                      00916 ;       btfss   init_done,0             ;      if init_done flag is set
01E3   3004           00917         movlw   4                       ;      else dec by 4
01E4   0227           00918         subwf   c_bot_pwm,w
01E5                  00919 set_bot:
01E5   00A7           00920         movwf   c_bot_pwm               ;  save current bottom pwm value
01E6   009B           00921         movwf   CCPR2L                  ;  write new duty cycle value to PWM module 2
01E7                  00922 update_done:
01E7   0008           00923         return
                      00924 
                      00925 ; if soft_pwm == 0
                      00926 ;   if input >= 1.0 volt, enable software pwm
                      00927 ;   if input < 1.0 volt, do nothing
                      00928 ; if soft_pwm == 1
                      00929 ;   if input < 1.0 volt, soft_pwm = 0 and disable software pwm
                      00930 ;   if input > 1.0, adjust pwmdesired
                      00931 ; check a2d of feed control
01E8                  00932 update_feed_pwm:
01E8   0B2A           00933         decfsz  feed_inited,w
01E9   2AC7           00934         goto    chk_feed_xit
01EA   1AD0           00935         btfsc   remote_toggle,REMOTE_BIT ; if remote switch is on
01EB   29EE           00936         goto    no_remote_feed
01EC   1C50           00937         btfss   remote_toggle,FEED_BIT  ;    and feed toggle is off
01ED   29F2           00938         goto    feed_off                ;        disable feed
01EE                  00939 no_remote_feed:
01EE   083B           00940         movf    feed_a2d,w
01EF   3C13           00941         sublw   0x13                    ; if input < 0.4V (no borrow)
01F0   1C03           00942         btfss   STATUS,C
01F1   29FB           00943         goto    over1v
01F2                  00944 feed_off:
01F2   0B37           00945         decfsz  soft_pwm,w              ;  and soft_pwm was on
01F3   2AC7           00946         goto    chk_feed_xit
                      00947         ; disable software pwm
01F4   138B           00948         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
01F5   01B7           00949         clrf    soft_pwm
01F6   01B0           00950         clrf    pwmdesired
01F7   1007           00951         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
01F8   11C3           00952         bcf     led_bits,FEED_LED
01F9   1186           00953         bcf     PORTB,FEED_LED          ;  turn feed led off
01FA   2AC7           00954         goto    chk_feed_xit
01FB                  00955 over1v
01FB   0B37           00956         decfsz  soft_pwm,w              ; if soft_pwm was off
01FC   29FE           00957         goto    enable_feed
01FD   2A07           00958         goto    update_feed
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01FE                  00959 enable_feed:
                      00960         ; enable software pwm
01FE   1586           00961         bsf     PORTB,FEED_LED          ; turn feed led on
01FF   15C3           00962         bsf     led_bits,FEED_LED
0200   0181           00963         clrf    TMR0                    ; reset timer 0
0201   30A0           00964         movlw   INTCONVAL               ; enable timer0 intr
0202   008B           00965         movwf   INTCON
0203   0AB7           00966         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
                      00967 ; CS019B06 start
                      00968 ;       movlw   0x43                    ; got straight to 26% duty cycle
                      00969 ; CS019B07 start
                      00970 ;       movlw   0x2e                    ; got straight to 18% duty cycle
                      00971 ; CS019B06 end
0204   3038           00972         movlw   0x38                    ; got straight to 21% duty cycle
                      00973 ; CS019B07 end
0205   00BF           00974         movwf   delta_s
0206   2AC5           00975         goto    set_pwm_value
                      00976 
0207                  00977 update_feed:                            ; check if feed motor pwm duty cycle need updating
                      00978 
0207   3007           00979         movlw   0x07                    ; if feed_a2d > 248
0208   073B           00980         addwf   feed_a2d,W              ;
0209   1C03           00981         btfss   STATUS,C                ; and
020A   2A12           00982         goto    calc_feed
020B   3020           00983         movlw   0x20                    ;  if pwmdesired > 223
020C   0730           00984         addwf   pwmdesired,W            ;
020D   1C03           00985         btfss   STATUS,C                ;  
020E   2A12           00986         goto    calc_feed
020F   0F30           00987         incfsz  pwmdesired,w
0210   00B0           00988         movwf   pwmdesired
0211   2AC7           00989         goto    chk_feed_xit            ;  if > 233, step up by one to 255
                      00990         
0212                  00991 calc_feed:
0212   3014           00992         movlw   0x14                    ; calc delta c
0213   023B           00993         subwf   feed_a2d,w
0214   00BE           00994         movwf   delta_c                 ; delta_c = feed_a2d - 20
                      00995 ; CS019B06 start
                      00996 ;       addlw   0x43                    ;  W = 67 + delta_c
                      00997 ;       addlw   0x3a                    ;  W =  + delta_c       measured 14 sec feed rate, 70 balls, 23%
                             duty cycle, pot at 12 setting = 0.89V = 45 count
                      00998 ; CS019B07 start
                      00999 ;       addlw   0x2e
                      01000 ; CS019B06 end
0215   3E38           01001         addlw   0x38
                      01002 ; CS019B07 end
                      01003 #ifdef notdef
                      01004         movwf   delta_s                 ;    save in delta_s
                      01005         bcf     STATUS,C
                      01006         rrf     delta_c,F               ;  ( div by 2 )
                      01007         bcf     STATUS,C
                      01008         rrf     delta_c,F               ;  ( div by 4 )
                      01009         movf    delta_c,W
                      01010         subwf   delta_s,F               ;         - delta_c / 4
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01011         bcf     STATUS,C
                      01012         rrf     delta_c,F               ;  ( div by 8 )
                      01013         bcf     STATUS,C
                      01014         rrf     delta_c,F               ;  ( div by 16 )
                      01015         movf    delta_c,W
                      01016         addwf   delta_s,F               ;         + delta_c / 16
                      01017         bcf     STATUS,C
                      01018         rrf     delta_c,F               ;  ( div by 32 )
                      01019         bcf     STATUS,C
                      01020         rrf     delta_c,W               ;  ( div by 64 )
                      01021         subwf   delta_s,W               ;         - delta_c / 64
                      01022 
                      01023         movwf   delta_s                 ; delta_s is now new feed pwm value
                      01024 #endif
                      01025 
                      01026 ; To compensate for non-linear voltage/speed curve, the pwm duty cycle is fine tuned for each increment 
                            on the feed rate dial.
0216   083B           01027         movf    feed_a2d,w
0217   1003           01028         bcf             STATUS,C
0218   3CE8           01029         sublw   0xe8                    ; 4.55V - feed_a2d
0219   1C03           01030         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 4.55V
021A   2A35           01031         goto    feed_0_2
021B   1003           01032         bcf             STATUS,C
021C   083B           01033         movf    feed_a2d,w
021D   3CBF           01034         sublw   0xbf                    ; 3.75V - feed_a2d
021E   1C03           01035         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 3.75V
021F   2A45           01036         goto    feed_2_4
0220   1003           01037         bcf             STATUS,C
0221   083B           01038         movf    feed_a2d,w
                      01039 ;       sublw   0xa6                    ; 3.25V - feed_a2d
0222   3CA0           01040         sublw   0xa0                    ; 3.15V - feed_a2d
0223   1C03           01041         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 3.25V
0224   2A50           01042         goto    feed_4_6
0225   1003           01043         bcf             STATUS,C
0226   083B           01044         movf    feed_a2d,w
0227   3C7A           01045         sublw   0x7a                    ; 2.4V - feed_a2d
0228   1C03           01046         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 2.4V
0229   2A62           01047         goto    feed_6_8
022A   1003           01048         bcf             STATUS,C
022B   083B           01049         movf    feed_a2d,w
022C   3C57           01050         sublw   0x57                    ; 1.7V - feed_a2d
022D   1C03           01051         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 1.7V
022E   2A80           01052         goto    feed_8_10
022F   1003           01053         bcf             STATUS,C
0230   083B           01054         movf    feed_a2d,w
0231   3C2E           01055         sublw   0x2e                    ; 0.9V - feed_a2d
0232   1C03           01056         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 0.9V
0233   2A9E           01057         goto    feed_10_12
0234   2AB6           01058         goto    feed_12_off
0235                  01059 feed_0_2:                                       ; 4.55V - 5.00V pot, 65% - 100% duty cycle
0235   30A6           01060         movlw   0xa6                    ; 65% duty cycle, 0xff - 0xa6 = 89d range
0236   00BF           01061         movwf   delta_s
0237   30E8           01062         movlw   0xe8                    ; 4.55V, 0xff - 0xe8 = 23d range
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0238   023B           01063         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0239   00BE           01064         movwf   delta_c
023A   1003           01065         bcf             STATUS,C
023B   0DBE           01066         rlf             delta_c,f               ; x2
023C   1003           01067         bcf             STATUS,C
023D   0D3E           01068         rlf             delta_c,w               ; x4
023E   1003           01069         bcf             STATUS,C
023F   07BF           01070         addwf   delta_s,f               ; pot change x 4 = duty cycle change
0240   1C03           01071         btfss   STATUS,C
0241   2AB9           01072         goto    feed_end
0242   30FF           01073         movlw   0xff
0243   00BF           01074         movwf   delta_s
0244   2AB9           01075         goto    feed_end
0245                  01076 feed_2_4:                                       ; 3.75V - 4.55V pot, 40% - 65% duty cycle
0245   3066           01077         movlw   0x66                    ; 40% duty cycle, 0xa6 - 0x66 = 64d range
0246   00BF           01078         movwf   delta_s
0247   30BF           01079         movlw   0xbf                    ; 3.75V, 0xe8 - 0xbf = 41d range
0248   023B           01080         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0249   00BE           01081         movwf   delta_c
024A   1003           01082         bcf             STATUS,C
024B   0C3E           01083         rrf             delta_c,w               ; /2
024C   07BE           01084         addwf   delta_c,f               ; add half
024D   083E           01085         movf    delta_c,w
024E   07BF           01086         addwf   delta_s,f               ; pot change x 1.5 = duty cycle change
024F   2AB9           01087         goto    feed_end
                      01088 ;feed_4_6:                                      ; 3.25V - 3.75V pot, 31%-40% duty cycle
0250                  01089 feed_4_6:                                       ; 3.15V - 3.75V pot, 32%-40% duty cycle
                      01090 ;       movlw   0x4f                    ; 31% duty cycle, 0x66 - 0x4f = 23d range
0250   3051           01091         movlw   0x51                    ; 32% duty cycle, 0x66 - 0x51 = 21d range
0251   00BF           01092         movwf   delta_s
                      01093 ;       movlw   0xa6                    ; 3.25V, 0xbf - 0xa6 = 25d range
0252   30A0           01094         movlw   0xa0                    ; 3.15V, 0xbf - 0xa0 = 32d range
0253   023B           01095         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0254   00BE           01096         movwf   delta_c
0255   1003           01097         bcf             STATUS,C
0256   0C3E           01098         rrf             delta_c,w               ; /2
0257   07BE           01099         addwf   delta_c,f               ; add half
0258   083E           01100         movf    delta_c,w
0259   07BF           01101         addwf   delta_s,f               ; pot change x 1.5 = duty cycle change
025A   1003           01102         bcf             STATUS,C
025B   3066           01103         movlw   0x66
025C   023F           01104         subwf   delta_s,w
025D   1C03           01105         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
025E   2AB9           01106         goto    feed_end                ; then ok
025F   3066           01107         movlw   0x66                    ; else fix to range maximum
0260   00BF           01108         movwf   delta_s 
0261   2AB9           01109         goto    feed_end
                      01110 ;feed_6_8:                                      ; 2.40V - 3.25V pot, 28%-31% duty cycle
0262                  01111 feed_6_8:                                       ; 2.40V - 3.15V pot, 28%-32% duty cycle
                      01112 ;       movlw   0x47                    ; 28% duty cycle, 0x4f - 0x47= 8d range
                      01113 ;       movlw   0x47                    ; 28% duty cycle, 0x51 - 0x47= 10d range
0262   3049           01114         movlw   0x49                    ; 29% duty cycle, 0x51 - 0x49= 8d range
0263   00BF           01115         movwf   delta_s
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01116 ;       movlw   0x7a                    ; 2.40V, 0xa6 - 0x7a = 44d range
0264   307A           01117         movlw   0x7a                    ; 2.40V, 0xa0 - 0x7a = 38d range
0265   023B           01118         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0266   00BE           01119         movwf   delta_c
0267   1003           01120         bcf             STATUS,C
0268   0CBE           01121         rrf             delta_c,f               ; /2
0269   1003           01122         bcf             STATUS,C
026A   0C3E           01123         rrf             delta_c,w               ; /4
026B   07BF           01124         addwf   delta_s,f               ; + 1/4
026C   1003           01125         bcf             STATUS,C
026D   0CBE           01126         rrf             delta_c,f               ; /8
026E   1003           01127         bcf             STATUS,C
026F   0CBE           01128         rrf             delta_c,f               ; /16
0270   1003           01129         bcf             STATUS,C
0271   0CBE           01130         rrf             delta_c,f               ; /32
0272   1003           01131         bcf             STATUS,C
0273   083E           01132         movf    delta_c,w
0274   02BF           01133         subwf   delta_s,f               ; - 1/32
0275   1003           01134         bcf             STATUS,C
0276   0C3E           01135         rrf             delta_c,w               ; /64
0277   02BF           01136         subwf   delta_s,f               ; - 1/64
0278   1003           01137         bcf             STATUS,C
0279   3051           01138         movlw   0x51
027A   023F           01139         subwf   delta_s,w
027B   1C03           01140         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
027C   2AB9           01141         goto    feed_end                ; then ok
027D   3051           01142         movlw   0x51                    ; else fix to range maximum
027E   00BF           01143         movwf   delta_s 
027F   2AB9           01144         goto    feed_end
                      01145 ;feed_8_10:                                     ; 1.70V - 2.40V pot, 26%-28% duty cycle
0280                  01146 feed_8_10:                                      ; 1.70V - 2.40V pot, 26%-29% duty cycle
                      01147 ;       movlw   0x40                    ; 25% duty cycle, 0x47 - 0x40 = 7d range
0280   3042           01148         movlw   0x42                    ; 26% duty cycle, 0x49 - 0x42 = 7d range
0281   00BF           01149         movwf   delta_s
0282   3057           01150         movlw   0x57                    ; 1.70V, 0x7a - 0x57 = 35d range
0283   023B           01151         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0284   00BE           01152         movwf   delta_c
0285   1003           01153         bcf             STATUS,C
0286   0CBE           01154         rrf             delta_c,f               ; /2
0287   1003           01155         bcf             STATUS,C
0288   0C3E           01156         rrf             delta_c,w               ; /4
0289   07BF           01157         addwf   delta_s,f               ; + 1/4
028A   1003           01158         bcf             STATUS,C
028B   0CBE           01159         rrf             delta_c,f               ; /8
028C   1003           01160         bcf             STATUS,C
028D   0CBE           01161         rrf             delta_c,f               ; /16
028E   1003           01162         bcf             STATUS,C
028F   0CBE           01163         rrf             delta_c,f               ; /32
0290   1003           01164         bcf             STATUS,C
0291   083E           01165         movf    delta_c,w
0292   02BF           01166         subwf   delta_s,f               ; - 1/32
0293   1003           01167         bcf             STATUS,C
0294   0C3E           01168         rrf             delta_c,w               ; /64
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0295   02BF           01169         subwf   delta_s,f               ; - 1/64
0296   1003           01170         bcf             STATUS,C
0297   3049           01171         movlw   0x49
0298   023F           01172         subwf   delta_s,w
0299   1C03           01173         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
029A   2AB9           01174         goto    feed_end                ; then ok
029B   3049           01175         movlw   0x49                    ; else fix to range maximum
029C   00BF           01176         movwf   delta_s 
029D   2AB9           01177         goto    feed_end
                      01178 ;feed_10_12:                            ; 0.90V - 1.70V pot, 23%-25% duty cycle
029E                  01179 feed_10_12:                                     ; 0.90V - 1.70V pot, 23%-26% duty cycle
                      01180 ;       movlw   0x3b                    ; 23% duty cycle, 0x40 - 0x3b = 5d range
                      01181 ;       movlw   0x3b                    ; 23% duty cycle, 0x42 - 0x3b = 7d range
                      01182 ; CS019B07 start
029E   30FF           01183         movlw   0xff                    ; 50% duty cycle, 0x42 - 0x3b = 7d range
                      01184 ; CS019B07 end
029F   00BF           01185         movwf   delta_s
02A0   302E           01186         movlw   0x2e                    ; 0.90V, 0x57 - 0x2e = 41d range
02A1   023B           01187         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
02A2   00BE           01188         movwf   delta_c                 ; 
02A3   1003           01189         bcf             STATUS,C
02A4   0CBE           01190         rrf             delta_c,f               ; /2
02A5   1003           01191         bcf             STATUS,C
02A6   0C3E           01192         rrf             delta_c,w               ; /4
02A7   07BF           01193         addwf   delta_s,f               ; + 1/4
02A8   1003           01194         bcf             STATUS,C
02A9   0CBE           01195         rrf             delta_c,f               ; /8
02AA   1003           01196         bcf             STATUS,C
02AB   0CBE           01197         rrf             delta_c,f               ; /16
02AC   1003           01198         bcf             STATUS,C
02AD   083E           01199         movf    delta_c,w
02AE   02BF           01200         subwf   delta_s,f               ; - 1/16
02AF   1003           01201         bcf             STATUS,C
02B0   0CBE           01202         rrf             delta_c,f               ; /32
02B1   1003           01203         bcf             STATUS,C
02B2   083E           01204         movf    delta_c,w
02B3   02BF           01205         subwf   delta_s,f               ; - 1/32
02B4   1003           01206         bcf             STATUS,C
                      01207 ;       movlw   0x42
                      01208 ;       subwf   delta_s,w
                      01209 ;       btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
                      01210 ;       goto    feed_end                ; then ok
                      01211 ;       movlw   0x42                    ; else fix to range maximum
                      01212 ;       movwf   delta_s 
02B5   2AB9           01213         goto    feed_end
02B6                  01214 feed_12_off:
02B6   300E           01215         movlw   0x0e
02B7   073B           01216         addwf   feed_a2d,w
02B8   00BF           01217         movwf   delta_s
02B9                  01218 feed_end:
                      01219 ; CS019B06 end
                      01220 
02B9   0830           01221         movf    pwmdesired,w
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02BA   023F           01222         subwf   delta_s,w               ; W = new pwm value - pwmdesired
02BB   1C03           01223         btfss   STATUS,C                ; skip if no borrow: new pwm value > pwmdesired
02BC   2AC5           01224         goto    set_pwm_value   ; new pwm value is smaller, ok to ramp dowm immediately
02BD   39FC           01225         andlw   0xfc                    ;
02BE   1903           01226         btfsc   STATUS,Z                ; if delta < 4
02BF   2AC5           01227         goto    set_pwm_value   ; set to new pwm value
02C0   3003           01228         movlw   3                               ; else incr pwmdesired by 3
02C1   1C36           01229         btfss   init_done,0             ; if not init_done, incr by 2
02C2   3002           01230         movlw   2
02C3   07B0           01231         addwf   pwmdesired,f
02C4   2AC7           01232         goto    chk_feed_xit
                      01233         
02C5                  01234 set_pwm_value
02C5   083F           01235         movf    delta_s,w
02C6   00B0           01236         movwf   pwmdesired              ; save current feed pwm value
02C7                  01237 chk_feed_xit:
02C7   0008           01238         return
                      01239 
                      01240 ; at 13 seconds, if pot > 25% duty cycle, init feed pwm to 25% duty cycle
                      01241 ; at 14 seconds, if pot > 50% duty cycle, init feed pwm to 50% duty cycle
02C8                  01242 init_feed_pwm:                          ; this gets called before feed_inited is set
02C8   083B           01243         movf    feed_a2d,w
02C9   3C20           01244         sublw   0x20                    ; if input < 0.4V (no borrow)
02CA   1C03           01245         btfss   STATUS,C
02CB   2AD5           01246         goto    over_pt4_v
02CC   0B37           01247         decfsz  soft_pwm,w              ;  and soft_pwm was on
02CD   2AE0           01248         goto    init_feed_xit
                      01249         ; disable software pwm
02CE   138B           01250         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
02CF   01B7           01251         clrf    soft_pwm
02D0   01B0           01252         clrf    pwmdesired
02D1   1007           01253         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
02D2   11C3           01254         bcf     led_bits,FEED_LED
02D3   1186           01255         bcf     PORTB,FEED_LED          ;  turn feed led off
02D4   2AE0           01256         goto    init_feed_xit
02D5                  01257 over_pt4_v
02D5   0B37           01258         decfsz  soft_pwm,w              ; if soft_pwm was off
02D6   2AD8           01259         goto    init_enable_feed
02D7   2ADE           01260         goto    init_update_feed
02D8                  01261 init_enable_feed:
                      01262         ; enable software pwm
02D8   1586           01263         bsf     PORTB,FEED_LED          ; turn feed led on
02D9   15C3           01264         bsf     led_bits,FEED_LED
02DA   0181           01265         clrf    TMR0                    ; reset timer 0
02DB   30A0           01266         movlw   INTCONVAL               ; enable timer0 intr
02DC   008B           01267         movwf   INTCON
02DD   0AB7           01268         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
02DE                  01269 init_update_feed:                               ; check if feed motor pwm duty cycle need updating
02DE   083B           01270         movf    feed_a2d,w              ; *** go straight to feed_a2d value
02DF   00B0           01271         movwf   pwmdesired              ; save current feed pwm value
02E0                  01272 init_feed_xit:
02E0   0008           01273         return
                      01274 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01275 
                      01276 
02E1                  01277 update_sweep:
                      01278 ; turn on/off sweep motor based on a2d
02E1   0B2B           01279         decfsz  sweep_inited,w          ; if sweep not inited exit
02E2   2AF4           01280         goto    sweep_exit
02E3   1ED0           01281         btfss   remote_toggle,REMOTE_BIT; if remote not enable,
02E4   2AF5           01282         goto    sweep_remote
02E5   083C           01283         movf    sweep_a2d,w
                      01284 ;       sublw   0x33                    ;  if sweep switch < 1.0V (no borrow)
02E6   3C99           01285         sublw   0x99                    ;MJZ ADDED LINE, CHANGED TO < 3.0V TO TURN SWEEP ON REGARDLESS O
                            F WHICH RESISTOR DIVIDER CIRCUIT ACTIVATED
02E7   1C03           01286         btfss   STATUS,C
02E8   2AF0           01287         goto    sweep_off
02E9                  01288 sweep_on
02E9   184D           01289         btfsc   sweep_is_on,0           ;   if motor already enabled, exit
02EA   2AF4           01290         goto    sweep_exit
02EB   2605           01291         call    linesw_toggle_init      ;MJZ ADDED LINE, IF SWEEP MOTOR WAS JUST ENABLED, INIT LINESW_TO
                            GGLE TO MATCH 2-LINE SWITCH VALUE
02EC   1587           01292         bsf     PORTC,SWEEP_EN          ;    enable sweep motor
02ED   104C           01293         bcf     rbif_bits,0             ;    don't check for sweep motor error for 1 second     
02EE   0ACD           01294         incf    sweep_is_on,f
02EF   2AF4           01295         goto    sweep_exit1
02F0                  01296 sweep_off
02F0   1C4D           01297         btfss   sweep_is_on,0
02F1   2AF4           01298         goto    sweep_exit
02F2   1187           01299         bcf     PORTC,SWEEP_EN          ; else disable sweep motor
02F3   01CD           01300         clrf    sweep_is_on
02F4                  01301 sweep_exit1:
                      01302 ;       btfss   remote_toggle,REMOTE_BIT; if remote not enable,
                      01303 ;       goto    sweep_exit
                      01304 ;       movf    pwr_on_code,W           ;       if timeout or brown out
                      01305 ;       btfsc   STATUS,Z
                      01306 ;       goto    sweep_exit
                      01307 ;       movwf   flash_code              ;               flash the reset type code 2 time
                      01308 ;       call    flash_error
                      01309 ;       movf    pwr_on_code,W
                      01310 ;       movwf   flash_code
                      01311 ;       call    flash_error
                      01312 ;       bcf     led_bits,GREEN_LED
02F4                  01313 sweep_exit:
02F4   0008           01314         return
                      01315 
02F5                  01316 sweep_remote:                           ; remote switch on
02F5   1CD0           01317         btfss   remote_toggle,SWEEP_BIT ;  set SWEEP output based on SWEEP_BIT
02F6   2AF0           01318         goto    sweep_off
02F7   2AE9           01319         goto    sweep_on
                      01320 
                      01321 ; check if remote enable switch had changed
02F8                  01322 update_remote:
02F8   0B36           01323         decfsz  init_done,W             ; if init not done, don't bother
02F9   2B16           01324         goto    update_rmxit
02FA   0850           01325         movf    remote_toggle,W         ; pick up remote_toggle byte
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02FB   3920           01326         andlw   REMOTE_ON
02FC   0607           01327         xorwf   PORTC,W                 ; exclusive or with PORTC
02FD   3920           01328         andlw   REMOTE_ON               ; did REMOTE_ON change value
02FE   1903           01329         btfsc   STATUS,Z                ; if no change, exit
02FF   2B16           01330         goto    update_rmxit
                      01331 ;       movlw   0x20
                      01332 ;       movwf   remote_block            ; flush usart
0300   3020           01333         movlw   REMOTE_ON
0301   06D0           01334         xorwf   remote_toggle,F
0302   1AD0           01335         btfsc   remote_toggle,REMOTE_BIT ; if remote switch just turned on,
0303   2B17           01336         goto    remote_off
                      01337 
                      01338 ;       call    usart_enable
0304   1683           01339         bsf     STATUS,RP0              ; goto bank 1
0305   3081           01340         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0306   0099           01341         movwf   SPBRG
0307   3020           01342         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0308   0098           01343         movwf   TXSTA                   ; asynchronous mode, low speed mode
0309   1283           01344         bcf     STATUS,RP0              ; goto bank 0
030A   3090           01345         movlw   0x90                    ; 8-bit receive, receiver enabled
030B   0098           01346         movwf   RCSTA                   ; serial port enabled
030C   081A           01347         movf    RCREG,W                 ; flush input data
030D   081A           01348         movf    RCREG,W                 ; flush input data
                      01349 
                      01350 ;       movlw   REMOTE_ON
                      01351 ;       iorlw   FEED_TOGGLE
                      01352 ;       movwf   remote_toggle           ; then set remote and feed toggles
030E   1450           01353         bsf     remote_toggle,FEED_BIT  ;   set feed toggle
030F   184D           01354         btfsc   sweep_is_on,0           ;      if sweep is on
0310   14D0           01355         bsf     remote_toggle,SWEEP_BIT ;         set sweep bit
0311   084D           01356         movf    sweep_is_on,W           ; copy sweep_is_on flag to last_sweep
0312   00D3           01357         movwf   last_sweep
0313   304B           01358         movlw   BLOCK_CNT-8             ; short beep
0314   00D1           01359         movwf   remote_block
0315   25A3           01360         call    usart_disable
0316                  01361 update_rmxit:
0316   0008           01362         return
0317                  01363 remote_off:
                      01364 ;       call    usart_off
0317   10D0           01365         bcf     remote_toggle,SWEEP_BIT ; turn off sweep_toggle
0318   2DA9           01366         goto    usart_off
0319   0008           01367         return
                      01368 ;
                      01369 ; acquire reading on analog channel
                      01370 ; enters: (a2d_chan) = chanel number
                      01371 ; exits: W = result
031A                  01372 acq_a2d
031A   0EB3           01373         swapf   a2d_chan,F              ; move channel number
031B   1003           01374         bcf     STATUS,C                ;  clear carry bit before rotate
031C   0C33           01375         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
031D   3881           01376         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

031E   009F           01377         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
                      01378                                         ;;acquisition delay - incr channel number for next op
031F   0EB3           01379         swapf   a2d_chan,F              ; restore channel number
0320   0AB3           01380         incf    a2d_chan,F              ; incr channel number
0321   3005           01381         movlw   5                       ; mod 5 - only channels 0-4 valid
0322   0233           01382         subwf   a2d_chan,W
0323   1903           01383         btfsc   STATUS,Z
0324   00B3           01384         movwf   a2d_chan                ;      wrap to 0 if next chan is 5
                      01385 
0325   3018           01386         movlw   0x18                    ; need 19.6us acquisition time
0326   00C8           01387         movwf   delay
0327                  01388 delaylp:
0327   0BC8           01389         decfsz  delay,f
0328   2B27           01390         goto    delaylp
0329                  01391 WaitNoInt
0329   0801           01392         movf    TMR0,W                  ; waiting till enough time
032A   3CD0           01393         sublw   0d0h                    ; for one conversion before start
032B   1C03           01394         btfss   STATUS,C                ; of the next timer interrupt
032C   2B29           01395         goto    WaitNoInt               ; (Conv can be disturbed by an intr)
032D   151F           01396         bsf     ADCON0,GO               ; start ADC
032E                  01397 WaitAdc
032E   191F           01398         btfsc   ADCON0,GO               ; waiting until ACDC...
032F   2B2E           01399         goto    WaitAdc                 ; ... is ready
                      01400 ; result is waiting in ADRES, but first select next channel and start acquisition
0330   0EB3           01401         swapf   a2d_chan,F              ; restore channel number
0331   1003           01402         bcf     STATUS,C                ;  clear carry bit before rotate
0332   0C33           01403         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
0333   3881           01404         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
0334   009F           01405         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
0335   0EB3           01406         swapf   a2d_chan,F              ; restore channel number
                      01407 
0336   081E           01408         movf    ADRES,W                 ; put result into W-reg
0337   0064           01409         clrwdt                          ; clear watch dog timer
0338   0008           01410         return
                      01411 
                      01412 ; calculate desired bottom pwm
0339                  01413 calc_bot_pwm
                      01414 ; first calculate speed based on no spin
                      01415 ; 08/07/09 start
                      01416 ;       movlw   0x8f
0339   308F           01417         movlw   0x8f                    ; minimum speed pot read allowed
                      01418 ; 08/07/09 end
033A   0239           01419         subwf   spd_a2d,w
033B   00BF           01420         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01421 ; 08/07/09 start
                      01422 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01423 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
033C   3E4A           01424         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 72/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01425 ; 08/07/09 end
033D   00BD           01426         movwf   calc_pwm
033E   1003           01427         bcf     STATUS,C
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033F   0CBF           01428         rrf     delta_s,F               ; (div by 2)
                      01429 ; 08/07/09 start
                      01430 ;       movf    delta_s,w
                      01431 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01432 ; 08/07/09 end
0340   1003           01433         bcf     STATUS,C
0341   0CBF           01434         rrf     delta_s,f               ; (div by 4)
0342   083F           01435         movf    delta_s,w
0343   07BD           01436         addwf   calc_pwm,F              ;               + delta_s / 4
0344   1003           01437         bcf     STATUS,C
0345   0CBF           01438         rrf     delta_s,F               ; (div by 8)
                      01439 ; 08/07/09 start
0346   083F           01440         movf    delta_s,w
0347   07BD           01441         addwf   calc_pwm,F              ;               + delta_s / 8
                      01442 ; 08/07/09 end
0348   1003           01443         bcf     STATUS,C
0349   0CBF           01444         rrf     delta_s,F               ; (div by 16)
                      01445 ; 08/07/09 start
034A   02BD           01446         subwf   calc_pwm,f              ;               - delta_s / 16
                      01447 ; 08/07/09 end
                      01448 ;       bcf     STATUS,C
                      01449 ;       rrf     delta_s,W               ; (div by 32)
                      01450 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01451 ; 08/07/09 end
                      01452 ; now adjust based on spin
034B   0838           01453         movf    spin_a2d,w
034C   3CBA           01454         sublw   0xba                    ; 186 - spin_a2d
034D   1903           01455         btfsc   STATUS,Z                ; if 186 <= spin_a2d <= 191, then no spin
034E   2BBB           01456         goto    no_spin1
034F   1803           01457         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
0350   2B55           01458         goto    adjust_backspin1
0351   3E05           01459         addlw   5                       ;
0352   1803           01460         btfsc   STATUS,C                ; if spin_a2d is 187,188,189,190 or 191, then no spin
0353   2BBB           01461         goto    no_spin1
0354   2B93           01462         goto    adjust_topspin1
0355                  01463 adjust_backspin1:                       ; if spin_a2d < 186 then we have back spin
0355   30C5           01464         movlw   0xc5
0356   0239           01465         subwf   spd_a2d,W               ; speed_a2d - 197
0357   1803           01466         btfsc   STATUS,C                ; skip if borrow (slow speed)
0358   2B71           01467         goto    high_spd1
0359   308F           01468         movlw   0x8f                    ; slow speed
035A   0239           01469         subwf   spd_a2d,w
035B   00BF           01470         movwf   delta_s                 ; delta_s = speed_a2d - 143
035C   00C9           01471         movwf   mult1                   ; mult1 =       delta_s
035D   1003           01472         bcf     STATUS,C
035E   0CBF           01473         rrf     delta_s,f               ; (div by 2)
035F   1003           01474         bcf     STATUS,C
0360   0CBF           01475         rrf     delta_s,f               ; (div by 4)
0361   083F           01476         movf    delta_s,w
0362   07C9           01477         addwf   mult1,f                 ;               + delta_s / 4
0363   1003           01478         bcf     STATUS,C
0364   0CBF           01479         rrf     delta_s,f               ; (div by 8)
0365   1003           01480         bcf     STATUS,C
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0366   0CBF           01481         rrf     delta_s,f               ; (div by 16)
0367   083F           01482         movf    delta_s,w
0368   02C9           01483         subwf   mult1,f                 ;               - delta_s / 16
0369   1003           01484         bcf     STATUS,C
036A   0C3F           01485         rrf     delta_s,w               ; (div by 32)
036B   07C9           01486         addwf   mult1,f                 ;               + delta_s / 32
036C   300B           01487         movlw   0x0b
036D   00CA           01488         movwf   mult2
036E   256D           01489         call    mult_sub                ; W = 11 * mult1 / 64
036F   00C9           01490         movwf   mult1                   ; mult1 is maxspin for this speed
0370   2B89           01491         goto    adjust_bs1
0371                  01492 high_spd1:
0371   30C5           01493         movlw   0xc5
0372   0239           01494         subwf   spd_a2d,W               ; speed_a2d - 197
0373   00BF           01495         movwf   delta_s                 ; delta_s = speed_a2d - 197
0374   00C9           01496         movwf   mult1
0375   1003           01497         bcf     STATUS,C
0376   0CBF           01498         rrf     delta_s,f               ; (div by 2)
0377   1003           01499         bcf     STATUS,C
0378   0CBF           01500         rrf     delta_s,f               ; (div by 4)
0379   083F           01501         movf    delta_s,w
037A   07C9           01502         addwf   mult1,f                 ;               + delta_s / 4
037B   1003           01503         bcf     STATUS,C
037C   0CBF           01504         rrf     delta_s,f               ; (div by 8)
037D   1003           01505         bcf     STATUS,C
037E   0CBF           01506         rrf     delta_s,f               ; (div by 16)
037F   083F           01507         movf    delta_s,w
0380   02C9           01508         subwf   mult1,f                 ;               - delta_s / 16
0381   1003           01509         bcf     STATUS,C
0382   0C3F           01510         rrf     delta_s,w               ; (div by 32)
0383   07C9           01511         addwf   mult1,f                 ;               + delta_s / 32
0384   300B           01512         movlw   0x0b
0385   00CA           01513         movwf   mult2
0386   256D           01514         call    mult_sub                ; W = 11 * mult1 / 64
0387   3C0B           01515         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
0388   00C9           01516         movwf   mult1                   ; mul1 is maxspin for this speed
0389                  01517 adjust_bs1:
0389   0838           01518         movf    spin_a2d,w
038A   3CBA           01519         sublw   0xba                    ; 186 - spin_a2d
038B   00BF           01520         movwf   delta_s                 ; amount of back spin desired (delta back_spin)
038C   00CA           01521         movwf   mult2                   ; max delta spin = delta_s
038D   1003           01522         bcf     STATUS,C
038E   0C3F           01523         rrf     delta_s,w               ; (div by 2)
038F   07CA           01524         addwf   mult2,f                 ;               + delta_s / 2
0390   256D           01525         call    mult_sub                ; W = maxspin * (delta back_spin) / 64
0391   07BD           01526         addwf   calc_pwm,f              ; calc_pwm = calc_pwm + maxspin * (delta back_spin) / 64
0392   2BBB           01527         goto    no_spin1
                      01528 
0393                  01529 adjust_topspin1:
0393   30BF           01530         movlw   0xbf                    ; mult1 = spin_a2d - 191
0394   0238           01531         subwf   spin_a2d,w
0395   00C9           01532         movwf   mult1                   ; max top spin = delta_spin
0396   00BF           01533         movwf   delta_s
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0397   1003           01534         bcf     STATUS,C
0398   0CBF           01535         rrf     delta_s,f               ; (div by 2)
0399   1003           01536         bcf     STATUS,C
039A   0CBF           01537         rrf     delta_s,f               ; (div by 4)
039B   1003           01538         bcf     STATUS,C
039C   0CBF           01539         rrf     delta_s,f               ; (div by 8)
039D   083F           01540         movf    delta_s,w
039E   07C9           01541         addwf   mult1,f                 ;               + delta_spin / 8 
039F   1003           01542         bcf     STATUS,C
03A0   0CBF           01543         rrf     delta_s,f               ; (div by 16)
03A1   083F           01544         movf    delta_s,w
03A2   02C9           01545         subwf   mult1,f                 ;               - delta_spin / 16
03A3   1003           01546         bcf     STATUS,C
03A4   0C3F           01547         rrf     delta_s,w               ; (div by 32)
03A5   07C9           01548         addwf   mult1,f                 ;               + delta_spin / 32
                      01549 
03A6   30C5           01550         movlw   0xc5
03A7   0239           01551         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
03A8   1C03           01552         btfss   STATUS,C                ; skip if no borrow (fast speed)
03A9   2BB6           01553         goto    slow_spd
                      01554                                         ; fast speed:
03AA   00BF           01555         movwf   delta_s                 ; maxspin = delta_speed / 2
03AB   1003           01556         bcf     STATUS,C
03AC   0CBF           01557         rrf     delta_s,f               ; (div by 2)
03AD   083F           01558         movf    delta_s,w
03AE   00CA           01559         movwf   mult2
03AF   1003           01560         bcf     STATUS,C
03B0   0CBF           01561         rrf     delta_s,F               ; (div by 4)
03B1   1003           01562         bcf     STATUS,C
03B2   0C3F           01563         rrf     delta_s,W               ; (div by 8)
03B3   024A           01564         subwf   mult2,W                 ;           - delta_speed / 8
03B4   3E29           01565         addlw   0x29                    ;           + 41
03B5   2BB7           01566         goto    ts_com1
                      01567 
03B6                  01568 slow_spd
03B6   3029           01569         movlw   0x29                    ; slow speed: maxspin = 41
03B7                  01570 ts_com1
03B7   023D           01571         subwf   calc_pwm,w
03B8   00CA           01572         movwf   mult2                   ; mult2 = calc_pwm - maxspin
03B9   256D           01573         call    mult_sub                ; W = (max top spin) * (calc_pwm - maxspin) / 64
03BA   02BD           01574         subwf   calc_pwm,f              ; calc_pwm = calc_pwm - (196 - spin_a2d) * (calc_pwm - maxspin) 
                            / 64
03BB                  01575 no_spin1
                      01576 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01577 ;       sublw   0xf3                    ; DEBUG
                      01578 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01579 ;       goto    force255                ; DEBUG
03BB   083D           01580         movf    calc_pwm,w
03BC   00A6           01581         movwf   t_bot_pwm
03BD   3C1F           01582         sublw   0x1f                    ; 41 - t_bot_pwm
03BE   1C03           01583         btfss   STATUS,C                ; skip if no borrow
03BF   0008           01584         return
03C0   301F           01585         movlw   0x1f
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03C1   00A6           01586         movwf   t_bot_pwm
03C2   0008           01587         return                          ;  make at least 41
                      01588 ;force255                               ; DEBUG
                      01589 ;       movlw   0xff                    ; DEBUG
                      01590 ;       movwf   t_bot_pwm               ; DEBUG
                      01591 ;       return                          ; DEBUG
                      01592 
                      01593 ; calculate desired top pwm
03C3                  01594 calc_top_pwm
                      01595 ; first calculate speed based on no spin
                      01596 ; 08/07/09 start
                      01597 ;       movlw   0x8f
03C3   308F           01598         movlw   0x8f                    ; minimum speed pot read allowed
                      01599 ; 08/07/09 end
03C4   0239           01600         subwf   spd_a2d,w
03C5   00BF           01601         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01602 ; 08/07/09 start
                      01603 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01604 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
03C6   3E4A           01605         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 74/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01606 ; 08/07/09 end
03C7   00BD           01607         movwf   calc_pwm
03C8   1003           01608         bcf     STATUS,C
03C9   0CBF           01609         rrf     delta_s,F               ; (div by 2)
                      01610 ; 08/07/09 start
                      01611 ;       movf    delta_s,w
                      01612 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01613 ; 08/07/09 end
03CA   1003           01614         bcf     STATUS,C
03CB   0CBF           01615         rrf     delta_s,f               ; (div by 4)
03CC   083F           01616         movf    delta_s,w
03CD   07BD           01617         addwf   calc_pwm,F              ;               + delta_s / 4
03CE   1003           01618         bcf     STATUS,C
03CF   0CBF           01619         rrf     delta_s,F               ; (div by 8)
                      01620 ; 08/07/09 start
03D0   083F           01621         movf    delta_s,w
03D1   07BD           01622         addwf   calc_pwm,F              ;               + delta_s / 8
                      01623 ; 08/07/09 end
03D2   1003           01624         bcf     STATUS,C
03D3   0CBF           01625         rrf     delta_s,F               ; (div by 16)
                      01626 ; 08/07/09 start
03D4   02BD           01627         subwf   calc_pwm,f              ;               - delta_s / 16
                      01628 ; 08/07/09 end
                      01629 ;       bcf     STATUS,C
                      01630 ;       rrf     delta_s,W               ; (div by 32)
                      01631 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01632 ; 08/07/09 end
                      01633 ; now adjust based on spin
03D5   0838           01634         movf    spin_a2d,w
03D6   3CBA           01635         sublw   0xba                    ; 186 - spin_a2d
03D7   1903           01636         btfsc   STATUS,Z                ; if spin_a2d is 186, then no spin
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03D8   2C43           01637         goto    no_spin
03D9   1803           01638         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
03DA   2C28           01639         goto    adjust_backspin
03DB   3E05           01640         addlw   5                       ;
03DC   1803           01641         btfsc   STATUS,C                ; if spin_a2d is 187-191, then no spin
03DD   2C43           01642         goto    no_spin
03DE                  01643 adjust_topspin:                         ; if spin_a2d > 197 then we have top spin
03DE   30C5           01644         movlw   0xc5
03DF   0239           01645         subwf   spd_a2d,W               ; speed_a2d - 197
03E0   1803           01646         btfsc   STATUS,C                ; skip if borrow (slow speed)
03E1   2BFA           01647         goto    high_spd
03E2   308F           01648         movlw   0x8f                    ; slow speed
03E3   0239           01649         subwf   spd_a2d,w
03E4   00BF           01650         movwf   delta_s                 ; delta_s = speed_a2d - 143
03E5   00C9           01651         movwf   mult1                   ; mult1 =       delta_s
03E6   1003           01652         bcf     STATUS,C
03E7   0CBF           01653         rrf     delta_s,f               ; (div by 2)
03E8   1003           01654         bcf     STATUS,C
03E9   0CBF           01655         rrf     delta_s,f               ; (div by 4)
03EA   083F           01656         movf    delta_s,w
03EB   07C9           01657         addwf   mult1,f                 ;               + delta_s / 4
03EC   1003           01658         bcf     STATUS,C
03ED   0CBF           01659         rrf     delta_s,f               ; (div by 8)
03EE   1003           01660         bcf     STATUS,C
03EF   0CBF           01661         rrf     delta_s,f               ; (div by 16)
03F0   083F           01662         movf    delta_s,w
03F1   02C9           01663         subwf   mult1,f                 ;               - delta_s / 16
03F2   1003           01664         bcf     STATUS,C
03F3   0C3F           01665         rrf     delta_s,w               ; (div by 32)
03F4   07C9           01666         addwf   mult1,f                 ;               + delta_s / 32
03F5   300B           01667         movlw   0x0b
03F6   00CA           01668         movwf   mult2
03F7   256D           01669         call    mult_sub                ; W = 11 * mult1 / 64
03F8   00C9           01670         movwf   mult1                   ; mult1 is maxspin for this speed
03F9   2C12           01671         goto    adjust_ts
03FA                  01672 high_spd:
03FA   30C5           01673         movlw   0xc5
03FB   0239           01674         subwf   spd_a2d,W               ; speed_a2d - 197
03FC   00BF           01675         movwf   delta_s                 ; delta_s = speed_a2d - 197
03FD   00C9           01676         movwf   mult1
03FE   1003           01677         bcf     STATUS,C
03FF   0CBF           01678         rrf     delta_s,f               ; (div by 2)
0400   1003           01679         bcf     STATUS,C
0401   0CBF           01680         rrf     delta_s,f               ; (div by 4)
0402   083F           01681         movf    delta_s,w
0403   07C9           01682         addwf   mult1,f                 ;               + delta_s / 4
0404   1003           01683         bcf     STATUS,C
0405   0CBF           01684         rrf     delta_s,f               ; (div by 8)
0406   1003           01685         bcf     STATUS,C
0407   0CBF           01686         rrf     delta_s,f               ; (div by 16)
0408   083F           01687         movf    delta_s,w
0409   02C9           01688         subwf   mult1,f                 ;               - delta_s / 16
040A   1003           01689         bcf     STATUS,C
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

040B   0C3F           01690         rrf     delta_s,w               ; (div by 32)
040C   07C9           01691         addwf   mult1,f                 ;               + delta_s / 32
040D   300B           01692         movlw   0x0b
040E   00CA           01693         movwf   mult2
040F   256D           01694         call    mult_sub                ; W = 11 * mult1 / 64
0410   3C0B           01695         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
0411   00C9           01696         movwf   mult1                   ; mul1 is maxspin for this speed
0412                  01697 adjust_ts:
0412   30BF           01698         movlw   0xbf                    ; spin_a2d - 191
0413   0238           01699         subwf   spin_a2d,w
0414   00BF           01700         movwf   delta_s                 ; amount of top spin desired (delta top_spin)
0415   00CA           01701         movwf   mult2                   ; max delta spin = delts_s
0416   1003           01702         bcf     STATUS,C
0417   0CBF           01703         rrf     delta_s,f               ; (div by 2)
0418   1003           01704         bcf     STATUS,C
0419   0CBF           01705         rrf     delta_s,f               ; (div by 4)
041A   1003           01706         bcf     STATUS,C
041B   0CBF           01707         rrf     delta_s,f               ; (div by 8)
041C   083F           01708         movf    delta_s,w
041D   07CA           01709         addwf   mult2,f                 ;               + delta_s / 8
041E   1003           01710         bcf     STATUS,C
041F   0CBF           01711         rrf     delta_s,f               ; (div by 16)
0420   083F           01712         movf    delta_s,w
0421   02CA           01713         subwf   mult2,f                 ;               - delta_s / 16
0422   1003           01714         bcf     STATUS,C
0423   0C3F           01715         rrf     delta_s,w               ; (div by 32)
0424   07CA           01716         addwf   mult2,f                 ;               + delta_s / 32
0425   256D           01717         call    mult_sub                ; W = maxspin * (delta top_spin) / 64
0426   07BD           01718         addwf   calc_pwm,f
0427   2C43           01719         goto    no_spin
                      01720 
0428                  01721 adjust_backspin:
0428   0838           01722         movf    spin_a2d,w
0429   3CBA           01723         sublw   0xba                    ; mult1 = 186 - spin_a2d
042A   00C9           01724         movwf   mult1
042B   1003           01725         bcf     STATUS,C                ; max backspin = (186 - spin_a2d) * 3 / 2
042C   0C49           01726         rrf     mult1,w
042D   07C9           01727         addwf   mult1,f
                      01728 
042E   30C5           01729         movlw   0xc5
042F   0239           01730         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
0430   1C03           01731         btfss   STATUS,C                ; skip if no borrow (fast speed)
0431   2C3E           01732         goto    slow_spd1
                      01733                                         ; fast speed:
0432   00BF           01734         movwf   delta_s                 ; maxspin =
0433   1003           01735         bcf     STATUS,C
0434   0CBF           01736         rrf     delta_s,f               ; (div by 2)
0435   083F           01737         movf    delta_s,w               ;           delta_speed / 2
0436   00CA           01738         movwf   mult2
0437   1003           01739         bcf     STATUS,C
0438   0CBF           01740         rrf     delta_s,f               ; (div by 4)
0439   1003           01741         bcf     STATUS,C                
043A   0C3F           01742         rrf     delta_s,w               ; (div by 8)
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

043B   024A           01743         subwf   mult2,w                 ;           - delta_speed / 8
043C   3E29           01744         addlw   0x29                    ;           + 41
043D   2C3F           01745         goto    bs_com
                      01746 
043E                  01747 slow_spd1
043E   3029           01748         movlw   0x29
043F                  01749 bs_com
043F   023D           01750         subwf   calc_pwm,w
0440   00CA           01751         movwf   mult2                   ; mult2 = calc_pwm - maxspin
0441   256D           01752         call    mult_sub                ; W = (max back spin) * (calc_pwm - maxspin) / 64
0442   02BD           01753         subwf   calc_pwm,f              ; calc_pwm -= W
0443                  01754 no_spin
                      01755 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01756 ;       sublw   0xf3                    ; DEBUG
                      01757 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01758 ;       goto    force255_1              ; DEBUG
0443   083D           01759         movf    calc_pwm,w
0444   00A4           01760         movwf   t_top_pwm
0445   0008           01761         return
                      01762 ;force255_1                             ; DEBUG
                      01763 ;       movwf   0xff                    ; DEBUG
                      01764 ;       movwf   t_top_pwm               ; DEBUG
                      01765 ;       return                          ; DEBUG
                      01766 
0446                  01767 power_is_off:
                      01768 ; here at power on if detected the power switch is off
                      01769 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01770 ;       clrwdt                          ;  let wdt reset processor
                      01771 
0446   0186           01772         clrf    PORTB                   ; turn off all LED
0447   083A           01773         movf    bat_a2d,w               ; get battery level
0448   3C99           01774         sublw   99h                     ; battery input at least 3.0V? (battery at least 13.2V)
0449   1803           01775         btfsc   STATUS,C                ;    skip if no borrow (> 3.0V)
044A   2C68           01776         goto    charg_lt_3_0            ; charging, below 3.0V
044B   1903           01777         btfsc   STATUS,Z
044C   2C68           01778         goto    charg_lt_3_0
044D   083A           01779         movf    bat_a2d,w
                      01780 ;       sublw   0a3h                    ; battery input at least 3.2V? (battery at least 14.1V), MJZ COM
                            MENTED THIS LINE
044E   3C9F           01781         sublw   09fh                    ;MJZ ADDED THIS LINE, battery input at least 3.1V? (battery at l
                            east 13.7V)
044F   1803           01782         btfsc   STATUS,C                ;    skip if no borrow (> 3.2V)
0450   2C5F           01783         goto    charg_lt_3_2            ; charging, below 3.2V
0451   1903           01784         btfsc   STATUS,Z
0452   2C5F           01785         goto    charg_lt_3_2
0453   083A           01786         movf    bat_a2d,w
                      01787 ;       sublw   0a8h                    ; battery input at least 3.3V? (battery at least 14.5V), MJZ COM
                            MENTED THIS LINE
0454   3CA3           01788         sublw   0a3h                    ;MJZ ADDED THIS LINE, battery input at least 3.2V? (battery at l
                            east 14.1V)
0455   1803           01789         btfsc   STATUS,C                ;    skip if no borrow (> 3.3V)
0456   2C5E           01790         goto    charg_lt_3_3
0457   1903           01791         btfsc   STATUS,Z
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0458   2C5E           01792         goto    charg_lt_3_3
                      01793                                         ; we are here because we are charging and power > 3.3V
0459   1506           01794         bsf     PORTB,GREEN_LED         ;   green on and red off
045A                  01795 wait_reset_lp:
045A   0064           01796         clrwdt
                      01797 ;       btfss   PORTB,0         ; if RB0/INT bit is not set, power had been turned back on, MJZ COMMENTE
                            D THIS LINE
045B   1E06           01798         btfss   PORTB,4         ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
045C   1486           01799         bsf     PORTB,RED_LED           ;  set red led
045D   2C5A           01800         goto    wait_reset_lp           ; loop forever until charging power removed and system reset
                      01801                                         ; 
                      01802                                         ; 
                      01803 
045E                  01804 charg_lt_3_3:                           ; charging, 3.2V < power level < 3.3V
045E   2C60           01805         goto    flash_grn               ; we want red off and flashing green
045F                  01806 charg_lt_3_2:                           ; charging, 3.0V < power level < 3.2V
                      01807 ;       bsf     PORTB,RED_LED           ; we want red on and flashing green, MJZ COMMENTED THIS LINE
045F   2C64           01808         goto    flash_red               ;MJZ ADDED THIS LINE, we want flashing red and green off
0460                  01809 flash_grn:
0460   1506           01810         bsf     PORTB,GREEN_LED         ; turn on green led
0461   3004           01811         movlw   GREEN_LED_ON
0462   00CA           01812         movwf   mult2                   ; bits to toggle
0463   2C6B           01813         goto    flash_com
                      01814 
0464                  01815 flash_red:                                      ;MJZ ADDED THIS LINE
0464   1486           01816         bsf PORTB,RED_LED               ;MJZ ADDED THIS LINE, turn on red led
0465   3002           01817         movlw   RED_LED_ON              ;MJZ ADDED THIS LINE
0466   00CA           01818         movwf   mult2                   ;MJZ ADDED THIS LINE
0467   2C6B           01819         goto    flash_com               ;MJZ ADDED THIS LINE
                      01820 
0468                  01821 charg_lt_3_0:                           ; charging, power level <= 3.0V
                      01822 ;       bsf     PORTB,GREEN_LED         ; turn on green led, MJZ COMMENTED THIS LINE
                      01823 ;       movlw   GREEN_LED_ON|RED_LED_ON ; toggle both red and green, only 1 on at a time, MJZ COMMENTED 
                            THIS LINE
                      01824 ;       movwf   mult2                   ;MJZ COMMENTED THIS LINE
                      01825 
0468   1486           01826         bsf     PORTB,RED_LED           ;MJZ ADDED THIS LINE, we want red on and green off
0469   3000           01827         movlw   0                               ;MJZ ADDED THIS LINE
046A   00CA           01828         movwf   mult2                   ;MJZ ADDED THIS LINE
                      01829 
                      01830 
                      01831 
046B                  01832 flash_com:
046B   3040           01833         movlw   0x40
046C   00C9           01834         movwf   mult1
046D                  01835 fgrn_loop:
046D   3004           01836         movlw   PAUSE_TIME
046E   24EE           01837         call    wait
046F   3004           01838         movlw   PAUSE_TIME
0470   24EE           01839         call    wait
0471   3004           01840         movlw   PAUSE_TIME
0472   24EE           01841         call    wait
0473   084A           01842         movf    mult2,w                 ; get bits to toggle
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0474   0686           01843         xorwf   PORTB,F                 ; toggle leds
0475   0BC9           01844         decfsz  mult1,f
0476   2C6D           01845         goto    fgrn_loop
                      01846 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on      
                            ;MJZ COMMENTED THIS LINE
0477   1A06           01847         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
0478   2C93           01848         goto    pwr_off_lp              ;  let wdt reset the system
0479   3002           01849         movlw   2
047A   00B3           01850         movwf   a2d_chan                ; get battery level again
047B   231A           01851         call    acq_a2d
047C   00BA           01852         movwf   bat_a2d         
047D   2C46           01853         goto    power_is_off
                      01854 
                      01855 
                      01856 ; check if RB7:RB4 pins had changed state
047E                  01857 chk_rbif:
                      01858 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set, check if power switch is turned off
                      01859 ;       btfss   PORTB,0                 ; if power switch is turned off ;MJZ COMMENTED THIS LINE
047E   1E06           01860         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
047F   2C94           01861         goto    chk_rbif3
                      01862 ;       btfss   PORTB,0                 ; check power switch again      ;MJZ COMMENTED THIS LINE
0480   1E06           01863         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
0481   2C94           01864         goto    chk_rbif3
0482   018B           01865         clrf    INTCON                  ; disable all intrs
0483   0197           01866         clrf    CCP1CON                 ; CCP1 Module is off
0484   019D           01867         clrf    CCP2CON                 ; CCP2 Module is off
                      01868 ;       clrf    PORTC                   ; disable feed motor pwm
0485   3040           01869         movlw   BEEP_OFF                ; beep is off
0486   0087           01870         movwf   PORTC                   ; disable feed motor pwm
                      01871                                         ; disable bottom serve motor pwm
                      01872                                         ; disable top serve motor pwm
                      01873                                         ; sweep motor disabled
                      01874                                         ; elevation motor disabled
0487   0186           01875         clrf    PORTB                   ; turn off all LED
0488   0064           01876         clrwdt
0489   1506           01877         bsf     PORTB,GREEN_LED
                      01878 ;       movlw   0x40
048A   3080           01879         movlw   0x80
048B   00C9           01880         movwf   mult1
048C                  01881 pwr_off_loop:
048C   3004           01882         movlw   PAUSE_TIME
048D   24EE           01883         call    wait
048E   3006           01884         movlw   6                       ; red led on + green led on
048F   0686           01885         xorwf   PORTB,F                 ; toggle red and green led, only 1 on
0490   0BC9           01886         decfsz  mult1,f
0491   2C8C           01887         goto    pwr_off_loop
                      01888 
0492   0186           01889         clrf    PORTB                   ; turn off all leds
0493                  01890 pwr_off_lp:
                      01891 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01892 ;       clrwdt                          ;  let wdt reset processor
0493   2C93           01893         goto    pwr_off_lp
                      01894 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0494                  01895 chk_rbif3:
                      01896 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set,       ;MJZ COMMENTED THIS LINE
0494   2CA5           01897         goto    chk_rbif1
                      01898 
                      01899 
                      01900 
                      01901 ;MJZ ADDED LINE, PREVIOUS VERSION HAD POWER SWITCH ON RB0/INT0.
                      01902 ;MJZ ADDED LINE, CHK_RBIF2 WOULD HAVE BEEN RUN ONLY IF A POWER OFF ON RB0/INT0 SET INTF, BUT
                      01903 ;MJZ ADDED LINE, WHEN RB0 WAS READ, THE POWER OFF CONDITION HAD ALREADY GONE AWAY, I.E. A SPURIOUS SIGNA
                            L SET INTF.
                      01904 ;MJZ ADDED LINE, THE INTF WAS CHECKED FOR IN CHK_RBIF3, SO TO BE SAFE THAT LINE IS NOW COMMENTED SO CHK_
                            RBIF2 WOULD NEVER RUN.
                      01905 ;MJZ ADDED LINE, POWER OFF IS NOW DETECTED ON RB4 WHICH USED TO BE SWEEP MOTOR ERROR DETECTION.
                      01906 ;MJZ ADDED LINE, SWEEP MOTOR ERROR USED TO BE ON RB4, BUT NONE OF THAT LOGIC IS TAKEN OUT, BECAUSE THE P
                            OWER OFF DETECTION CODE
                      01907 ;MJZ ADDED LINE, IS EXECUTED BEFORE MOTOR ERROR CODE, SO IF RB4 IS SET, A POWER OFF IS DETECTED.
                      01908 ;MJZ ADDED LINE, BALL DROP IS NOW DETECTED ON RB0/INT0.
                      01909 
                      01910 
                      01911 
0495                  01912 chk_rbif2:
0495   30F9           01913         movlw   0xf9
0496   0586           01914         andwf   PORTB,F                 ; clear red and green led
0497   3004           01915         movlw   PAUSE_TIME
0498   24EE           01916         call    wait
0499   1506           01917         bsf     PORTB,GREEN_LED
049A   3004           01918         movlw   PAUSE_TIME
049B   24EE           01919         call    wait
049C   3006           01920         movlw   6
049D   0686           01921         xorwf   PORTB,F
049E   3004           01922         movlw   PAUSE_TIME
049F   24EE           01923         call    wait
04A0   3006           01924         movlw   6
04A1   0686           01925         xorwf   PORTB,F
04A2   30F9           01926         movlw   0xf9
04A3   0586           01927         andwf   PORTB,F
04A4   05C3           01928         andwf   led_bits,F
                      01929 ;       bcf     INTCON,INTF                     ; MJZ commented this line, INTF now used for ball drop d
                            etection.
04A5                  01930 chk_rbif1:
04A5   1C0B           01931         btfss   INTCON,RBIF             ; if RBIF is clear, return
04A6   0008           01932         return
04A7   0E06           01933         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
04A8   100B           01934         bcf     INTCON,RBIF             ;  clear RBIF bit in INTCON
                      01935 ;       andlw   0x0f                    ;  clear upper bits
04A9   054C           01936         andwf   rbif_bits,w             ;  and with mask
04AA   1903           01937         btfsc   STATUS,Z                ;  if zero, return
04AB   0008           01938         return
04AC   3006           01939         movlw   6                       ; wait 10us
04AD   00C4           01940         movwf   rbif_wait
04AE                  01941 rbif_lp
04AE   0E06           01942         swapf   PORTB,w                 ; double checking, get RB7:RB4 in lower bits
                      01943 ;       andlw   0x0f                    ;  clear upper bits
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04AF   054C           01944         andwf   rbif_bits,w             ;  and with mask
04B0   1903           01945         btfsc   STATUS,Z                ;  if zero, return
04B1   0008           01946         return
04B2   0BC4           01947         decfsz  rbif_wait,f
04B3   2CAE           01948         goto    rbif_lp
04B4   0E06           01949         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
                      01950 ;       andlw   0x0f                    ;  clear upper bits
04B5   054C           01951         andwf   rbif_bits,w             ; and with mask
04B6   1903           01952         btfsc   STATUS,Z                ;  if zero, return
04B7   0008           01953         return
04B8   00C1           01954         movwf   err_no                  ; save as error number
                      01955 ; motor error, disable all motors, flash error code
                      01956 ;
04B9                  01957 motor_error
                      01958         ; disable all motors
04B9   0064           01959         clrwdt
04BA   018B           01960         clrf    INTCON                  ; disable all intrs
04BB   0197           01961         clrf    CCP1CON                 ; CCP1 Module is off
04BC   019D           01962         clrf    CCP2CON                 ; CCP2 Module is off
                      01963 ;       clrf    PORTC                   ; disable feed motor pwm
04BD   3040           01964         movlw   BEEP_OFF                ; disable feed motor pwm
04BE   0087           01965         movwf   PORTC                   ; disable bottom serve motor pwm
                      01966                                         ; disable top serve motor pwm
                      01967                                         ; sweep motor disabled
                      01968                                         ; eleveation motor disabled
04BF   0186           01969         clrf    PORTB                   ; turn off all LED
04C0                  01970 moterr_lp
04C0   3002           01971         movlw   2
04C1   00C2           01972         movwf   flash_code
04C2   0841           01973         movf    err_no,w                ; get motor error bits
04C3   18C1           01974         btfsc   err_no,1                ; feed motor error
04C4   24D2           01975         call    flash_error             ;  flash 2
04C5   3003           01976         movlw   3
04C6   00C2           01977         movwf   flash_code
04C7   19C1           01978         btfsc   err_no,3                ; top serve motor error
04C8   24D2           01979         call    flash_error             ;  flash 3
04C9   3004           01980         movlw   4
04CA   00C2           01981         movwf   flash_code
04CB   1941           01982         btfsc   err_no,2                ; bottom serve motor error
04CC   24D2           01983         call    flash_error             ;  flash 4
04CD   3005           01984         movlw   5
04CE   00C2           01985         movwf   flash_code
                      01986 ;       btfsc   err_no,0                ; feed motor error      ;MJZ COMMENTED THIS LINE, SHOULD BE SWEE
                            P MOTOR ERROR
04CF   1841           01987         btfsc   err_no,0                ; MJZ ADDED THIS LINE, SWEEP MOTOR ERROR
04D0   24D2           01988         call    flash_error             ;  flash 5
04D1   2CC0           01989         goto    moterr_lp
                      01990 
04D2                  01991 flash_error:
                      01992 ;       movwf   flash_code              ; for err_no times,
04D2   1106           01993         bcf     PORTB,GREEN_LED         ;   turn off green led
04D3   3030           01994         movlw   FLASH_TIME
04D4   24EE           01995         call    wait
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04D5                  01996 flash_greenled
04D5   1506           01997         bsf     PORTB,GREEN_LED         ;   turn on green led
04D6   3030           01998         movlw   FLASH_TIME
04D7   24EE           01999         call    wait
04D8   1106           02000         bcf     PORTB,GREEN_LED         ;   turn off green led
04D9   3030           02001         movlw   FLASH_TIME
04DA   24EE           02002         call    wait
04DB   0BC2           02003         decfsz  flash_code,f
04DC   2CD5           02004         goto    flash_greenled
                      02005 
04DD   3004           02006         movlw   PAUSE_TIME
04DE   00C2           02007         movwf   flash_code
04DF                  02008 pause
04DF   3030           02009         movlw   FLASH_TIME              ; now pause
04E0   24EE           02010         call    wait
04E1   0BC2           02011         decfsz  flash_code,f
04E2   2CDF           02012         goto    pause
04E3   0008           02013         return
                      02014 
                      02015 
                      02016 ; battery below 2.4V - disable all motors, LEDs green off and red flashing
04E4                  02017 bat_dead
                      02018         ; disable all motors
04E4   0064           02019         clrwdt
04E5   018B           02020         clrf    INTCON                  ; disable all intrs
04E6   0197           02021         clrf    CCP1CON                 ; CCP1 Module is off
04E7   019D           02022         clrf    CCP2CON                 ; CCP2 Module is off
                      02023 ;       clrf    PORTC                   ; disable feed motor pwm
04E8   3040           02024         movlw   BEEP_OFF                ; disable feed motor pwm
04E9   0087           02025         movwf   PORTC                   ; disable bottom serve motor pwm
                      02026                                         ; disable top serve motor pwm
                      02027                                         ; sweep motor disabled
                      02028                                         ; elevation motor disabled
04EA   0186           02029         clrf    PORTB                   ; turn off all LED
                      02030 
                      02031 ;flash_redled                           ;MJZ COMMENTED THIS LINE
                      02032 ;       movlw   RED_LED_ON              ;MJZ COMMENTED THIS LINE
                      02033 ;       xorwf   PORTB,f                 ; toggle red LED, MJZ COMMENTED THIS LINE
                      02034 ;       movlw   FLASH_TIME              ;MJZ COMMENTED THIS LINE
                      02035 ;       call    wait                    ;MJZ COMMENTED THIS LINE
                      02036 ;       goto    flash_redled    ;MJZ COMMENTED THIS LINE
                      02037 
                      02038 
04EB                  02039 bat_dead_loop                           ;MJZ ADDED THIS LINE
04EB   1486           02040         bsf             PORTB,RED_LED   ;MJZ ADDED THIS LINE, TURN ON RED LED
04EC   0064           02041         clrwdt
04ED   2CEB           02042         goto    bat_dead_loop   ;MJZ ADDED THIS LINE
                      02043 
                      02044         
                      02045 
                      02046 ; wait (W) number of timer1 overflows
                      02047 ; if (W) = 255, wait time is about 1.2 seconds
04EE                  02048 wait
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04EE   00C0           02049         movwf   wait_cnt
04EF                  02050 waitlp
04EF   0064           02051         clrwdt
04F0   1C0C           02052         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
04F1   2CEF           02053         goto    waitlp
04F2   30A8           02054         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
04F3   008E           02055         movwf   TMR1L
04F4   3061           02056         movlw   MSEC5_MSB
04F5   008F           02057         movwf   TMR1H
04F6   100C           02058         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
04F7   0BC0           02059         decfsz  wait_cnt,f              ;  decrement wait_cnt
04F8   2CEF           02060         goto    waitlp
04F9   0008           02061         return
                      02062 
                      02063 ; wait (W) number of timer1 overflows withou clearing watch dog timer
                      02064 ; if (W) = 255, wait time is about 1.2 seconds
04FA                  02065 wait_no_clrwdt
04FA   00C0           02066         movwf   wait_cnt
04FB                  02067 waitlp1
04FB   1C0C           02068         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
04FC   2CFB           02069         goto    waitlp1
04FD   30A8           02070         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
04FE   008E           02071         movwf   TMR1L
04FF   3061           02072         movlw   MSEC5_MSB
0500   008F           02073         movwf   TMR1H
0501   100C           02074         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
0502   0BC0           02075         decfsz  wait_cnt,f              ;  decrement wait_cnt
0503   2CFB           02076         goto    waitlp1
0504   0008           02077         return
                      02078 
                      02079 ; initialize battery level on power up  
0505                  02080 init_bat_level:
0505   01C5           02081         clrf    power_level
0506   083A           02082         movf    bat_a2d,w
0507   3C84           02083         sublw   0x84                    ; 0x84 - bat_a2d
0508   1C03           02084         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
0509   2D14           02085         goto    init_pl_com                     ; if borrow, over 2.6V: power_level_tmp = 0
050A   0AC5           02086         incf    power_level,f
050B   083A           02087         movf    bat_a2d,w
050C   3C80           02088         sublw   0x80                    ; 0x80 - bat_a2d
050D   1C03           02089         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
050E   2D14           02090         goto    init_pl_com             ; if borrow, over 2.5V: power_level_tmp = 1
                      02091 ; less than 2.5V, about 10 mins left
050F   0AC5           02092         incf    power_level,f
0510   083A           02093         movf    bat_a2d,w
0511   3C7A           02094         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
0512   1803           02095         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
0513   0AC5           02096         incf    power_level,f   ;       if borrow, less then 2.4V: power_level_tmp = 3
0514                  02097 init_pl_com:
0514   0845           02098         movf    power_level,w
0515   00C6           02099         movwf   power_level_r
                      02100 ; fall through to set battery leds
                      02101 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02102 
                      02103 ; update battery leds. Called every 16 seconds. Take the lowest value from the last 16 second period
0516                  02104 update_bat_led:
0516   0846           02105         movf    power_level_r,w
0517   00C5           02106         movwf   power_level
0518   3903           02107         andlw   0x03
0519   1903           02108         btfsc   STATUS,Z                ; power level 0: > 2.6V
051A   2D2B           02109         goto    over2_6v
051B   0BC5           02110         decfsz  power_level,f           ;
051C   2D1E           02111         goto    under2_5v
051D   2D28           02112         goto    over2_5v                ; power level 1: > 2.5V
                      02113 
                      02114 
051E                  02115 under2_5v
051E   0BC5           02116         decfsz  power_level,f
051F   2CE4           02117         goto    bat_dead                        ; power level 3: < 2.4V ;MJZ DEBUG, COMMENTED THIS LINE
                      02118 ;       goto    over2_6v                        ;MJZ DEBUG, ADDED THIS LINE
                      02119 
                      02120 ;between_2.4v_2.5v                              ; less than 2.5V, about 10 mins left (GREEN OFF RED ON),
                             MJZ COMMENTED THIS LINE
                      02121 ;       btfss   led_bits,GREEN_LED      ; if green led on, turn it off, MJZ COMMENTED THIS LINE
                      02122 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      02123 ;       bcf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      02124 ;       bcf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
0520                  02125 between_2.4v_2.5v:                              ;MJZ ADDED THIS LINE, BETWEEN 2.4V & 2.5V, GREEN OFF, RE
                            D ON(FLASHING)
0520   1106           02126         bcf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE
0521   1486           02127         bsf             PORTB,RED_LED           ;MJZ ADDED THIS LINE
0522   2D32           02128         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      02129 
                      02130 
0523                  02131 grn_off:
0523   18C3           02132         btfsc   led_bits,RED_LED        ; if red led off, turn it on
0524   2D32           02133         goto    bat_led_xit
0525   14C3           02134         bsf     led_bits,RED_LED
0526   1486           02135         bsf     PORTB,RED_LED
0527   2D32           02136         goto    bat_led_xit
                      02137 
                      02138 
                      02139 
                      02140 ;over2_5v:                                              ; between 2.5v and 2.7V - 1/3 capacity (GREEN ON
                             RED ON), MJZ COMMENTED THIS LINE
                      02141 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      02142 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      02143 ;       bsf             led_bits,GREEN_LED      ;MJZ COMMENTED THIS LINE
                      02144 ;       bsf             PORTB,GREEN_LED         ;MJZ COMMENTED THIS LINE
                      02145 ;       goto    grn_off                         ; goto turn red led on if necessary, MJZ COMMENTED THIS 
                            LINE
0528                  02146 over2_5v:                                               ;MJZ ADDED THIS LINE, BETWEEN 2.5V & 2.7V - 1/3 
                            CAPACITY (GREEN ON(FLASHING), RED OFF)
0528   1086           02147         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
0529   1506           02148         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
052A   2D32           02149         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02150 
                      02151 
                      02152 ;over2_6v:                                              ; greater than 2.6V, battery good       (GREEN O
                            N RED OFF), MJZ COMMENTED THIS LINE
                      02153 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      02154 ;       goto    grn_on
                      02155 ;       bsf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      02156 ;       bsf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
052B                  02157 over2_6v:                                               ;MJZ ADDED THIS LINE, GREATER THAN 2.6V, BATTERY
                             GOOD (GREEN ON, RED OFF)
052B   1086           02158         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
052C   1506           02159         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
052D   2D32           02160         goto    bat_led_xit                     ;MJZ ADDED THIS LINE    
                      02161 
                      02162 
052E                  02163 grn_on:
052E   1CC3           02164         btfss   led_bits,RED_LED        ; if red led on, turn it off
052F   2D32           02165         goto    bat_led_xit
0530   10C3           02166         bcf     led_bits,RED_LED
0531   1086           02167         bcf     PORTB,RED_LED
                      02168 
0532                  02169 bat_led_xit:
0532   0846           02170         movf    power_level_r,w
0533   00C5           02171         movwf   power_level
0534   3003           02172         movlw   3
0535   00C6           02173         movwf   power_level_r
0536   0008           02174         return  
                      02175 
                      02176 
0537                  02177 record_bat_level:
                      02178 ; within a 16second time period, record the lowest power level
0537   01C7           02179         clrf    power_level_tmp
0538   083A           02180         movf    bat_a2d,w
0539   3C84           02181         sublw   0x84                    ; 0x84 - bat_a2d
053A   1C03           02182         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
053B   2D46           02183         goto    pl_com                  ; if borrow, over 2.6V: power_level_tmp = 0
053C   0AC7           02184         incf    power_level_tmp,f
053D   083A           02185         movf    bat_a2d,w
053E   3C80           02186         sublw   0x80                    ; 0x80 - bat_a2d
053F   1C03           02187         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
0540   2D46           02188         goto    pl_com                  ; if borrow, over 2.5V: power_level_tmp = 1
                      02189 ; less than 2.5V, about 10 mins left
0541   0AC7           02190         incf    power_level_tmp,f
0542   083A           02191         movf    bat_a2d,w
0543   3C7A           02192         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
0544   1803           02193         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
0545   0AC7           02194         incf    power_level_tmp,f       ;       if borrow, less then 2.4V: power_level_tmp = 3
0546                  02195 pl_com:
0546   0846           02196         movf    power_level_r,w         ; power_level_r - power_level_tmp
0547   0247           02197         subwf   power_level_tmp,w
0548   1803           02198         btfsc   STATUS,C                ; if borrow => power_level_tmp < power_level_r
0549   2D4C           02199         goto    no_bat_adjust
054A   0847           02200         movf    power_level_tmp,w       ;   power_level_r = new power level
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

054B   00C6           02201         movwf   power_level_r
054C                  02202 no_bat_adjust:
054C   0008           02203         return  
                      02204 
054D                  02205 debug_led:
054D   083B           02206         movf    feed_a2d,w
054E   00C2           02207         movwf   flash_code
054F   0CC2           02208         rrf     flash_code,F
0550   0CC2           02209         rrf     flash_code,F
0551   0CC2           02210         rrf     flash_code,F
0552   0CC2           02211         rrf     flash_code,F
0553   0CC2           02212         rrf     flash_code,F
0554   0C42           02213         rrf     flash_code,W
0555   3903           02214         andlw   3
0556   3E01           02215         addlw   1
0557   00C2           02216         movwf   flash_code
0558   24D2           02217         call    flash_error
0559   083B           02218         movf    feed_a2d,w
055A   00C2           02219         movwf   flash_code
055B   0CC2           02220         rrf     flash_code,F
055C   0CC2           02221         rrf     flash_code,F
055D   0C42           02222         rrf     flash_code,W
055E   3907           02223         andlw   7
055F   3E01           02224         addlw   1
0560   00C2           02225         movwf   flash_code
0561   24D2           02226         call    flash_error
0562   083B           02227         movf    feed_a2d,w
0563   3907           02228         andlw   7
0564   3E01           02229         addlw   1
0565   00C2           02230         movwf   flash_code
0566   24D2           02231         call    flash_error
                      02232 
0567   3003           02233         movlw   3
0568   00B3           02234         movwf   a2d_chan
0569   231A           02235         call    acq_a2d                 ; acquire chan3 a2d - feed rate
056A   00BB           02236         movwf   feed_a2d
056B   0064           02237         clrwdt
056C   2D4D           02238         goto    debug_led
                      02239 
                      02240 ; special 16 bit multiply routine
                      02241 ;  temp:mult2 = mult2 x mult1
                      02242 ; returns temp:mult2 / 64
                      02243 ; returnw r2:r1 = mult2 x mult1
                      02244 ;
056D                  02245 mult_sub:
056D   0849           02246         movf    mult1,W                 ; if either mult1 or mult2 is 0
056E   1903           02247         btfsc   STATUS,Z
056F   2D83           02248         goto    mult_ret_0              ; returns 0
0570   084A           02249         movf    mult2,W                 ; if either mult1 or mult2 is 0
0571   1903           02250         btfsc   STATUS,Z
0572   2D83           02251         goto    mult_ret_0              ; returns 0
0573   01CA           02252         clrf    mult2
0574   01A2           02253         clrf    temp
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0575                  02254 mult_lp:
0575   07CA           02255         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
0576   1803           02256         btfsc   STATUS,C
0577   0AA2           02257         incf    temp,f
0578   0BC9           02258         decfsz  mult1,F
0579   2D75           02259         goto    mult_lp
057A   084A           02260         movf    mult2,w
057B   00CE           02261         movwf   r1
057C   0822           02262         movf    temp,w
057D   00CF           02263         movwf   r2
057E   0DCA           02264         rlf     mult2,f                 ; div result by 64
057F   0DA2           02265         rlf     temp,f
0580   0DCA           02266         rlf     mult2,f
0581   0D22           02267         rlf     temp,w
0582   0008           02268         return
                      02269 
0583                  02270 mult_ret_0
0583   3400           02271         retlw   0
                      02272 
                      02273 
                      02274 
                      02275 ; special 16 bit multiply routine
                      02276 ;  temp:mult2 = mult2 x mult1
                      02277 ; returns (temp:mult2 + 63) / 64
                      02278 ;
0584                  02279 mult_sub1:
0584   0849           02280         movf    mult1,W                 ; if either mult1 or mult2 is 0
0585   1903           02281         btfsc   STATUS,Z
0586   2D83           02282         goto    mult_ret_0              ; returns 0
0587   084A           02283         movf    mult2,W                 ; if either mult1 or mult2 is 0
0588   1903           02284         btfsc   STATUS,Z
0589   2D83           02285         goto    mult_ret_0              ; returns 0
058A   01CA           02286         clrf    mult2
058B   01A2           02287         clrf    temp
058C                  02288 mult_lp1:
058C   07CA           02289         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
058D   1803           02290         btfsc   STATUS,C
058E   0AA2           02291         incf    temp,f
058F   0BC9           02292         decfsz  mult1,F
0590   2D8C           02293         goto    mult_lp1
0591   303F           02294         movlw   0x3f
0592   07CA           02295         addwf   mult2,f                 
0593   1803           02296         btfsc   STATUS,C
0594   0AA2           02297         incf    temp,f                  ; temp:mult2 += 63
0595   0DCA           02298         rlf     mult2,f                 ; div result by 64
0596   0DA2           02299         rlf     temp,f
0597   0DCA           02300         rlf     mult2,f
0598   0D22           02301         rlf     temp,w
0599   0008           02302         return
                      02303 
                      02304 ; enable usart
059A                  02305 usart_enable:
                      02306         ; init usart
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

059A   1683           02307         bsf     STATUS,RP0              ; goto bank 1
                      02308 ;       movlw   0xff                    ; 1200 baud
059B   3081           02309         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
059C   0099           02310         movwf   SPBRG
059D   3020           02311         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
059E   0098           02312         movwf   TXSTA                   ; asynchronous mode, low speed mode
059F   1283           02313         bcf     STATUS,RP0              ; goto bank 0
05A0   3090           02314         movlw   0x90                    ; 8-bit receive, receiver enabled
05A1   0098           02315         movwf   RCSTA                   ; serial port enabled
05A2   0008           02316         return
                      02317 
                      02318 ; disable usart
05A3                  02319 usart_disable
05A3   1683           02320         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05A4   0198           02321         clrf    TXSTA                   ; disable transmitter
05A5   1283           02322         bcf     STATUS,RP0              ; goto bank 0
05A6   0198           02323         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02324 ;       bsf     PORTC,6                 ; beep is 30 ff's
05A7   1307           02325         bcf     PORTC,6                 ; beep is 30 00's
05A8   0008           02326         return
                      02327 
                      02328 ; disable usart with no beep
05A9                  02329 usart_off
05A9   1683           02330         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05AA   0198           02331         clrf    TXSTA                   ; disable transmitter
05AB   1283           02332         bcf     STATUS,RP0              ; goto bank 0
05AC   0198           02333         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02334 ;       bcf     PORTC,6                 ; no beep - beep is 30 ff's
05AD   1707           02335         bsf     PORTC,6                 ; no beep - beep is 30 00's
05AE   0008           02336         return
                      02337 
                      02338 ; if there is data in RCREG, return in W (returned as 0x30 + data)
05AF                  02339 getchar:
05AF   0103           02340         clrw
05B0   1E8C           02341         btfss   PIR1,RCIF               ; if not input data, return 0 in W
05B1   0008           02342         return
05B2   081A           02343         movf    RCREG,W                 ; else read input data
05B3   3E30           02344         addlw   0x30
05B4   0008           02345         return
                      02346 
                      02347 ; get transmits status, 0 = not ok to send, 1 = ok to send
05B5                  02348 xmit_status:
05B5   0103           02349         clrw
05B6   1A0C           02350         btfsc   PIR1,TXIF               ; if xmit not empty, skip
05B7   3001           02351         movlw   1
05B8   0008           02352         return
                      02353 
                      02354 ; send data in (W) to usart
05B9                  02355 putchar:
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05B9   0099           02356         movwf   TXREG                   ; write data to usart
05BA   0008           02357         return
                      02358 
                      02359 ; called every 5 msec to handle anything related to the remote control
05BB                  02360 chk_remote:
05BB   1AD0           02361         btfsc remote_toggle,REMOTE_BIT  ; if remote not enabled, exit
05BC   0008           02362         return
05BD   0851           02363         movf    remote_block,W          ; if remote blocking,
05BE   1903           02364         btfsc   STATUS,Z                ;
05BF   2DC9           02365         goto    no_blocking
05C0   3C42           02366         sublw   0x42                    ;  if 100msec had elapsed,
05C1   1903           02367         btfsc   STATUS,Z                ;
                      02368 ;       bcf     PORTC,6                 ;   turn off beep - beep is 30 ff's
05C2   1707           02369         bsf     PORTC,6                 ;   turn off beep - beep is 30 00's
05C3   0BD1           02370         decfsz  remote_block,F          ;  if last block,
05C4   0008           02371         return
05C5   259A           02372         call    usart_enable            ;   re-enable usart
05C6   25AF           02373         call    getchar                 ;   flush
05C7   25AF           02374         call    getchar                 ;    input fifo
05C8   0008           02375         return
                      02376 
05C9                  02377 no_blocking:
05C9   25AF           02378         call    getchar
05CA   39FF           02379         andlw   0xff                    ; if no input, exit
05CB   1903           02380         btfsc   STATUS,Z
05CC   0008           02381         return
05CD   3C38           02382         sublw   0x38    
05CE   1903           02383         btfsc   STATUS,Z                ; got 8 from transmitter - toggle sweep function
05CF   2DDB           02384         goto    sweep_toggled
05D0   3C06           02385         sublw   0x06
05D1   1903           02386         btfsc   STATUS,Z                ; got 2 from transmiiter - toggle feed functions
05D2   2DE0           02387         goto    feed_toggled
05D3   30A0           02388         movlw   0xa0
05D4   00D1           02389         movwf   remote_block
                      02390 ;no long beep   call    usart_disable
05D5   25A9           02391         call    usart_off               ; no long beep
05D6   0008           02392         return
                      02393 
05D7                  02394 set_remote_block
05D7   3053           02395         movlw   BLOCK_CNT
05D8   00D1           02396         movwf   remote_block
05D9   25A3           02397         call    usart_disable
05DA   0008           02398         return
                      02399 
05DB                  02400 sweep_toggled:
05DB   301E           02401         movlw   0x1e                    ; set up to send 30 FF's
05DC   00D2           02402         movwf   FF_count
05DD   3002           02403         movlw   SWEEP_TOGGLE
05DE   06D0           02404         xorwf   remote_toggle,F
                      02405 ;       movlw   8                       ; DEBUG
                      02406 ;       movwf   beep_count              ; DEBUG
05DF   2DD7           02407         goto    set_remote_block
                      02408 
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05E0                  02409 feed_toggled:
05E0   301E           02410         movlw   0x1e                    ; set up to send 30 FF's
05E1   00D2           02411         movwf   FF_count
05E2   3001           02412         movlw   FEED_TOGGLE
05E3   06D0           02413         xorwf   remote_toggle,F
                      02414 ;       movlw   2                       ; DEBUG
                      02415 ;       movwf   beep_count              ; DEBUG
05E4   2DD7           02416         goto    set_remote_block
                      02417 
                      02418 
                      02419 
                      02420 ; Current sweep/2-line switch configuration.
                      02421 ; Sweep Enable SPST (On/Off) rocker, Sweep On / Sweep Off, input ot uC.
                      02422 ; Sweep Mode SPDT (On/Off/On) rocker, Narrow 2-line / Continuous Sweep / Wide 2-line, either On position
                             allows respective 2-line
                      02423 ; limit switch to be input to the uC.
                      02424 ; Sweep Enable switch  must be on for sweep motor to turn on in any sweep mode.
                      02425 ; Continuous sweep is when Sweep Mode Switch is off (center position), not allowing any 2-line limit swi
                            tch detection.
                      02426 ; Narrow or Wide 2-Line mode is when Sweep Mode Switch is on in either direction allowing either narrow 
                            or wide limit
                      02427 ; switch detection.
                      02428 ; If sweep is on in continuous mode and then it is switched to any 2-line mode, a ball could be released
                             before the sweep stops at 
                      02429 ; a 2-line limit switch, because we do not know we are in 2-line mode until the first 2-line limit switc
                            h is detected.
                      02430 ; When a 2-line limit switch is detected (change of state), the feed motor speed is restricted so ball f
                            eed rate is slower than
                      02431 ; side to side sweep.
                      02432 
                      02433 
05E5                  02434 chk_2linesw:                                    ; called every 5ms
05E5   1C4D           02435         btfss   sweep_is_on,0           ; If sweep motor on flag is on, I.E. sweep switch or remote turn
                            ed sweep on
05E6   2E18           02436         goto    normal_feed_rate        ; If sweep motor on flag is off, set feed rate to normal.
                      02437 
05E7   1E05           02438         btfss   PORTA,LINESWBIT
05E8   261B           02439         call    restrict_feed_rate
                      02440 
                      02441 ; THE FOLLOWING TWO LINES CORRECTED THE PROBLEM IF IN 2-LINE MODE AND 2-LINE LIMIT SWITCH ON (MACHINE ST
                            OPPED
                      02442 ; AT 2-LINE), WHEN 2-LINE ROCKER WAS TURNED OFF, SWEEP MOTOR WOULD NOT START BACK UP UNTIL SWEEP SWITCH 
                            WAS TOGGLED
                      02443 
05E9   1A05           02444         btfsc   PORTA,LINESWBIT         ; IF 2-LINE LIMIT SWITCH IS OFF...
05EA   1587           02445         bsf             PORTC,SWEEP_EN          ; TURN ON SWEEP MOTOR
                      02446 
                      02447         
                      02448 
05EB   0855           02449         movf    linesw_toggle,W         ; GET 2-LINE LIMIT SWITCH TOGGLE FLAG BYTE
05EC   3910           02450         andlw   0x10                            ; BIT 4 IS THE ACTUAL FLAG, GET RID OF OTHER BITS (THERE
                             SHOULDN'T BE ANY)
05ED   0605           02451         xorwf   PORTA,W                         ; COMPARE TO PORTA
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05EE   3910           02452         andlw   0x10                            ; GET RID OF EXTRA BITS AGAIN
05EF   1903           02453         btfsc   STATUS,Z                        ; DID 2-LINE LIMIT SWITCH CHANGE STATE?
05F0   2DF2           02454         goto    linesw_no_change        ;
05F1   2DFB           02455         goto    linesw_change           ;
05F2                  02456 linesw_no_change:                               ; IF 2-LINE LIMIT SWITCH DID NOT CHANGE STATE
05F2   1E05           02457         btfss   PORTA,LINESWBIT         ; If 2-Line limit switch is on, don't do anything, otherwise sta
                            rt sweep timer.
05F3   0008           02458         return
05F4   3000           02459         movlw   0                                       ;
05F5   0656           02460         xorwf   sweep_timer,W           ; IF SWEEP TIMER IS 0, 6 SECONDS SINCE LAST LINE SWITCH CLOSURE 
                            DETECTED
05F6   1D03           02461         btfss   STATUS,Z                        ; THEN ASSUME NOT 2-LINE MODE AND SET FEED RATE BACK TO 
                            NORMAL ALGORITHM
05F7   0008           02462         return                                          ; IF TIMER NOT EXPIRED, HAVEN'T WAITED LONG ENOU
                            GH
05F8   3000           02463         movlw   0x00                            ; 0=NORMAL FEED RATE ALGORITHM
05F9   00D7           02464         movwf   feed_rate_type          ; SET FEED RATE TO NORMAL ALGORITHM
05FA   0008           02465         return                                          ;
05FB                  02466 linesw_change:                                  ; IF 2-LINE SWITCH DID CHANGE STATE
                      02467 ;       movlw   0x01                            ; 1=RESTRICTED FEED RATE FOR 2-LINE MODE
                      02468 ;       movwf   feed_rate_type          ; SET FEED RATE TO RESTRICTED FOR 2-LINE MODE
05FB   3006           02469         movlw   0x06                            ; 8 SECONDS
05FC   00D6           02470         movwf   sweep_timer                     ; START TIMER AT 6 SECONDS (REALLY x SEC, BECAUSE OF MIS
                            CALCULATION WITH 5MS TIMER)
05FD   3010           02471         movlw   0x10                            ;
05FE   06D5           02472         xorwf   linesw_toggle,F         ; IF CHANGE (TOGGLE), PUT NEW VALUE IN LINESW_TOGGLE
                      02473 ;       btfss   PORTA,LINESWBIT         ; CHECK FOR 2-LINE LIMIT SWITCH ON (LOW)
                      02474 ;       bcf             PORTC,SWEEP_EN          ; IF 2-LINE LIMIT SWITCH IS ON, TURN OFF SWEEP MOTOR, TH
                            EN LEAVE ROUTINE
                      02475 ;       return                                          ; IF 2-LINE LIMIT SWITCH IS OFF, LEAVE ROUTINE
05FF   1A05           02476         btfsc   PORTA,LINESWBIT
0600   0008           02477         return
0601   3001           02478         movlw   0x01
0602   00D7           02479         movwf   feed_rate_type
0603   1187           02480         bcf             PORTC,SWEEP_EN
0604   0008           02481         return
0605                  02482 linesw_toggle_init:                             ; WHEN SWEEP IS JUST TURNED ON, MUST MATCH LINESW_TOGGLE
                             VALUE TO 2-LINE SWITCH VALUE
0605   1A05           02483         btfsc   PORTA,4                         ;
0606   2E08           02484         goto    linesw_toggle_set       ;
0607   2E0B           02485         goto    linesw_toggle_clr       ;
0608                  02486 linesw_toggle_set:                              ;
0608   3010           02487         movlw   0x10                            ;
0609   00D5           02488         movwf   linesw_toggle           ;
060A   0008           02489         return                                          ;       
060B                  02490 linesw_toggle_clr:                              ;
060B   01D5           02491         clrf    linesw_toggle           ;
060C   0008           02492         return                                          ;
                      02493 
                      02494 ; IF THERE WAS A LINESW_TOGGLE CHANGE AND 2-LINE LIMIT SWITCH IS NOW OFF (SWEEPING), START TIMER AT 0 (C
                            LEAR), IF NOT
                      02495 ; ANOTHER TOGGLE WITHIN APPROX. 6 SECONDS, THEN 2-LINE MODE IS NOW OFF AND USE NORMAL FEED RATE ALGORITH
                            M.
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02496 ;
                      02497 
060D                  02498 chk_intf:                                               ; CALLED EVERY 5MS
060D   1C4D           02499         btfss   sweep_is_on,0           ; IF SWEEP MOTOR ON FLAG IS ON
060E   0008           02500         return                                          ;
                      02501 ;       btfsc   INTCON,INTF                     ; CHECK FOR RB0/INT FLAG SET
                      02502 ;       btfsc   PORTB,0                         ; Flag was set, now double check ball detect switch inpu
                            t still on.
                      02503 ;       return                                          ;
                      02504 ;       goto    ball_dropped            ; Double checked that ball was dropped.
060F   1C8B           02505         btfss   INTCON,INTF                     ; If RBO/INT flag set, double check switch is still on (
                            debounce/noise filter).
0610   0008           02506         return                                          ; If RBO/INT flag not set, return.
0611   1C06           02507         btfss   PORTB,0                         ; If ball detect switch is still on, then ball was dropp
                            ed.
0612   2E15           02508         goto    ball_dropped            ;
0613   108B           02509         bcf             INTCON,INTF                     ; If ball detect switch is no longer on, it was 
                            a spurious detection, clear INTF and return.
0614   0008           02510         return
0615                  02511 ball_dropped:                                   ;
0615   1587           02512         bsf             PORTC,SWEEP_EN          ; ...THEN TURN ON SWEEP MOTOR
0616   108B           02513         bcf             INTCON,INTF                     ;
0617   0008           02514         return                                          ;
0618                  02515 normal_feed_rate
0618   3000           02516         movlw   0x00                            ; 0=Normal feed rate algorithm
0619   00D7           02517         movwf   feed_rate_type          ; If sweep motor on flag is not on, set feed rate to normal.
061A   0008           02518         return                                          ;
061B                  02519 restrict_feed_rate
061B   3001           02520         movlw   0x01
061C   00D7           02521         movwf   feed_rate_type
061D   0008           02522         return
                      02523 
                      02524 ; WHEN 2-LINE MODE (LINE LIMIT SWITCH) IS DETECTED, MUST REDUCE MAXIMUM BALL FEED RATE SO THAT TIME BETW
                            EEN
                      02525 ; BALLS FED IS LONGER THAN TIME TO SWEEP SIDE TO SIDE (APPROX. 5 SECONDS), I.E. LIMIT FEED MOTOR SPEED.
                      02526 ; WHEN 2-LINE MODE IS NOT DETECTED FOR LONGER THAN A SIDE TO SIDE SWEEP, MUST GO BACK TO NORMAL FEED RAT
                            E ALGORITHM.
                      02527 
                      02528 
                      02529 
061E                  02530 toggle_green_led:
061E   3004           02531         movlw   GREEN_LED_ON    ; value to turn on green LED
061F   0686           02532         xorwf   PORTB,f                 ; toggle green LED
0620   0008           02533         return
                      02534 
0621                  02535 toggle_red_led:
0621   3002           02536         movlw   RED_LED_ON              ; value to turn on red LED
0622   0686           02537         xorwf   PORTB,f                 ; toggle red LED
0623   0008           02538         return
                      02539 
                      02540 ; The following lines were a part of the fix for the ball jam problem at power-on.
                      02541 ; If the machine was powered on and a ball that was already in the chute got jammed in the server wheels
                            , the machine
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02542 ; would not shut down with an overcurrent error if the speed pot was set fairly low.
                      02543 ; The top serve motor is the first to turn on and would cause the jam.
                      02544 ; The jammed top server motor would just continue to draw excessive current until it's free-wheeling dio
                            de would heat up and fail.
                      02545 ; The changes dated 06/09/05 make the top serve motor spin up quickly at power-on, regardless of the pot
                             setting.
                      02546 ; Then if a ball gets jammed at power-on, enough current is present to trip the overcurrent circuit.
0624                  02547 top_not_inited:                         ; 06/09/05 MJZ added this line
0624   308F           02548         movlw   0x8f                    ; 06/09/05 MJZ added this line
0625   00A4           02549         movwf   t_top_pwm               ; 06/09/05 MJZ added this line
0626   0008           02550         return                                  ; 06/09/05 MJZ added this line
                      02551 
                      02552 ; The following lines and all lines dated 06/15/05 are changes that, at power-on, ramp up the bottom ser
                            ve motor to fairly 
                      02553 ; fast speed, regardless of the pot setting, before it is allowed to be set to the pot. When the changes
                            , 06/09/05, were added
                      02554 ; to ramp up the top serve motor at power-on, the top serve motor, if the speed pot was set low, would s
                            low down before the 
                      02555 ; bottom serve motor would start spinning. The bottom serve motor would pull a ball, that was already in
                             the chute, into the
                      02556 ; wheels and the serve motors would jam on the ball without overcurrent detection, because both motors a
                            re drawing too little
                      02557 ; current. Now the bottom serve motor will draw enough current at the ball jam time to trip the overcurr
                            ent detection circuit.
0627                  02558 bot_not_inited:                         ; 06/15/05 MJZ added this line
0627   308F           02559         movlw   0x8f                    ; 06/15/05 MJZ added this line
0628   00A6           02560         movwf   t_bot_pwm               ; 06/15/05 MJZ added this line
0629   0008           02561         return                                  ; 06/15/05 MJZ added this line
                      02562 
                      02563 
                      02564         END                       ; directive 'end of program'
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

ADCON0                            0000001F
ADCON0VAL                         00000081
ADCON1                            0000009F
ADCON1VAL                         00000002
ADCS0                             00000006
ADCS1                             00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRES                             0000001E
BATTERY                           00000002
BEEP_OFF                          00000040
BF                                00000000
BLOCK_CNT                         00000053
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
ELEV_EN                           00000004
F                                 00000001
FEEDBIT                           00000003
FEED_BIT                          00000000
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

FEED_LED                          00000003
FEED_TOGGLE                       00000001
FERR                              00000002
FF_count                          00000052
FLASH_TIME                        00000030
FSR                               00000004
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GREEN_LED                         00000002
GREEN_LED_ON                      00000004
HighImpInt                        000000AF
HighImpInt2                       000000B1
HighImpShrt                       0000008B
Highpulse                         00000086
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTCONVAL                         000000A0
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
LINESWBIT                         00000004
LowImpInt                         000000DD
LowImpInt2                        000000DF
LowImpShrt                        000000BA
Lowpulse                          000000B6
MSEC5_LSB                         000000A8
MSEC5_MSB                         00000061
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTIONVAL                         000000C8
OPTION_REG                        00000081
P                                 00000004
PAUSE_TIME                        00000004
PCFG0                             00000000
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

PCFG1                             00000001
PCFG2                             00000002
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PMADR                             0000010D
PMADRH                            0000010F
PMCON1                            0000018C
PMDATA                            0000010C
PMDATH                            0000010E
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PWM1                              00000002
PWM2                              00000001
PWMADJUSTVAL                      00000016
PWMMAXVAL                         0000001D
PWMOUTBIT                         00000000
PwmInt                            00000083
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RED_LED                           00000001
RED_LED_ON                        00000002
REMOTE_BIT                        00000005
REMOTE_ON                         00000020
RP0                               00000005
RP1                               00000006
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SMP                               00000007
SPBRG                             00000099
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

SPDBIT                            00000001
SPEN                              00000007
SPINPBIT                          00000000
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SWEEPEN                           00000004
SWEEP_BIT                         00000001
SWEEP_EN                          00000003
SWEEP_TOGGLE                      00000002
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TICK_CNT                          00000057
TMR0                              00000001
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISAVAL                          0000003F
TRISB                             00000086
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

TRISBVAL                          000000F1
TRISC                             00000087
TRISCVAL                          000000A0
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WaitAdc                           0000032E
WaitNoInt                         00000329
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CP_ALL                           00003FEF
_CP_OFF                           00003FFF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F73                           00000001
a2d_chan                          00000033
acq_a2d                           0000031A
adjust_backspin                   00000428
adjust_backspin1                  00000355
adjust_bs1                        00000389
adjust_topspin                    000003DE
adjust_topspin1                   00000393
adjust_ts                         00000412
at0sec                            00000046
at10sec                           00000109
at11sec                           00000109
at12sec                           0000010A
at13sec                           0000010A
at14sec                           0000010B
at15sec                           0000010D
at1sec                            000000E3
at2sec                            000000FA
at3sec                            000000FA
at4sec                            000000FB
at5sec                            000000FC
at6sec                            00000104
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

at7sec                            00000105
at8sec                            00000108
at9sec                            00000109
atcom                             0000010C
ball_dropped                      00000615
bat_a2d                           0000003A
bat_dead                          000004E4
bat_dead_loop                     000004EB
bat_led_xit                       00000532
beep_count                        00000054
between_2.4v_2.5v                 00000520
bot_inited                        00000029
bot_not_inited                    00000627
bs_com                            0000043F
c_bot_pwm                         00000027
c_top_pwm                         00000025
calc_bot_pwm                      00000339
calc_feed                         00000212
calc_pwm                          0000003D
calc_top_pwm                      000003C3
charg_lt_3_0                      00000468
charg_lt_3_2                      0000045F
charg_lt_3_3                      0000045E
chk_2linesw                       000005E5
chk_feed_rate_type                00000199
chk_feed_xit                      000002C7
chk_intf                          0000060D
chk_rbif                          0000047E
chk_rbif1                         000004A5
chk_rbif2                         00000495
chk_rbif3                         00000494
chk_remote                        000005BB
counter                           0000002E
counter2                          0000002F
debug_led                         0000054D
dec_bot                           000001DD
dec_bot_by_8                      000001E3
dec_top                           000001C2
dec_top_by_8                      000001C8
delay                             00000048
delaylp                           00000327
delta_c                           0000003E
delta_s                           0000003F
enable_feed                       000001FE
err_no                            00000041
feed_0_2                          00000235
feed_10_12                        0000029E
feed_12_off                       000002B6
feed_2_4                          00000245
feed_4_6                          00000250
feed_6_8                          00000262
feed_8_10                         00000280
feed_a2d                          0000003B
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

feed_end                          000002B9
feed_inited                       0000002A
feed_off                          000001F2
feed_ok                           00000145
feed_ok1                          000001A1
feed_rate_type                    00000057
feed_toggled                      000005E0
fgrn_loop                         0000046D
flash_code                        00000042
flash_com                         0000046B
flash_error                       000004D2
flash_greenled                    000004D5
flash_grn                         00000460
flash_red                         00000464
getchar                           000005AF
grn_off                           00000523
grn_on                            0000052E
high_spd                          000003FA
high_spd1                         00000371
i_second                          0000006F
idle                              00000047
inc_bot_by_8                      000001DA
inc_top_by_8                      000001BF
init_bat_level                    00000505
init_done                         00000036
init_enable_feed                  000002D8
init_feed_pwm                     000002C8
init_feed_xit                     000002E0
init_pl_com                       00000514
init_update_feed                  000002DE
last_sweep                        00000053
led_bits                          00000043
linesw_change                     000005FB
linesw_no_change                  000005F2
linesw_toggle                     00000055
linesw_toggle_clr                 0000060B
linesw_toggle_init                00000605
linesw_toggle_set                 00000608
main                              00000010
moterr_lp                         000004C0
motor_error                       000004B9
msec5                             00000035
mult1                             00000049
mult2                             0000004A
mult3                             0000004B
mult_lp                           00000575
mult_lp1                          0000058C
mult_ret_0                        00000583
mult_sub                          0000056D
mult_sub1                         00000584
no_bat_adjust                     0000054C
no_blocking                       000005C9
no_remote_feed                    000001EE
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

no_spin                           00000443
no_spin1                          000003BB
normal_feed_rate                  00000618
not_second                        00000064
npwr_on_reset                     00000162
over1v                            000001FB
over2_5v                          00000528
over2_6v                          0000052B
over_pt4_v                        000002D5
pause                             000004DF
pl_com                            00000546
power_is_off                      00000446
power_level                       00000045
power_level_r                     00000046
power_level_tmp                   00000047
putchar                           000005B9
pwmdesired                        00000030
pwmhelp                           00000032
pwmmax                            00000031
pwr_off_loop                      0000048C
pwr_off_lp                        00000493
pwr_on_code                       00000023
pwr_on_reset                      00000166
r1                                0000004E
r2                                0000004F
rbif_bits                         0000004C
rbif_lp                           000004AE
rbif_wait                         00000044
record_bat_level                  00000537
remote_block                      00000051
remote_off                        00000317
remote_toggle                     00000050
restrict_feed_rate                0000061B
sec0init                          00000110
seconds                           00000034
set_bot                           000001E5
set_pwm_value                     000002C5
set_remote_block                  000005D7
set_top                           000001CA
slow_spd                          000003B6
slow_spd1                         0000043E
soft_pwm                          00000037
spd_a2d                           00000039
spin_a2d                          00000038
stacks                            0000002D
stackw                            0000002C
status_temp                       00000021
sweep_a2d                         0000003C
sweep_exit                        000002F4
sweep_exit1                       000002F4
sweep_inited                      0000002B
sweep_is_on                       0000004D
sweep_off                         000002F0
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

sweep_on                          000002E9
sweep_remote                      000002F5
sweep_timer                       00000056
sweep_toggled                     000005DB
t_bot_pwm                         00000026
t_top_pwm                         00000024
temp                              00000022
tick0                             0000016C
tick1                             00000179
tick2                             00000187
tick3                             0000018C
tick4                             000001A2
tick5                             000001A8
tick6                             000001AB
tick7                             000001AE
toggle_green_led                  0000061E
toggle_red_led                    00000621
top_inited                        00000028
top_not_inited                    00000624
ts_com1                           000003B7
under2_5v                         0000051E
upd_exit                          000001CC
update_bat_led                    00000516
update_bot_pwm                    000001CD
update_done                       000001E7
update_feed                       00000207
update_feed_pwm                   000001E8
update_remote                     000002F8
update_rmxit                      00000316
update_sweep                      000002E1
update_top_pwm                    000001B2
usart_disable                     000005A3
usart_enable                      0000059A
usart_off                         000005A9
w_temp                            00000020
wait                              000004EE
wait_cnt                          00000040
wait_no_clrwdt                    000004FA
wait_reset_lp                     0000045A
waitlp                            000004EF
waitlp1                           000004FB
xmit_status                       000005B5
MPASM  5.37                      CS019B07.ASM   2-2-2013  11:31:21         PAGE 61


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XX--XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------ ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1576
Program Memory Words Free:  2520


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    21 reported,     0 suppressed

