MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; CS019B05, 08/07/09, changing code to slow down new serve motors from Hillhouse products.
                      00002 
                      00003         list      p=16f73            ; list directive to define processor
                      00004         #include <p16f73.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 ; P16F73.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00320         LIST
                      00005 
                      00006 ;       __CONFIG   _CP_OFF & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
2007   3FE6           00007         __CONFIG   _CP_ALL & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
                      00008 
                      00009 ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00010 ; The lables following the directive are located in the respective .inc file.
                      00011 ; See respective data sheet for additional information on configuration word.
                      00012 
                      00013 ;*********************************************************************
                      00014 ; Definitions
                      00015 ;*********************************************************************
                      00016 ;
  000000A8            00017 MSEC5_LSB       equ     0xa8    
                      00018 ;NORMAL 
  00000061            00019 MSEC5_MSB       equ     0x61
                      00020 
                      00021 ;SIM MSEC5_MSB  equ     0xfe
                      00022 
                      00023 ; msec5 init value to count up to 1 second
                      00024 ; 200 5msec ticks (255 - 200)
                      00025 ;TICK_CNT       equ     0x37
  00000057            00026 TICK_CNT        equ     0x57
                      00027 ; remote block init value to count down to 1/2 second
  00000053            00028 BLOCK_CNT       equ     0x53
                      00029 ; I/O, Interrupt and Option Definitions
                      00030 ;
                      00031 ;OPTIONVAL      equ     88h             ;10001000b: portB no pull-up, tmr0 int
  000000C8            00032 OPTIONVAL       equ     0c8h            ;11001000b: portB no pull-up,  RB0/INT rising edge, tmr0 int
                      00033 ;OPTIONVAL      equ     088h            ;11001000b: portB no pull-up,  RB0/INT falling edge, tmr0 int
  000000A0            00034 INTCONVAL       equ     0a0h            ; set GIE, TOIE
                      00035 
                      00036                                         ; port A:
  00000000            00037 SPINPBIT        equ     00h             ; analog input for ball spin     a/d channel 0
  00000001            00038 SPDBIT          equ     01h             ; analog input for ball speed    a/d channel 1
  00000002            00039 BATTERY         equ     02h             ; analog input for battery level a/d channel 2
  00000003            00040 FEEDBIT         equ     03h             ; analog input for feed rate     a/d channel 3
  00000004            00041 SWEEPEN         equ     04h             ; analog input for sweep enable switch a/d channel 4 (PORTA bit 
                            5)
  0000003F            00042 TRISAVAL        equ     3fh             ;00111111b: A0 - A5 as input
  00000002            00043 ADCON1VAL       equ     2               ; RA0,1,2,3,5 are analog        ;MJZ DEBUG, COMMENTED THIS LINE
                      00044 ;ADCON1VAL      equ     6               ;MJZ DEBUG, ADDED THIS LINE, CHANGED ALL ANALOG INPUTS TO DIGITA
                            L INPUTS
  00000081            00045 ADCON0VAL       equ     081h            ;10000001b: fosc/32, channel 0
  00000004            00046 LINESWBIT       equ 04h                 ;MJZ ADDED LINE, 2-LINE LIMIT SWITCH INPUT BIT, LOW=SWITCH ON, H
                            IGH=SWITCH OFF
                      00047 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00048                                         ; port B:
  000000F1            00049 TRISBVAL        equ     0f1h            ;11110001b: B1,B2,B3 as output
  00000001            00050 RED_LED         equ     1               ;  bit 1 controls red led
  00000002            00051 GREEN_LED       equ     2               ;  bit 2 controls green led
  00000003            00052 FEED_LED        equ     3               ;  bit 3 controls feed led
  00000002            00053 RED_LED_ON      equ     2               ;  value to turn on red led
  00000004            00054 GREEN_LED_ON    equ     4               ;  value to turn on green led
                      00055 
                      00056                                         ; port C:
  00000000            00057 PWMOUTBIT       equ     00h             ; software PWM output for feed motor
  00000003            00058 SWEEP_EN        equ     03h             ; sweep motor enable (digital out)
  00000004            00059 ELEV_EN         equ     04h             ; elevation motor enable (digital out)
  00000040            00060 BEEP_OFF        equ     0x40            ; bit 6 on disables beep
  000000A0            00061 TRISCVAL        equ     0a0h            ;10100000b: C7,C5 as input
  00000002            00062 PWM1            equ     2
  00000001            00063 PWM2            equ     1
                      00064 
  00000030            00065 FLASH_TIME      equ     30h
  00000004            00066 PAUSE_TIME      equ     4
                      00067 
                      00068 ;***** VARIABLE DEFINITIONS
  00000020            00069 w_temp          equ     0x20            ; variable used for context saving 
  00000021            00070 status_temp     equ     0x21            ; variable used for context saving
  00000022            00071 temp            equ     0x22
  00000023            00072 pwr_on_code     EQU     0x23
  00000024            00073 t_top_pwm       equ     0x24            ; target value for top PWM
  00000025            00074 c_top_pwm       equ     0x25            ; current value for top PWM
  00000026            00075 t_bot_pwm       equ     0x26            ; target value for bot PWM
  00000027            00076 c_bot_pwm       equ     0x27            ; current value for bot PWM
  00000028            00077 top_inited      equ     0x28            ; top motor init done
  00000029            00078 bot_inited      equ     0x29            ; bottom motor init done
  0000002A            00079 feed_inited     equ     0x2a            ; feed motor init done
  0000002B            00080 sweep_inited    equ     0x2b            ; sweep motor init done
                      00081 
  0000002C            00082 stackw          equ     0x2c            ; stack to push/pop the W-register
  0000002D            00083 stacks          equ     0x2d            ; stack to push/pop the STATUS-reg
  0000002E            00084 counter         equ     0x2e            ; counter: input frequency
                      00085                                         ;   f1 = crystalfreq. / 4 / 255
  0000002F            00086 counter2        equ     0x2f            ; counter2: input frequency
                      00087                                         ;   f2 = f1 / 128
  00000030            00088 pwmdesired      equ     0x30            ; target PWM of feed motor value 0..255
  00000031            00089 pwmmax          equ     0x31            ; register to support generation PWM
  00000032            00090 pwmhelp         equ     0x32            ; used as temp storage of pwmdesired
                      00091 
  00000033            00092 a2d_chan        equ     0x33            ; next channel to acquire a2d
                      00093 
  00000034            00094 seconds         equ     0x34            ; seconds since poweron
  00000035            00095 msec5           equ     0x35            ; number of 5msec intrs
  00000036            00096 init_done       equ     0x36            ; power up initialization done
  00000037            00097 soft_pwm        equ     0x37            ; software PWM module enabled
                      00098 
  00000038            00099 spin_a2d        equ     0x38            ; a2d value from a2d chan 0
  00000039            00100 spd_a2d         equ     0x39            ; a2d value from a2d chan 1
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003A            00101 bat_a2d         equ     0x3a            ; a2d value from a2d chan 2
  0000003B            00102 feed_a2d        equ     0x3b            ; a2d value from a2d chan 3
  0000003C            00103 sweep_a2d       equ     0x3c            ; a2d value from a2d chan 4
                      00104 
  0000003D            00105 calc_pwm        equ     0x3d            ; temporarily variable for calculating PWM
  0000003E            00106 delta_c         equ     0x3e            ; temp var
  0000003F            00107 delta_s         equ     0x3f            ; temp var
                      00108 
  00000040            00109 wait_cnt        equ     0x40            ; counter for wait routine
                      00110 ;err_no         equ     0x41            ; motor error number    ;MJZ COMMENTED THIS LINE
                      00111                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00112                                         ;              4= bottom serve err, 5= sweep motor error
  00000041            00113 err_no          equ     0x41            ; motor error number    ;MJZ ADDED THIS LINE
                      00114                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00115                                         ;              4= bottom serve err, 5= POWER OFF ERROR
  00000042            00116 flash_code      equ     0x42            ; local variable used by motor_err()
  00000043            00117 led_bits        equ     0x43            ; memory copy of LED bits on PORTB
  00000044            00118 rbif_wait       equ     0x44            ; delay for rechecking rbif
                      00119 
  00000045            00120 power_level     equ     0x45            ; power level for set led: 0 is > 2.6v, 1 is > 2.5V, 2 is > 2.4v
                            , 3 is < 2.4v
  00000046            00121 power_level_r   equ     0x46            ; lowest power level for this 16 second period
  00000047            00122 power_level_tmp equ     0x47            ; temp var 
  00000048            00123 delay           equ     0x48            ; delay var
                      00124 
  00000049            00125 mult1           equ     0x49            ; temp var for mult_sub routine
  0000004A            00126 mult2           equ     0x4a            ; temp var for mult_sub routine
  0000004B            00127 mult3           equ     0x4b            ; temp var for mult_sub routine
  0000004C            00128 rbif_bits       equ     0x4c            ; bit mask for checking motor errors
  0000004D            00129 sweep_is_on     equ     0x4d            ; sweep motor on flag
  0000004E            00130 r1              equ     0x4e            ; result of mult1 x mult2
  0000004F            00131 r2              equ     0x4f            ; result of mult1 x mult2
                      00132 
  00000050            00133 remote_toggle   equ     0x50            ; toggle bits for remote control
  00000000            00134 FEED_BIT        equ     0
  00000001            00135 SWEEP_BIT       equ     1
  00000005            00136 REMOTE_BIT      equ     5
  00000001            00137 FEED_TOGGLE     equ     0x01            ; bit 0:  0 = feed off, 1 = feed on
  00000002            00138 SWEEP_TOGGLE    equ     0x02            ; bit 1:  0 = sweep off, 1 = sweep on
  00000020            00139 REMOTE_ON       equ     0x20            ; bit 5:  0 = remote disabled, 1= enabled
  00000051            00140 remote_block    equ     0x51            ; time to block remote transmission input
  00000052            00141 FF_count        equ     0x52            ; remaining FF's to send for beep
  00000053            00142 last_sweep      equ     0x53            ;
  00000054            00143 beep_count      equ     0x54            ; DEBUG
                      00144 
                      00145 
                      00146 
  00000055            00147 linesw_toggle   equ 0x55        ;MJZ ADDED THIS LINE, BIT 4 IS 2-LINE SWITCH TOGGLE BIT
  00000056            00148 sweep_timer             equ 0x56        ;MJZ ADDED THIS LINE, REACHES 0 MEANS NO 2-LINE SWITCH DETECTED 
                            BETWEEN SIDE TO SIDE SWEEPS
  00000057            00149 feed_rate_type  equ 0x57        ;MJZ ADDED THIS LINE, BIT 0=0 FOR NORMAL FEED RATE ALGORITHM, 
                      00150                                                         ;MJZ ADDED THIS LINE, BIT 0=1 FOR RESTRICTED MAX
                             RATE IN 2-LINE MODE
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151 
                      00152 
                      00153 
                      00154 ;----------------------------------------------------------------------
                      00155 ; PWM-module constant
  00000016            00156 PWMADJUSTVAL    equ     .22
                      00157         ; correction number, defined by the following factors:
                      00158         ; time from timer interrupt to executing PC 004 + 3 cycles
                      00159         ; computing time from PC=004 to required edge   +18 cycles
                      00160         ; lost timer cycles due to writing the time     + 2 cycles
                      00161         ; cal desired PWM value to timer loading value  + 2 cycles
                      00162         ; time from timer loading to gen required edge  - 1 cycle
                      00163         ; valid value for hardware (unknown diff to the data sheet)
                      00164         ; 3+18+2+2-1=22
                      00165         ; value value for PICSIM version 5.11 (error of PICSIM):
                      00166         ; 0+18+2+2-1=21
  0000001D            00167 PWMMAXVAL       equ     .29
                      00168         ; loading value for pwmmax
                      00169         ; If n is the maximum length of a high pulse, which has to be
                      00170         ; generated by the skipping method, then is PWMMAXVAL = n+1.
                      00171         ; The max length of a low pulse using the skip method is n-1.
                      00172 
                      00173 
                      00174 
                      00175 ;**********************************************************************
0000                  00176                 ORG     0x000             ; processor reset vector
0000   018A           00177                 clrf    PCLATH            ; ensure page bits are cleared
0001   2810           00178                 goto    main              ; go to beginning of program
                      00179 
                      00180 
0004                  00181                 ORG     0x004             ; interrupt vector location
0004   00A0           00182                 movwf   w_temp            ; save off current W register contents
0005   0803           00183                 movf    STATUS,w          ; move status register into W register
0006   1283           00184                 bcf     STATUS,RP0        ; ensure file register bank set to 0
0007   00A1           00185                 movwf   status_temp       ; save off contents of STATUS register
                      00186 
                      00187 ; isr code can go here or be located as a call subroutine elsewhere
0008   190B           00188                 btfsc   INTCON,T0IF      ; check for timer0 interrupt
0009   2083           00189                 call    PwmInt
                      00190 
000A   1283           00191                 bcf     STATUS,RP0        ; ensure file register bank set to 0
000B   0821           00192                 movf    status_temp,w     ; retrieve copy of STATUS register
000C   0083           00193                 movwf   STATUS            ; restore pre-isr STATUS register contents
000D   0EA0           00194                 swapf   w_temp,f
000E   0E20           00195                 swapf   w_temp,w          ; restore pre-isr W register contents
000F   0009           00196                 retfie                    ; return from interrupt
                      00197 
0010                  00198 main
                      00199 ; init code 
                      00200         ;configuration of the PWM module
0010   018B           00201         clrf    INTCON                  ; disable all intrs
0011   0197           00202         clrf    CCP1CON                 ; CCP1 Module is off
0012   019D           00203         clrf    CCP2CON                 ; CCP2 Module is off
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013   0181           00204         clrf    TMR0                    ; reset timer
0014   01B0           00205         clrf    pwmdesired              ; reset value of software PWM is 0
0015   01A4           00206         clrf    t_top_pwm
0016   01A6           00207         clrf    t_bot_pwm
0017   01A5           00208         clrf    c_top_pwm
0018   01A7           00209         clrf    c_bot_pwm
0019   01A8           00210         clrf    top_inited
001A   01A9           00211         clrf    bot_inited
001B   01AA           00212         clrf    feed_inited
001C   01AB           00213         clrf    sweep_inited
                      00214 ;       clrw
                      00215 ;       clrf    PORTC                   ; reset all output to 0 before port C
001D   3040           00216         movlw   BEEP_OFF                ; reset all output to 0 except BEEP_OFF before port C
001E   0087           00217         movwf   PORTC                   ; is changed from input to output 
                      00218                                         ; to suppress an uncontrolled
                      00219                                         ; spike
001F   0186           00220         clrf    PORTB                   ; turn off red led, green led, and feed led
0020   01A3           00221         clrf    pwr_on_code             ; reset type code
0021   301D           00222         movlw   PWMMAXVAL               ; set support register
0022   00B1           00223         movwf   pwmmax                  ;
                      00224         ; configuration of the PIC
0023   1683           00225         bsf     STATUS,RP0              ; register page 1
0024   303F           00226         movlw   TRISAVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0025   0085           00227         movwf   TRISA                   ; ...port A
0026   30F1           00228         movlw   TRISBVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0027   0086           00229         movwf   TRISB                   ; ...port B
0028   30A0           00230         movlw   TRISCVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0029   0087           00231         movwf   TRISC                   ; ...port C
002A   3002           00232         movlw   ADCON1VAL               ; set inputs of ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002B   009F           00233         movwf   ADCON1                  ; ...adc
002C   30C8           00234         movlw   OPTIONVAL               ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002D   0081           00235         movwf   OPTION_REG              ; ...PIC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002E   080E           00236         movf    PCON,w                  ; pick up NOT_POR and NOT_BOR
002F   3903           00237         andlw   3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0030   148E           00238         bsf     PCON,NOT_POR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0031   140E           00239         bsf     PCON,NOT_BOR
0032   1283           00240         bcf     STATUS,RP0              ; register page 0
0033   00A3           00241         movwf   pwr_on_code
0034   3018           00242         movlw   0x18                    ; get NOT_TO and NOT_PD
0035   0503           00243         andwf   STATUS,w
0036   04A3           00244         iorwf   pwr_on_code,f                   ; or with NOT_POR and NOT_BOR
0037   0064           00245         clrwdt
                      00246 ;
                      00247 ; init variables
0038   01B4           00248         clrf    seconds
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0039   01B6           00249         clrf    init_done               ; power on init not done
003A   01B7           00250         clrf    soft_pwm                ; software pwm module not enabled
003B   01C3           00251         clrf    led_bits
003C   30A8           00252         movlw   MSEC5_LSB               ; init  timer1 to count up to 5 msec
003D   008E           00253         movwf   TMR1L
003E   3061           00254         movlw   MSEC5_MSB
003F   008F           00255         movwf   TMR1H
0040   3001           00256         movlw   0x01                    ; enables TMR1, FOSC/4, 1:1 prescale
0041   0090           00257         movwf   T1CON   
0042   3057           00258         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
0043   00B5           00259         movwf   msec5
                      00260 
0044   01D6           00261         clrf    sweep_timer             ;MJZ ADDED THIS LINE
0045   01D7           00262         clrf    feed_rate_type  ;MJZ ADDED THIS LINE
                      00263 
                      00264 
                      00265 ; on power up
                      00266 ;
0046                  00267 at0sec
0046   2110           00268         call    sec0init
                      00269 ;       movlw   0xf8                    ; SIM ONLY
                      00270 ;       movwf   msec5                   ; SIM ONLY
                      00271 ; main idle loop
                      00272 ;
0047                  00273 idle
0047   0064           00274         clrwdt                          ; toggle watchdog
0048   1C0C           00275         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0049   2847           00276         goto    idle
004A   30A8           00277         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
004B   008E           00278         movwf   TMR1L
004C   3061           00279         movlw   MSEC5_MSB
004D   008F           00280         movwf   TMR1H
004E   100C           00281         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
                      00282 ;       call    chk_rbif                ; check if RB7:RB4 pins changed - motors error  ;MJZ COMMENTED T
                            HIS LINE
004F   2484           00283         call    chk_rbif                ;MJZ ADDED THIS LINE, CHECK IF RB7:RB4 PINS CHANGED - MOTOR ERRO
                            RS OR POWER OFF
0050   2613           00284         call    chk_intf                ;MJZ ADDED THIS LINE, CHECK FOR BALL DROPPED
0051   25C1           00285         call    chk_remote
0052   25EB           00286         call    chk_2linesw             ;MJZ ADDED LINE, CHECK IF 2-LINE LIMIT SWITCH IS ON, NEEDS TO BE
                             CHECKED EVERY 5MS
                      00287                                                         ;TO ENSURE STOP POSITION ACCURACY & CONSISTANCY
0053   0FB5           00288         incfsz  msec5,f                 ; if msec5 overflowed,
0054   2864           00289         goto    not_second
                      00290 ;       movlw   0x55                    ; DEBUG
                      00291 ;       btfss   remote_toggle,REMOTE_BIT        ; DEBUG
                      00292 ;       call    putchar                 ; DEBUG
                      00293 
Message[305]: Using default destination of 1 (file).
0055   03D6           00294         decf    sweep_timer                     ;MJZ ADDED THIS LINE, SWEEP TIMER COUNTDOWN SECONDS
                      00295 
0056   1845           00296         btfsc   power_level,0           ;MJZ ADDED THIS LINE
0057   2624           00297         call    toggle_green_led        ;MJZ ADDED THIS LINE, IF POWER_LEVEL=1 (OR 3), TOGGLE GREEN LED 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            (POWER_LEVEL 3 NEVER GETS HERE)
0058   18C5           00298         btfsc   power_level,1           ;MJZ ADDED THIS LINE
0059   2627           00299         call    toggle_red_led          ;MJZ ADDED THIS LINE, IF POWER_LEVEL=2 (OR 3), TOGGLE RED LED (P
                            OWER_LEVEL 3 NEVER GETS HERE)
                      00300 
005A   144C           00301         bsf     rbif_bits,0                     ; start checking for sweep motor error again
005B   3057           00302         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
005C   00B5           00303         movwf   msec5
                      00304 ;       movlw   0xf8                    ; SIM ONLY
                      00305 ;       movwf   msec5                   ; SIM ONLY
005D   0B36           00306         decfsz  init_done,w             ;   and init not done
005E   286F           00307         goto    i_second                ;   do init stuff
005F   0AB4           00308         incf    seconds,f               ; msec5 overflowed, actually toggled every 1 seconds
0060   0834           00309         movf    seconds,w
0061   390F           00310         andlw   0x0f                    ; update battery led every 16 seconds
0062   1903           00311         btfsc   STATUS,Z
0063   251C           00312         call    update_bat_led
                      00313 
0064                  00314 not_second:
0064   3007           00315         movlw   7
0065   0535           00316         andwf   msec5,w
0066   0782           00317         addwf   PCL,f
0067   296C           00318         goto    tick0
0068   2979           00319         goto    tick1
0069   2987           00320         goto    tick2
006A   298C           00321         goto    tick3
006B   29A2           00322         goto    tick4
006C   29A8           00323         goto    tick5
006D   29AB           00324         goto    tick6
006E   29AE           00325         goto    tick7
                      00326 
006F                  00327 i_second:
006F   0A34           00328         incf    seconds,w               ; msec5 overflowed, actually toggled every 1.25 seconds
0070   00B4           00329         movwf   seconds
0071   0782           00330         addwf   PCL,f
0072   2846           00331         goto    at0sec                  ; 0 second - this won't happen
0073   28E3           00332         goto    at1sec                  ; 1 second
0074   28FA           00333         goto    at2sec                  ; 2 seconds
0075   28FA           00334         goto    at3sec                  ; 3 seconds
0076   28FB           00335         goto    at4sec
0077   28FC           00336         goto    at5sec
0078   2904           00337         goto    at6sec
0079   2905           00338         goto    at7sec
007A   2908           00339         goto    at8sec
007B   2909           00340         goto    at9sec
007C   2909           00341         goto    at10sec
007D   2909           00342         goto    at11sec
007E   290A           00343         goto    at12sec
007F   290A           00344         goto    at13sec
0080   290B           00345         goto    at14sec
0081   290D           00346         goto    at15sec
                      00347 
                      00348 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00349 
0082   2847           00350         goto    idle
                      00351 ; end of main
                      00352 
                      00353 ;--- software PWM Generator
                      00354 ;
0083                  00355 PwmInt
0083   110B           00356         bcf     INTCON,T0IF             ; clear interrupt flag
0084   1807           00357         btfsc   PORTC,PWMOUTBIT         ; which edge is required?
0085   28B6           00358         goto    Lowpulse                ; -> goto falling edge
0086                  00359 Highpulse
0086   0930           00360         comf    pwmdesired,W            ; get desired PWM value
0087   00B2           00361         movwf   pwmhelp                 ; store val for the foll low pulse
0088   07B1           00362         addwf   pwmmax,F                ; calc number of inst's to skip
0089   1C03           00363         btfss   STATUS,C                ; which method to use?
008A   28AF           00364         goto    HighImpInt              ; -> using interrupt
008B                  00365 HighImpShrt
008B   0831           00366         movf    pwmmax,W                ; get number of inst's to skip
008C   0782           00367         addwf   PCL,F                   ; skip n instructions
008D   1407           00368         bsf     PORTC,PWMOUTBIT         ; rising edge, 28 cycles hi pulse
008E   1407           00369         bsf     PORTC,PWMOUTBIT         ; 27 cycles
008F   1407           00370         bsf     PORTC,PWMOUTBIT         ; 26 cycles
0090   1407           00371         bsf     PORTC,PWMOUTBIT         ; 25 cycles
0091   1407           00372         bsf     PORTC,PWMOUTBIT         ; 24 cycles
0092   1407           00373         bsf     PORTC,PWMOUTBIT         ; 23 cycles
0093   1407           00374         bsf     PORTC,PWMOUTBIT         ; 22 cycles
0094   1407           00375         bsf     PORTC,PWMOUTBIT         ; 21 cycles
0095   1407           00376         bsf     PORTC,PWMOUTBIT         ; 20 cycles
0096   1407           00377         bsf     PORTC,PWMOUTBIT         ; 19 cycles
0097   1407           00378         bsf     PORTC,PWMOUTBIT         ; 18 cycles
0098   1407           00379         bsf     PORTC,PWMOUTBIT         ; 17 cycles
0099   1407           00380         bsf     PORTC,PWMOUTBIT         ; 16 cycles
009A   1407           00381         bsf     PORTC,PWMOUTBIT         ; 15 cycles
009B   1407           00382         bsf     PORTC,PWMOUTBIT         ; 14 cycles
009C   1407           00383         bsf     PORTC,PWMOUTBIT         ; 13 cycles
009D   1407           00384         bsf     PORTC,PWMOUTBIT         ; 12 cycles
009E   1407           00385         bsf     PORTC,PWMOUTBIT         ; 11 cycles
009F   1407           00386         bsf     PORTC,PWMOUTBIT         ; 10 cycles
00A0   1407           00387         bsf     PORTC,PWMOUTBIT         ; 9 cycles
00A1   1407           00388         bsf     PORTC,PWMOUTBIT         ; 8 cycles
00A2   1407           00389         bsf     PORTC,PWMOUTBIT         ; 7 cycles
00A3   1407           00390         bsf     PORTC,PWMOUTBIT         ; 6 cycles
00A4   1407           00391         bsf     PORTC,PWMOUTBIT         ; 5 cycles
00A5   1407           00392         bsf     PORTC,PWMOUTBIT         ; 4 cycles
00A6   1407           00393         bsf     PORTC,PWMOUTBIT         ; 3 cycles
00A7   1407           00394         bsf     PORTC,PWMOUTBIT         ; 2 cycles
00A8   1407           00395         bsf     PORTC,PWMOUTBIT         ; 1 cycle
00A9   1007           00396         bcf     PORTC,PWMOUTBIT         ; fall edge, start of the following
                      00397                                         ; low pulse using the interrupt
00AA   0AAE           00398         incf    counter,F               ; trigger counter, cause there was
                      00399                                         ; a rising edge
00AB   0932           00400         comf    pwmhelp,W               ; get required low pulse length
00AC   3E1B           00401         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00402                                         ; Edge was generated 5 cycles before
                      00403                                         ; usual point of time
00AD   0081           00404         movwf   TMR0                    ; put value into timer
00AE   28DF           00405         goto    LowImpInt2              ; low pulse using int is running
00AF                  00406 HighImpInt                              ; high pulse using interrupt
00AF   3E16           00407         addlw   PWMADJUSTVAL            ; calculate timer loading value
00B0   0081           00408         movwf   TMR0                    ; put value into timer
00B1                  00409 HighImpInt2
00B1   1407           00410         bsf     PORTC,PWMOUTBIT         ; generate rising edge
00B2   0AAE           00411         incf    counter,F               ; trigger counter, because there was a rising edge
00B3   301C           00412         movlw   PWMMAXVAL-1             ; "repair"...
00B4   00B1           00413         movwf   pwmmax                  ; ...support register
00B5   0008           00414         return                          ; return to main isr
                      00415 
                      00416 
00B6                  00417 Lowpulse
00B6   0932           00418         comf    pwmhelp,W               ; get required pulse length
00B7   07B1           00419         addwf   pwmmax,F                ; calc number of inst's to skip
00B8   1C03           00420         btfss   STATUS,C                ; which method is to use?
00B9   28DD           00421         goto    LowImpInt               ; ->using interrupt
00BA                  00422 LowImpShrt
00BA   0831           00423         movf    pwmmax,W                ; get number of inst's to skip
00BB   0782           00424         addwf   PCL,F                   ; skip n instructions
00BC   1007           00425         bcf     PORTC,PWMOUTBIT         ; falling edge, 27 cycles low pulse
00BD   1007           00426         bcf     PORTC,PWMOUTBIT         ; 26 cycles
00BE   1007           00427         bcf     PORTC,PWMOUTBIT         ; 25 cycles
00BF   1007           00428         bcf     PORTC,PWMOUTBIT         ; 24 cycles
00C0   1007           00429         bcf     PORTC,PWMOUTBIT         ; 23 cycles
00C1   1007           00430         bcf     PORTC,PWMOUTBIT         ; 22 cycles
00C2   1007           00431         bcf     PORTC,PWMOUTBIT         ; 21 cycles
00C3   1007           00432         bcf     PORTC,PWMOUTBIT         ; 20 cycles
00C4   1007           00433         bcf     PORTC,PWMOUTBIT         ; 19 cycles
00C5   1007           00434         bcf     PORTC,PWMOUTBIT         ; 18 cycles
00C6   1007           00435         bcf     PORTC,PWMOUTBIT         ; 17 cycles
00C7   1007           00436         bcf     PORTC,PWMOUTBIT         ; 16 cycles
00C8   1007           00437         bcf     PORTC,PWMOUTBIT         ; 15 cycles
00C9   1007           00438         bcf     PORTC,PWMOUTBIT         ; 14 cycles
00CA   1007           00439         bcf     PORTC,PWMOUTBIT         ; 13 cycles
00CB   1007           00440         bcf     PORTC,PWMOUTBIT         ; 12 cycles
00CC   1007           00441         bcf     PORTC,PWMOUTBIT         ; 11 cycles
00CD   1007           00442         bcf     PORTC,PWMOUTBIT         ; 10 cycles
00CE   1007           00443         bcf     PORTC,PWMOUTBIT         ; 9 cycles
00CF   1007           00444         bcf     PORTC,PWMOUTBIT         ; 8 cycles
00D0   1007           00445         bcf     PORTC,PWMOUTBIT         ; 7 cycles
00D1   1007           00446         bcf     PORTC,PWMOUTBIT         ; 6 cycles
00D2   1007           00447         bcf     PORTC,PWMOUTBIT         ; 5 cycles
00D3   1007           00448         bcf     PORTC,PWMOUTBIT         ; 4 cycles
00D4   1007           00449         bcf     PORTC,PWMOUTBIT         ; 3 cycles
00D5   1007           00450         bcf     PORTC,PWMOUTBIT         ; 2 cycles
00D6   1007           00451         bcf     PORTC,PWMOUTBIT         ; 1 cycles
00D7   1407           00452         bsf     PORTC,PWMOUTBIT         ; rising edge; start of the next
                      00453                                         ; high pulse using the interrupt
00D8   0930           00454         comf    pwmdesired,W            ; get desired PWM value
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D9   00B2           00455         movwf   pwmhelp                 ; store val for the next lo pulse
00DA   3E1B           00456         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
                      00457                                         ; Edge was gen'd 5 cycles before
                      00458                                         ; usual point of time.
00DB   0081           00459         movwf   TMR0                    ; put value into timer
00DC   28B1           00460         goto    HighImpInt2             ; high pulse using int is running
00DD                  00461 LowImpInt                               ; low pulse using interrupt
00DD   3E16           00462         addlw   PWMADJUSTVAL            ; calculate timer loading value
00DE   0081           00463         movwf   TMR0                    ; put value into timer
00DF                  00464 LowImpInt2
00DF   1007           00465         bcf     PORTC,PWMOUTBIT         ; generate falling edge
00E0   301D           00466         movlw   PWMMAXVAL               ; "repair" ...
00E1   00B1           00467         movwf   pwmmax                  ; ... support register
00E2   0008           00468         return                          ; return to main isr
                      00469 
                      00470 
                      00471 
                      00472 
                      00473 ; this is really part of main loop, moved here so PWNINT can reside below 0x100
                      00474 
                      00475 ; enable top motor 20KHz, 10% duty cycle
00E3                  00476 at1sec
                      00477 
00E3   0191           00478         clrf    TMR2                    ; clear timer2
00E4   0192           00479         clrf    T2CON                   ; hardware pwm prescaler is one, timer 2 off
                      00480 ;       movlw   0x02                    ; hardware pwm prescaler is 16, timer 2 off
                      00481 ;       movwf   T2CON
00E5   1683           00482         bsf     STATUS,RP0              ; register page 1
00E6   30FF           00483         movlw   0xff                    ; period is 50 us if prescaler is 1, 82 us if prescaler is 16
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E7   0092           00484         movwf   PR2                     ;
00E8   1283           00485         bcf     STATUS,RP0              ; register page 0
                      00486 ;       movlw   0x7f
00E9   3019           00487         movlw   0x19
00EA   00A4           00488         movwf   t_top_pwm
00EB   00A6           00489         movwf   t_bot_pwm
00EC   00A5           00490         movwf   c_top_pwm
00ED   00A7           00491         movwf   c_bot_pwm
                      00492 ;       movlw   0x7f                    ; 50% duty cycle
00EE   3019           00493         movlw   0x19                    ; 10% duty cycle
00EF   0095           00494         movwf   CCPR1L                  ;
00F0   009B           00495         movwf   CCPR2L
00F1   1683           00496         bsf     STATUS,RP0              ; bank1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   1107           00497         bcf     TRISC,PWM1              ; make pin for pwm1 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F3   1087           00498         bcf     TRISC,PWM2              ; make pin for pwm2 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   018C           00499         clrf    PIE1                    ; disable peripheral interrupts
00F5   1283           00500         bcf     STATUS,RP0              ; bank0
00F6   018C           00501         clrf    PIR1                    ; clear peripheral interrupts flags
00F7   300C           00502         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (top)
                      00503 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (top)
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F8   0097           00504         movwf   CCP1CON
                      00505 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (bottom)
                      00506 ;       movwf   CCP2CON
00F9   1512           00507         bsf     T2CON,TMR2ON            ; timer2 starts to increment
                      00508 
                      00509 ; fall through to atcom
                      00510 
00FA                  00511 at2sec
00FA                  00512 at3sec
                      00513 
00FA   290C           00514         goto    atcom
                      00515 
00FB                  00516 at4sec
                      00517 
                      00518 ;; Top motor duty cycle set to pot
                      00519 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00520 ; Bottom motor duty cycle set to pot
                      00521 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot
00FB   290C           00522         goto    atcom
                      00523 
00FC                  00524 at5sec
                      00525 
                      00526 ; Bottom motor 10% duty cycle
00FC   3019           00527         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on, now original 10% duty cycle 
                      00528                                                         ; got changed before we got here.
00FD   00A6           00529         movwf   t_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FE   00A7           00530         movwf   c_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FF   3019           00531         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
0100   009B           00532         movwf   CCPR2L                  ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
                      00533 
0101   300C           00534         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00535 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (bottom)
0102   009D           00536         movwf   CCP2CON
                      00537 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00538 ;       movwf   CCP1CON
0103   290C           00539         goto    atcom
                      00540 
0104                  00541 at6sec
                      00542         
0104   290C           00543         goto    atcom
                      00544 
0105                  00545 at7sec
                      00546 
                      00547 ;; Top motor duty cycle set to pot, 06/15/05 MJZ change
0105   0AA8           00548         incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00549 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00550 ;; Bottom motor duty cycle set to pot,  ; 06/15/05 MJZ changes, set to pot sooner than original
0106   0AA9           00551         incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, see above line
                      00552 
0107   290C           00553         goto    atcom
                      00554 
                      00555 ; fall through to atcom
0108                  00556 at8sec
                      00557 ;; Bottom motor duty cycle set to pot
                      00558 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, move to "at7sec"
                      00559 ; Top motor duty cycle set to pot
                      00560 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot
0108   290C           00561         goto    atcom
                      00562 
0109                  00563 at9sec
0109                  00564 at10sec
0109                  00565 at11sec
0109   290C           00566         goto    atcom
010A                  00567 at12sec
                      00568 ; sweep motor control
                      00569 ;       incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00570 ;       bcf     rbif_bits,0             ;  don't check for sweep motor error
                      00571 ;       incf    init_done,f             ; set initialization done flag
                      00572 
                      00573 ; fall through to atcom
010A                  00574 at13sec
                      00575 ;       movf    feed_a2d,w
                      00576 ;       sublw   0x3f                    ; if input < 1.25V (no borrow), power feed motor to pot
                      00577 ;       btfsc   STATUS,C                ; else force to 1.25V for 1 sec, then set to pot
                      00578 ;       goto    under_1_25
                      00579 ;       movlw   0x3f
                      00580 ;       movwf   feed_a2d
                      00581 ;under_1_25
                      00582 ;       call    init_feed_pwm
010A   290C           00583         goto    atcom
                      00584 
010B                  00585 at14sec
                      00586 ;       movf    feed_a2d,w
                      00587 ;       sublw   0x7f                    ; if input < 2.5V (no borrow), power feed motor to pot
                      00588 ;       btfsc   STATUS,C                ; else force to 2.5V for 1 sec, then set to pot
                      00589 ;       goto    under_2_5
                      00590 ;       movlw   0x7f
                      00591 ;       movwf   feed_a2d
                      00592 ;under_2_5
                      00593 ;       call    init_feed_pwm
010B   290C           00594         goto    atcom
                      00595 
                      00596 
                      00597 
010C                  00598 atcom:
010C   2847           00599         goto    idle
                      00600 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010D                  00601 at15sec:
                      00602 ; if feed motor a2d input > 1.0V, enable feed motor to pot
010D   0AAA           00603         incf    feed_inited,f           ; enable feed motor if input > 1.0V
010E   0AB6           00604         incf    init_done,f             ; set initialization done flag
010F   2847           00605         goto    idle                    ; goto main idle loop
                      00606 
0110                  00607 sec0init:
                      00608         ; init usart
0110   1683           00609         bsf     STATUS,RP0              ; goto bank 1
                      00610 ;       movlw   0xff                    ; 1200 baud
0111   3081           00611         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0112   0099           00612         movwf   SPBRG
0113   3020           00613         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0114   0098           00614         movwf   TXSTA                   ; asynchronous mode, low speed mode
0115   1283           00615         bcf     STATUS,RP0              ; goto bank 0
0116   3090           00616         movlw   0x90                    ; 8-bit receive, receiver enabled
0117   0098           00617         movwf   RCSTA                   ; serial port enabled
                      00618 
0118   25AF           00619         call    usart_off               ; turn off usart, disable beep
                      00620 
                      00621 ;       movlw   0x0f                    ; change to 0x0d - don't check feed motor
0119   300D           00622         movlw   0x0d
011A   00CC           00623         movwf   rbif_bits               ; check all motor errors
011B   0181           00624         clrf    TMR0
011C   01B3           00625         clrf    a2d_chan
011D   2320           00626         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
011E   00B8           00627         movwf   spin_a2d                ; save value
011F   3C8F           00628         sublw   0x8f                    ; if spin_a2d < 143
0120   308F           00629         movlw   0x8f
0121   1803           00630         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0122   00B8           00631         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0123   0838           00632         movf    spin_a2d,w              ; 
0124   3E06           00633         addlw   6       
0125   30FA           00634         movlw   0xfa                    ; if spin_a2d > 250
0126   1803           00635         btfsc   STATUS,C                ; 
0127   00B8           00636         movwf   spin_a2d                ;  spin_a2d = 250
                      00637 
0128   3001           00638         movlw   1
0129   00B3           00639         movwf   a2d_chan
012A   2320           00640         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
012B   00B9           00641         movwf   spd_a2d
012C   3C8F           00642         sublw   0x8f                    ; if speed_a2d < 143
012D   308F           00643         movlw   0x8f
012E   1803           00644         btfsc   STATUS,C                ;  skip if borrow - speed_a2d > 143
012F   00B9           00645         movwf   spd_a2d                 ;  if speed_a2d < 143, speed_a2d = 143
0130   0839           00646         movf    spd_a2d,w               ; 
0131   3E06           00647         addlw   6       
0132   30FA           00648         movlw   0xfa                    ; if spd_a2d > 250
0133   1803           00649         btfsc   STATUS,C                ; 
0134   00B9           00650         movwf   spd_a2d                 ;  spd_a2d = 250
                      00651 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0135   3002           00652         movlw   2
0136   00B3           00653         movwf   a2d_chan
0137   2320           00654         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00655 ;       movlw   0xff                    ; SIM - force battery ok
0138   00BA           00656         movwf   bat_a2d         
0139   3003           00657         movlw   3
013A   00B3           00658         movwf   a2d_chan
013B   2320           00659         call    acq_a2d                 ; acquire chan3 a2d - feed rate
013C   00BB           00660         movwf   feed_a2d
013D   3C14           00661         sublw   0x14                    ; 20 - feed_a2d
013E   1C03           00662         btfss   STATUS,C                ;  skip if no borrow - feed_a2d < 20
013F   2945           00663         goto    feed_ok
0140   083B           00664         movf    feed_a2d,w
0141   3C0F           00665         sublw   0x0f                    ; 15 - feed_a2d
0142   3014           00666         movlw   0x14
0143   1C03           00667         btfss   STATUS,C                ;  skip if no borrow - feed _a2d < 11
0144   00BB           00668         movwf   feed_a2d                ;  if 15 < feed_a2d < 20, speed_a2d = 20
0145                  00669 feed_ok
                      00670 
0145   3004           00671         movlw   4
0146   00B3           00672         movwf   a2d_chan
0147   2320           00673         call    acq_a2d                 ; acquire chan4 a2d - sweep enable
0148   00BC           00674         movwf   sweep_a2d
                      00675         
                      00676 ;       btfsc   PORTB,0                 ;MJZ COMMENTED THIS LINE
                      00677 ;       goto    power_is_off            ; if RB0 is set, power switch is off    ;MJZ COMMENTED THIS LINE
0149   1A06           00678         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
014A   2C4C           00679         goto    power_is_off    ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
                      00680 
014B   083A           00681         movf    bat_a2d,w               ; get battery level
                      00682 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - bat_a2d)
014C   3C84           00683         sublw   0x84                    ; at power on, battery must be at least 2.6V to power up motors
014D   1803           00684         btfsc   STATUS,C                ;    skip if borrow (> 2.6V)    ;MJZ DEBUG, COMMENTED THIS LINE
                      00685 ;       btfss   STATUS,C                ;MJZ DEBUG, ADDED THIS LINE FOR SIMULATION TO GET PAST NO BATTER
                            Y INPUT
014E   2CEA           00686         goto    bat_dead                ;  battery exhausted, shut down all motors
014F   1607           00687         bsf     PORTC,ELEV_EN           ; else enable elevation motor
0150   0186           00688         clrf    PORTB                   ; on 1st power up, getting motor error
0151   018B           00689         clrf    INTCON                  ;  so make sure conditions are cleared
0152   01CD           00690         clrf    sweep_is_on             ; clear sweep motor on flag
0153   01D5           00691         clrf    linesw_toggle   ;MJZ CLEAR 2-LINE SWITCH TOGGLE BYTE
0154   250B           00692         call    init_bat_level
                      00693 ; sweep motor control
0155   0AAB           00694         incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00695 
0156   1623           00696         bsf     pwr_on_code,NOT_TO      ; ignore watchdog timeout reset
0157   0823           00697         movf    pwr_on_code,w           ; change bits to code : 0 = pwr on reset, 
                      00698                                         ;                       1= BOR, 2=wdt, 3=reset
0158   00A2           00699         movwf   temp
0159   01A3           00700         clrf    pwr_on_code
015A   1CA2           00701         btfss   temp,NOT_POR
015B   2966           00702         goto    pwr_on_reset
015C   0AA3           00703         incf    pwr_on_code,f
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

015D   1C22           00704         btfss   temp,NOT_BOR
015E   2962           00705         goto    npwr_on_reset
015F   0AA3           00706         incf    pwr_on_code,f
0160   1A22           00707         btfsc   temp,NOT_TO
0161   0AA3           00708         incf    pwr_on_code,f
0162                  00709 npwr_on_reset:                          ; not power on reset (and not watchdog timeout)
0162   3006           00710         movlw   6
0163   00C2           00711         movwf   flash_code
0164   24D8           00712         call    flash_error
0165   2962           00713         goto    npwr_on_reset
                      00714 
0166                  00715 pwr_on_reset:
                      00716 
0166   01D0           00717         clrf    remote_toggle           ; feed and sweep toggle are both off
0167   16D0           00718         bsf     remote_toggle,REMOTE_BIT        ; remote switch is off
0168   01D1           00719         clrf    remote_block            ; blocking of remote xmitter is off
0169   01D2           00720         clrf    FF_count                ; no FF's to send
016A   01D4           00721         clrf    beep_count
                      00722         
016B   0008           00723         return
                      00724 
016C                  00725 tick0:
016C   01B3           00726         clrf    a2d_chan
016D   2320           00727         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
016E   00B8           00728         movwf   spin_a2d                ; save value
016F   3C8F           00729         sublw   0x8f                    ; if spin_a2d < 143
0170   308F           00730         movlw   0x8f
0171   1803           00731         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0172   00B8           00732         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0173   0838           00733         movf    spin_a2d,w              ; 
0174   3E06           00734         addlw   6       
0175   30FA           00735         movlw   0xfa                    ; if spin_a2d > 250
0176   1803           00736         btfsc   STATUS,C                ; 
0177   00B8           00737         movwf   spin_a2d                ;  spin_a2d = 250
0178   2847           00738         goto    idle
                      00739 
0179                  00740 tick1:
0179   3001           00741         movlw   1
017A   00B3           00742         movwf   a2d_chan
017B   2320           00743         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
                      00744 ;       movlw   0xfa                    ; SIM - force speed max
017C   00B9           00745         movwf   spd_a2d
                      00746 ; 08/07/09 start
                      00747 ;       sublw   0x8f                    ; if spd_a2d < 143, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00748 ;       movlw   0x8f                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
                      00749 ;       sublw   0x98                    ; if spd_a2d < 152, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00750 ;       movlw   0x98                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
017D   3C8F           00751         sublw   0x8f
017E   308F           00752         movlw   0x8f
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00753 ; 08/07/09 end
017F   1803           00754         btfsc   STATUS,C                ;  skip if borrow - spd_a2d > 143
0180   00B9           00755         movwf   spd_a2d                 ;  if spd_a2d < 143, spd_a2d = 143
0181   0839           00756         movf    spd_a2d,w               ; 
                      00757 ; 08/07/09 start
0182   3E06           00758         addlw   6       
0183   30FA           00759         movlw   0xfa                    ; if spd_a2d > 250
0184   1803           00760         btfsc   STATUS,C                ; 
0185   00B9           00761         movwf   spd_a2d                 ;  spd_a2d = 250
                      00762 ;       addlw   0x20    
                      00763 ;       movlw   0xe0                    ; if spd_a2d > 224, approx 85% of original max of 250
                      00764 ;       btfsc   STATUS,C                ; 
                      00765 ;       movwf   spd_a2d                 ;  spd_a2d = 224
                      00766 ; 08/07/09 end
0186   2847           00767         goto    idle
                      00768 
0187                  00769 tick2:
0187   3002           00770         movlw   2
0188   00B3           00771         movwf   a2d_chan
0189   2320           00772         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00773 ;       movlw   0xff                    ; SIM - force battery ok
018A   00BA           00774         movwf   bat_a2d         
                      00775 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
                      00776 ;       btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V )
                      00777 ;       goto    bat_dead                ;  battery exhausted, shut down all motors
                      00778         ; update battery led here if battery level changed
                      00779 
018B   2847           00780         goto    idle
                      00781 
018C                  00782 tick3:
018C   3003           00783         movlw   3
018D   00B3           00784         movwf   a2d_chan
018E   2320           00785         call    acq_a2d                         ; acquire chan3 a2d - feed rate
                      00786 ;       movlw   0xff                            ; SIM - force feed ok
018F   00BB           00787         movwf   feed_a2d
0190   3C14           00788         sublw   0x14                            ; 20 - feed_a2d
0191   1C03           00789         btfss   STATUS,C                        ; skip if no borrow - feed_a2d < 20
                      00790 ;       goto    feed_ok1                        ; MJZ COMMENTED THIS LINE
0192   2999           00791         goto    chk_feed_rate_type      ; MJZ ADDED LINE, IF > 20, CHECK IF MUST RESTRICT MAXIMUM FEED R
                            ATE FOR 2-LINE MODE
0193   083B           00792         movf    feed_a2d,w
0194   3C0F           00793         sublw   0x0f                            ; 15 - feed_a2d
0195   3014           00794         movlw   0x14
0196   1C03           00795         btfss   STATUS,C                        ; skip if no borrow - feed _a2d < 11
0197   00BB           00796         movwf   feed_a2d                        ; if 17 < feed_a2d < 20, speed_a2d = 20
0198   29A1           00797         goto    feed_ok1                        ; MJZ ADDED LINE
                      00798 ;feed_ok1                                               ; MJZ COMMENTED THIS LINE
                      00799 ;       goto    idle                            ; MJZ COMMENTED THIS LINE
0199                  00800 chk_feed_rate_type:                             ; MJZ ADDED LINE
0199   1C57           00801         btfss   feed_rate_type,0        ; MJZ ADDED LINE, IF SET, MUST RESTRICT MAXIMUM FEED RATE FOR 2-
                            LINE MODE
019A   29A1           00802         goto    feed_ok1                        ; MJZ ADDED LINE
019B   083B           00803         movf    feed_a2d,w                      ; MJZ ADDED LINE
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00804 ; CS019B06 start
                      00805 ;       sublw   0x57                            ; MJZ ADDED LINE, MAXIMUM FEED RATE FOR 2-LINE MODE
019C   3CC8           00806         sublw   0xc8                            ; MJZ ADDED LINE, MAXIMUM FEED RATE FOR 2-LINE MODE
                      00807 ; CS019B06 end
019D   1803           00808         btfsc   STATUS,C                        ; MJZ ADDED LINE, SKIP IF BORROW, IF FEED RATE HIGHER TH
                            AN 0X57 (first try was 0x40)
019E   29A1           00809         goto    feed_ok1                        ; MJZ ADDED LINE, OK IF FEED RATE ALREADY LESS THAN 0X57
                      00810 ; CS019B06 start
                      00811 ;       movlw   0x57                            ; MJZ ADDED LINE
019F   30C8           00812         movlw   0xc8                            ; MJZ ADDED LINE        a little more than 3.5 seconds b
                            etween balls
                      00813 ; CS019B06 end
01A0   00BB           00814         movwf   feed_a2d                        ; MJZ ADDED LINE, RESTRICT FEED RATE TO 0X57 (first try 
                            was 0x40) MAXIMUM FOR 2-LINE MODE
01A1                  00815 feed_ok1:                                               ; MJZ ADDED LINE
01A1   2847           00816         goto idle                                       ; MJZ ADDED LINE
                      00817 
01A2                  00818 tick4:
01A2   3004           00819         movlw   4
01A3   00B3           00820         movwf   a2d_chan
01A4   2320           00821         call    acq_a2d                         ; acquire chan4 a2d - sweep enable
01A5   00BC           00822         movwf   sweep_a2d
01A6   22FE           00823         call    update_remote           ; check if remote enable switch had changed
01A7   2847           00824         goto    idle
                      00825 
01A8                  00826 tick5:
01A8   233F           00827         call    calc_bot_pwm
01A9   23C9           00828         call    calc_top_pwm
01AA   2847           00829         goto    idle
                      00830 
01AB                  00831 tick6:
01AB   21B2           00832         call    update_top_pwm
                      00833 ;       call    update_top_pwm
                      00834 ;       call    update_bot_pwm
01AC   21CD           00835         call    update_bot_pwm
01AD   2847           00836         goto    idle
                      00837 
01AE                  00838 tick7:
01AE   21E8           00839         call    update_feed_pwm
01AF   22E7           00840         call    update_sweep
                      00841 ;       call    update_bat_led
01B0   253D           00842         call    record_bat_level
01B1   2847           00843         goto    idle
                      00844 
                      00845 
01B2                  00846 update_top_pwm:
01B2   0B28           00847         decfsz  top_inited,w            ; if TOP MOTOR PWM inited,
                      00848 ;       goto    upd_exit                ; 06/09/05 MJZ commented this line, see next line
01B3   262A           00849         call    top_not_inited  ; 06/09/05 MJZ added this line, at power-on, ramp up top serve motor reg
                            ardless of speed pot
01B4   0825           00850         movf    c_top_pwm,w             ;  load current top pwm value into W
01B5   0224           00851         subwf   t_top_pwm,w             ;  W = (target - current)
01B6   1903           00852         btfsc   STATUS,Z                ;  if current top pwm value equal target top pwm value
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B7   29CC           00853         goto    upd_exit                ;   done
01B8   1C03           00854         btfss   STATUS,C                ;  if current top pwm value < than target ( borrow cleared)
01B9   29C2           00855         goto    dec_top                 ;       (goto dec_top if borrow set)
01BA   39F8           00856         andlw   0xf8                    ;  if delta < 8
01BB   1D03           00857         btfss   STATUS,Z
01BC   29BF           00858         goto    inc_top_by_8
01BD   0A25           00859         incf    c_top_pwm,w             ;   incr top pwm value and save to W
01BE   29CA           00860         goto    set_top
01BF                  00861 inc_top_by_8:                           ; else incr top pwm value by 8
                      00862 ;       movlw   8
                      00863 ;       btfss   init_done,0             ;      if init_done flag is set
01BF   3004           00864         movlw   4                       ;      else inc by 4
01C0   0725           00865         addwf   c_top_pwm,w
01C1   29CA           00866         goto    set_top
01C2                  00867 dec_top:
01C2   3C00           00868         sublw   0                       ; figure out delta to decrement
01C3   39F8           00869         andlw   0xf8                    ; if delta < 8
01C4   1D03           00870         btfss   STATUS,Z
01C5   29C8           00871         goto    dec_top_by_8
01C6   0325           00872         decf    c_top_pwm,w             ;  dec top pwm value and save to W
01C7   29CA           00873         goto    set_top
01C8                  00874 dec_top_by_8
                      00875 ;       movlw   8
                      00876 ;       btfss   init_done,0             ; if init_done flag is not set
01C8   3004           00877         movlw   4                       ;      dec by 4
01C9   0225           00878         subwf   c_top_pwm,w             ; else dec top pwm value by 8
01CA                  00879 set_top:
01CA   00A5           00880         movwf   c_top_pwm               ;  save current top pwm value
01CB   0095           00881         movwf   CCPR1L                  ;  write new duty cycle value to PWM module 1
01CC                  00882 upd_exit:
01CC   0008           00883         return
                      00884 
01CD                  00885 update_bot_pwm:                         ; check if bottom pwm duty cycle need updating
01CD   0B29           00886         decfsz  bot_inited,w            ; if BOTTOM MOTOR PWM inited,
                      00887 ;       goto    update_done             ; 06/15/05 MJZ change, see next line
01CE   262D           00888         call    bot_not_inited  ; 06/15/05 MJZ change for ramping up bottom serve motor at power-on
01CF   0827           00889         movf    c_bot_pwm,w             ;  load current bottom pwm value into W
01D0   0226           00890         subwf   t_bot_pwm,w             ;  W = target - current
01D1   1903           00891         btfsc   STATUS,Z                ;  if current bottom pwm value = target bottom pwm value
01D2   29E7           00892         goto    update_done             ;   goto exit
01D3   1C03           00893         btfss   STATUS,C                ;  if current bottom pwm value < target ( no borrow)
01D4   29DD           00894         goto    dec_bot                 ; 
01D5   39F8           00895         andlw   0xf8                    ;  if delta < 8
01D6   1D03           00896         btfss   STATUS,Z
01D7   29DA           00897         goto    inc_bot_by_8
01D8   0A27           00898         incf    c_bot_pwm,w             ;   incr bottom pwm value and save to W
01D9   29E5           00899         goto    set_bot
01DA                  00900 inc_bot_by_8:
                      00901 ;       movlw   8                       ; else inc bot pwm value by 8
                      00902 ;       btfss   init_done,0             ;      if init_done flag is set
01DA   3004           00903         movlw   4                       ;      else inc by 4
01DB   0727           00904         addwf   c_bot_pwm,w
01DC   29E5           00905         goto    set_bot
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00906 
01DD                  00907 dec_bot:
01DD   3C00           00908         sublw   0                       ; figure out delta to decr
01DE   39F8           00909         andlw   0xf8                    ; if delta < 8
01DF   1D03           00910         btfss   STATUS,Z
01E0   29E3           00911         goto    dec_bot_by_8
01E1   0327           00912         decf    c_bot_pwm,w             ;  dec bottom pwm value and save to W
01E2   29E5           00913         goto    set_bot
01E3                  00914 dec_bot_by_8
                      00915 ;       movlw   8                       ; else dec bot pwm value by 8
                      00916 ;       btfss   init_done,0             ;      if init_done flag is set
01E3   3004           00917         movlw   4                       ;      else dec by 4
01E4   0227           00918         subwf   c_bot_pwm,w
01E5                  00919 set_bot:
01E5   00A7           00920         movwf   c_bot_pwm               ;  save current bottom pwm value
01E6   009B           00921         movwf   CCPR2L                  ;  write new duty cycle value to PWM module 2
01E7                  00922 update_done:
01E7   0008           00923         return
                      00924 
                      00925 ; if soft_pwm == 0
                      00926 ;   if input >= 1.0 volt, enable software pwm
                      00927 ;   if input < 1.0 volt, do nothing
                      00928 ; if soft_pwm == 1
                      00929 ;   if input < 1.0 volt, soft_pwm = 0 and disable software pwm
                      00930 ;   if input > 1.0, adjust pwmdesired
                      00931 ; check a2d of feed control
01E8                  00932 update_feed_pwm:
01E8   0B2A           00933         decfsz  feed_inited,w
01E9   2ACD           00934         goto    chk_feed_xit
01EA   1AD0           00935         btfsc   remote_toggle,REMOTE_BIT ; if remote switch is on
01EB   29EE           00936         goto    no_remote_feed
01EC   1C50           00937         btfss   remote_toggle,FEED_BIT  ;    and feed toggle is off
01ED   29F2           00938         goto    feed_off                ;        disable feed
01EE                  00939 no_remote_feed:
01EE   083B           00940         movf    feed_a2d,w
01EF   3C13           00941         sublw   0x13                    ; if input < 0.4V (no borrow)
01F0   1C03           00942         btfss   STATUS,C
01F1   29FB           00943         goto    over1v
01F2                  00944 feed_off:
01F2   0B37           00945         decfsz  soft_pwm,w              ;  and soft_pwm was on
01F3   2ACD           00946         goto    chk_feed_xit
                      00947         ; disable software pwm
01F4   138B           00948         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
01F5   01B7           00949         clrf    soft_pwm
01F6   01B0           00950         clrf    pwmdesired
01F7   1007           00951         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
01F8   11C3           00952         bcf     led_bits,FEED_LED
01F9   1186           00953         bcf     PORTB,FEED_LED          ;  turn feed led off
01FA   2ACD           00954         goto    chk_feed_xit
01FB                  00955 over1v
01FB   0B37           00956         decfsz  soft_pwm,w              ; if soft_pwm was off
01FC   29FE           00957         goto    enable_feed
01FD   2A07           00958         goto    update_feed
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01FE                  00959 enable_feed:
                      00960         ; enable software pwm
01FE   1586           00961         bsf     PORTB,FEED_LED          ; turn feed led on
01FF   15C3           00962         bsf     led_bits,FEED_LED
0200   0181           00963         clrf    TMR0                    ; reset timer 0
0201   30A0           00964         movlw   INTCONVAL               ; enable timer0 intr
0202   008B           00965         movwf   INTCON
0203   0AB7           00966         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
                      00967 ; CS019B06 start
                      00968 ;       movlw   0x43                    ; got straight to 26% duty cycle
0204   302E           00969         movlw   0x2e                    ; got straight to 18% duty cycle
                      00970 ; CS019B06 end
0205   00BF           00971         movwf   delta_s
0206   2ACB           00972         goto    set_pwm_value
                      00973 
0207                  00974 update_feed:                            ; check if feed motor pwm duty cycle need updating
                      00975 
0207   3007           00976         movlw   0x07                    ; if feed_a2d > 248
0208   073B           00977         addwf   feed_a2d,W              ;
0209   1C03           00978         btfss   STATUS,C                ; and
020A   2A12           00979         goto    calc_feed
020B   3020           00980         movlw   0x20                    ;  if pwmdesired > 223
020C   0730           00981         addwf   pwmdesired,W            ;
020D   1C03           00982         btfss   STATUS,C                ;  
020E   2A12           00983         goto    calc_feed
020F   0F30           00984         incfsz  pwmdesired,w
0210   00B0           00985         movwf   pwmdesired
0211   2ACD           00986         goto    chk_feed_xit            ;  if > 233, step up by one to 255
                      00987         
0212                  00988 calc_feed:
0212   3014           00989         movlw   0x14                    ; calc delta c
0213   023B           00990         subwf   feed_a2d,w
0214   00BE           00991         movwf   delta_c                 ; delta_c = feed_a2d - 20
                      00992 ; CS019B06 start
                      00993 ;       addlw   0x43                    ;  W = 67 + delta_c
                      00994 ;       addlw   0x3a                    ;  W =  + delta_c       measured 14 sec feed rate, 70 balls, 23%
                             duty cycle, pot at 12 setting = 0.89V = 45 count
0215   3E2E           00995         addlw   0x2e
                      00996 ; CS019B06 end
                      00997 #ifdef notdef
                      00998         movwf   delta_s                 ;    save in delta_s
                      00999         bcf     STATUS,C
                      01000         rrf     delta_c,F               ;  ( div by 2 )
                      01001         bcf     STATUS,C
                      01002         rrf     delta_c,F               ;  ( div by 4 )
                      01003         movf    delta_c,W
                      01004         subwf   delta_s,F               ;         - delta_c / 4
                      01005         bcf     STATUS,C
                      01006         rrf     delta_c,F               ;  ( div by 8 )
                      01007         bcf     STATUS,C
                      01008         rrf     delta_c,F               ;  ( div by 16 )
                      01009         movf    delta_c,W
                      01010         addwf   delta_s,F               ;         + delta_c / 16
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01011         bcf     STATUS,C
                      01012         rrf     delta_c,F               ;  ( div by 32 )
                      01013         bcf     STATUS,C
                      01014         rrf     delta_c,W               ;  ( div by 64 )
                      01015         subwf   delta_s,W               ;         - delta_c / 64
                      01016 
                      01017         movwf   delta_s                 ; delta_s is now new feed pwm value
                      01018 #endif
                      01019 
                      01020 ; To compensate for non-linear voltage/speed curve, the pwm duty cycle is fine tuned for each increment 
                            on the feed rate dial.
0216   083B           01021         movf    feed_a2d,w
0217   1003           01022         bcf             STATUS,C
0218   3CE8           01023         sublw   0xe8                    ; 4.55V - feed_a2d
0219   1C03           01024         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 4.55V
021A   2A35           01025         goto    feed_0_2
021B   1003           01026         bcf             STATUS,C
021C   083B           01027         movf    feed_a2d,w
021D   3CBF           01028         sublw   0xbf                    ; 3.75V - feed_a2d
021E   1C03           01029         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 3.75V
021F   2A45           01030         goto    feed_2_4
0220   1003           01031         bcf             STATUS,C
0221   083B           01032         movf    feed_a2d,w
                      01033 ;       sublw   0xa6                    ; 3.25V - feed_a2d
0222   3CA0           01034         sublw   0xa0                    ; 3.15V - feed_a2d
0223   1C03           01035         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 3.25V
0224   2A50           01036         goto    feed_4_6
0225   1003           01037         bcf             STATUS,C
0226   083B           01038         movf    feed_a2d,w
0227   3C7A           01039         sublw   0x7a                    ; 2.4V - feed_a2d
0228   1C03           01040         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 2.4V
0229   2A62           01041         goto    feed_6_8
022A   1003           01042         bcf             STATUS,C
022B   083B           01043         movf    feed_a2d,w
022C   3C57           01044         sublw   0x57                    ; 1.7V - feed_a2d
022D   1C03           01045         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 1.7V
022E   2A80           01046         goto    feed_8_10
022F   1003           01047         bcf             STATUS,C
0230   083B           01048         movf    feed_a2d,w
0231   3C2E           01049         sublw   0x2e                    ; 0.9V - feed_a2d
0232   1C03           01050         btfss   STATUS,C                ; skip if no borrow - feed_a2d < 0.9V
0233   2A9E           01051         goto    feed_10_12
0234   2ABC           01052         goto    feed_12_off
0235                  01053 feed_0_2:                                       ; 4.55V - 5.00V pot, 65% - 100% duty cycle
0235   30A6           01054         movlw   0xa6                    ; 65% duty cycle, 0xff - 0xa6 = 89d range
0236   00BF           01055         movwf   delta_s
0237   30E8           01056         movlw   0xe8                    ; 4.55V, 0xff - 0xe8 = 23d range
0238   023B           01057         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0239   00BE           01058         movwf   delta_c
023A   1003           01059         bcf             STATUS,C
023B   0DBE           01060         rlf             delta_c,f               ; x2
023C   1003           01061         bcf             STATUS,C
023D   0D3E           01062         rlf             delta_c,w               ; x4
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023E   1003           01063         bcf             STATUS,C
023F   07BF           01064         addwf   delta_s,f               ; pot change x 4 = duty cycle change
0240   1C03           01065         btfss   STATUS,C
0241   2ABF           01066         goto    feed_end
0242   30FF           01067         movlw   0xff
0243   00BF           01068         movwf   delta_s
0244   2ABF           01069         goto    feed_end
0245                  01070 feed_2_4:                                       ; 3.75V - 4.55V pot, 40% - 65% duty cycle
0245   3066           01071         movlw   0x66                    ; 40% duty cycle, 0xa6 - 0x66 = 64d range
0246   00BF           01072         movwf   delta_s
0247   30BF           01073         movlw   0xbf                    ; 3.75V, 0xe8 - 0xbf = 41d range
0248   023B           01074         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0249   00BE           01075         movwf   delta_c
024A   1003           01076         bcf             STATUS,C
024B   0C3E           01077         rrf             delta_c,w               ; /2
024C   07BE           01078         addwf   delta_c,f               ; add half
024D   083E           01079         movf    delta_c,w
024E   07BF           01080         addwf   delta_s,f               ; pot change x 1.5 = duty cycle change
024F   2ABF           01081         goto    feed_end
                      01082 ;feed_4_6:                                      ; 3.25V - 3.75V pot, 31%-40% duty cycle
0250                  01083 feed_4_6:                                       ; 3.15V - 3.75V pot, 32%-40% duty cycle
                      01084 ;       movlw   0x4f                    ; 31% duty cycle, 0x66 - 0x4f = 23d range
0250   3051           01085         movlw   0x51                    ; 32% duty cycle, 0x66 - 0x51 = 21d range
0251   00BF           01086         movwf   delta_s
                      01087 ;       movlw   0xa6                    ; 3.25V, 0xbf - 0xa6 = 25d range
0252   30A0           01088         movlw   0xa0                    ; 3.15V, 0xbf - 0xa0 = 32d range
0253   023B           01089         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0254   00BE           01090         movwf   delta_c
0255   1003           01091         bcf             STATUS,C
0256   0C3E           01092         rrf             delta_c,w               ; /2
0257   07BE           01093         addwf   delta_c,f               ; add half
0258   083E           01094         movf    delta_c,w
0259   07BF           01095         addwf   delta_s,f               ; pot change x 1.5 = duty cycle change
025A   1003           01096         bcf             STATUS,C
025B   3066           01097         movlw   0x66
025C   023F           01098         subwf   delta_s,w
025D   1C03           01099         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
025E   2ABF           01100         goto    feed_end                ; then ok
025F   3066           01101         movlw   0x66                    ; else fix to range maximum
0260   00BF           01102         movwf   delta_s 
0261   2ABF           01103         goto    feed_end
                      01104 ;feed_6_8:                                      ; 2.40V - 3.25V pot, 28%-31% duty cycle
0262                  01105 feed_6_8:                                       ; 2.40V - 3.15V pot, 28%-32% duty cycle
                      01106 ;       movlw   0x47                    ; 28% duty cycle, 0x4f - 0x47= 8d range
                      01107 ;       movlw   0x47                    ; 28% duty cycle, 0x51 - 0x47= 10d range
0262   3049           01108         movlw   0x49                    ; 29% duty cycle, 0x51 - 0x49= 8d range
0263   00BF           01109         movwf   delta_s
                      01110 ;       movlw   0x7a                    ; 2.40V, 0xa6 - 0x7a = 44d range
0264   307A           01111         movlw   0x7a                    ; 2.40V, 0xa0 - 0x7a = 38d range
0265   023B           01112         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0266   00BE           01113         movwf   delta_c
0267   1003           01114         bcf             STATUS,C
0268   0CBE           01115         rrf             delta_c,f               ; /2
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0269   1003           01116         bcf             STATUS,C
026A   0C3E           01117         rrf             delta_c,w               ; /4
026B   07BF           01118         addwf   delta_s,f               ; + 1/4
026C   1003           01119         bcf             STATUS,C
026D   0CBE           01120         rrf             delta_c,f               ; /8
026E   1003           01121         bcf             STATUS,C
026F   0CBE           01122         rrf             delta_c,f               ; /16
0270   1003           01123         bcf             STATUS,C
0271   0CBE           01124         rrf             delta_c,f               ; /32
0272   1003           01125         bcf             STATUS,C
0273   083E           01126         movf    delta_c,w
0274   02BF           01127         subwf   delta_s,f               ; - 1/32
0275   1003           01128         bcf             STATUS,C
0276   0C3E           01129         rrf             delta_c,w               ; /64
0277   02BF           01130         subwf   delta_s,f               ; - 1/64
0278   1003           01131         bcf             STATUS,C
0279   3051           01132         movlw   0x51
027A   023F           01133         subwf   delta_s,w
027B   1C03           01134         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
027C   2ABF           01135         goto    feed_end                ; then ok
027D   3051           01136         movlw   0x51                    ; else fix to range maximum
027E   00BF           01137         movwf   delta_s 
027F   2ABF           01138         goto    feed_end
                      01139 ;feed_8_10:                                     ; 1.70V - 2.40V pot, 26%-28% duty cycle
0280                  01140 feed_8_10:                                      ; 1.70V - 2.40V pot, 26%-29% duty cycle
                      01141 ;       movlw   0x40                    ; 25% duty cycle, 0x47 - 0x40 = 7d range
0280   3042           01142         movlw   0x42                    ; 26% duty cycle, 0x49 - 0x42 = 7d range
0281   00BF           01143         movwf   delta_s
0282   3057           01144         movlw   0x57                    ; 1.70V, 0x7a - 0x57 = 35d range
0283   023B           01145         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
0284   00BE           01146         movwf   delta_c
0285   1003           01147         bcf             STATUS,C
0286   0CBE           01148         rrf             delta_c,f               ; /2
0287   1003           01149         bcf             STATUS,C
0288   0C3E           01150         rrf             delta_c,w               ; /4
0289   07BF           01151         addwf   delta_s,f               ; + 1/4
028A   1003           01152         bcf             STATUS,C
028B   0CBE           01153         rrf             delta_c,f               ; /8
028C   1003           01154         bcf             STATUS,C
028D   0CBE           01155         rrf             delta_c,f               ; /16
028E   1003           01156         bcf             STATUS,C
028F   0CBE           01157         rrf             delta_c,f               ; /32
0290   1003           01158         bcf             STATUS,C
0291   083E           01159         movf    delta_c,w
0292   02BF           01160         subwf   delta_s,f               ; - 1/32
0293   1003           01161         bcf             STATUS,C
0294   0C3E           01162         rrf             delta_c,w               ; /64
0295   02BF           01163         subwf   delta_s,f               ; - 1/64
0296   1003           01164         bcf             STATUS,C
0297   3049           01165         movlw   0x49
0298   023F           01166         subwf   delta_s,w
0299   1C03           01167         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
029A   2ABF           01168         goto    feed_end                ; then ok
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

029B   3049           01169         movlw   0x49                    ; else fix to range maximum
029C   00BF           01170         movwf   delta_s 
029D   2ABF           01171         goto    feed_end
                      01172 ;feed_10_12:                            ; 0.90V - 1.70V pot, 23%-25% duty cycle
029E                  01173 feed_10_12:                                     ; 0.90V - 1.70V pot, 23%-26% duty cycle
                      01174 ;       movlw   0x3b                    ; 23% duty cycle, 0x40 - 0x3b = 5d range
029E   303B           01175         movlw   0x3b                    ; 23% duty cycle, 0x42 - 0x3b = 7d range
029F   00BF           01176         movwf   delta_s
02A0   302E           01177         movlw   0x2e                    ; 0.90V, 0x57 - 0x2e = 41d range
02A1   023B           01178         subwf   feed_a2d,w              ; amount pot setting is over this pot range minimum
02A2   00BE           01179         movwf   delta_c                 ; 
02A3   1003           01180         bcf             STATUS,C
02A4   0CBE           01181         rrf             delta_c,f               ; /2
02A5   1003           01182         bcf             STATUS,C
02A6   0C3E           01183         rrf             delta_c,w               ; /4
02A7   07BF           01184         addwf   delta_s,f               ; + 1/4
02A8   1003           01185         bcf             STATUS,C
02A9   0CBE           01186         rrf             delta_c,f               ; /8
02AA   1003           01187         bcf             STATUS,C
02AB   0CBE           01188         rrf             delta_c,f               ; /16
02AC   1003           01189         bcf             STATUS,C
02AD   083E           01190         movf    delta_c,w
02AE   02BF           01191         subwf   delta_s,f               ; - 1/16
02AF   1003           01192         bcf             STATUS,C
02B0   0CBE           01193         rrf             delta_c,f               ; /32
02B1   1003           01194         bcf             STATUS,C
02B2   083E           01195         movf    delta_c,w
02B3   02BF           01196         subwf   delta_s,f               ; - 1/32
02B4   1003           01197         bcf             STATUS,C
02B5   3042           01198         movlw   0x42
02B6   023F           01199         subwf   delta_s,w
02B7   1C03           01200         btfss   STATUS,C                ; if borrow, new duty cycle is less than this range maximum
02B8   2ABF           01201         goto    feed_end                ; then ok
02B9   3042           01202         movlw   0x42                    ; else fix to range maximum
02BA   00BF           01203         movwf   delta_s 
02BB   2ABF           01204         goto    feed_end
02BC                  01205 feed_12_off:
02BC   300E           01206         movlw   0x0e
02BD   073B           01207         addwf   feed_a2d,w
02BE   00BF           01208         movwf   delta_s
02BF                  01209 feed_end:
                      01210 ; CS019B06 end
                      01211 
02BF   0830           01212         movf    pwmdesired,w
02C0   023F           01213         subwf   delta_s,w               ; W = new pwm value - pwmdesired
02C1   1C03           01214         btfss   STATUS,C                ; skip if no borrow: new pwm value > pwmdesired
02C2   2ACB           01215         goto    set_pwm_value   ; new pwm value is smaller, ok to ramp dowm immediately
02C3   39FC           01216         andlw   0xfc                    ;
02C4   1903           01217         btfsc   STATUS,Z                ; if delta < 4
02C5   2ACB           01218         goto    set_pwm_value   ; set to new pwm value
02C6   3003           01219         movlw   3                               ; else incr pwmdesired by 3
02C7   1C36           01220         btfss   init_done,0             ; if not init_done, incr by 2
02C8   3002           01221         movlw   2
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C9   07B0           01222         addwf   pwmdesired,f
02CA   2ACD           01223         goto    chk_feed_xit
                      01224         
02CB                  01225 set_pwm_value
02CB   083F           01226         movf    delta_s,w
02CC   00B0           01227         movwf   pwmdesired              ; save current feed pwm value
02CD                  01228 chk_feed_xit:
02CD   0008           01229         return
                      01230 
                      01231 ; at 13 seconds, if pot > 25% duty cycle, init feed pwm to 25% duty cycle
                      01232 ; at 14 seconds, if pot > 50% duty cycle, init feed pwm to 50% duty cycle
02CE                  01233 init_feed_pwm:                          ; this gets called before feed_inited is set
02CE   083B           01234         movf    feed_a2d,w
02CF   3C20           01235         sublw   0x20                    ; if input < 0.4V (no borrow)
02D0   1C03           01236         btfss   STATUS,C
02D1   2ADB           01237         goto    over_pt4_v
02D2   0B37           01238         decfsz  soft_pwm,w              ;  and soft_pwm was on
02D3   2AE6           01239         goto    init_feed_xit
                      01240         ; disable software pwm
02D4   138B           01241         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
02D5   01B7           01242         clrf    soft_pwm
02D6   01B0           01243         clrf    pwmdesired
02D7   1007           01244         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
02D8   11C3           01245         bcf     led_bits,FEED_LED
02D9   1186           01246         bcf     PORTB,FEED_LED          ;  turn feed led off
02DA   2AE6           01247         goto    init_feed_xit
02DB                  01248 over_pt4_v
02DB   0B37           01249         decfsz  soft_pwm,w              ; if soft_pwm was off
02DC   2ADE           01250         goto    init_enable_feed
02DD   2AE4           01251         goto    init_update_feed
02DE                  01252 init_enable_feed:
                      01253         ; enable software pwm
02DE   1586           01254         bsf     PORTB,FEED_LED          ; turn feed led on
02DF   15C3           01255         bsf     led_bits,FEED_LED
02E0   0181           01256         clrf    TMR0                    ; reset timer 0
02E1   30A0           01257         movlw   INTCONVAL               ; enable timer0 intr
02E2   008B           01258         movwf   INTCON
02E3   0AB7           01259         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
02E4                  01260 init_update_feed:                               ; check if feed motor pwm duty cycle need updating
02E4   083B           01261         movf    feed_a2d,w              ; *** go straight to feed_a2d value
02E5   00B0           01262         movwf   pwmdesired              ; save current feed pwm value
02E6                  01263 init_feed_xit:
02E6   0008           01264         return
                      01265 
                      01266 
                      01267 
02E7                  01268 update_sweep:
                      01269 ; turn on/off sweep motor based on a2d
02E7   0B2B           01270         decfsz  sweep_inited,w          ; if sweep not inited exit
02E8   2AFA           01271         goto    sweep_exit
02E9   1ED0           01272         btfss   remote_toggle,REMOTE_BIT; if remote not enable,
02EA   2AFB           01273         goto    sweep_remote
02EB   083C           01274         movf    sweep_a2d,w
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01275 ;       sublw   0x33                    ;  if sweep switch < 1.0V (no borrow)
02EC   3C99           01276         sublw   0x99                    ;MJZ ADDED LINE, CHANGED TO < 3.0V TO TURN SWEEP ON REGARDLESS O
                            F WHICH RESISTOR DIVIDER CIRCUIT ACTIVATED
02ED   1C03           01277         btfss   STATUS,C
02EE   2AF6           01278         goto    sweep_off
02EF                  01279 sweep_on
02EF   184D           01280         btfsc   sweep_is_on,0           ;   if motor already enabled, exit
02F0   2AFA           01281         goto    sweep_exit
02F1   260B           01282         call    linesw_toggle_init      ;MJZ ADDED LINE, IF SWEEP MOTOR WAS JUST ENABLED, INIT LINESW_TO
                            GGLE TO MATCH 2-LINE SWITCH VALUE
02F2   1587           01283         bsf     PORTC,SWEEP_EN          ;    enable sweep motor
02F3   104C           01284         bcf     rbif_bits,0             ;    don't check for sweep motor error for 1 second     
02F4   0ACD           01285         incf    sweep_is_on,f
02F5   2AFA           01286         goto    sweep_exit1
02F6                  01287 sweep_off
02F6   1C4D           01288         btfss   sweep_is_on,0
02F7   2AFA           01289         goto    sweep_exit
02F8   1187           01290         bcf     PORTC,SWEEP_EN          ; else disable sweep motor
02F9   01CD           01291         clrf    sweep_is_on
02FA                  01292 sweep_exit1:
                      01293 ;       btfss   remote_toggle,REMOTE_BIT; if remote not enable,
                      01294 ;       goto    sweep_exit
                      01295 ;       movf    pwr_on_code,W           ;       if timeout or brown out
                      01296 ;       btfsc   STATUS,Z
                      01297 ;       goto    sweep_exit
                      01298 ;       movwf   flash_code              ;               flash the reset type code 2 time
                      01299 ;       call    flash_error
                      01300 ;       movf    pwr_on_code,W
                      01301 ;       movwf   flash_code
                      01302 ;       call    flash_error
                      01303 ;       bcf     led_bits,GREEN_LED
02FA                  01304 sweep_exit:
02FA   0008           01305         return
                      01306 
02FB                  01307 sweep_remote:                           ; remote switch on
02FB   1CD0           01308         btfss   remote_toggle,SWEEP_BIT ;  set SWEEP output based on SWEEP_BIT
02FC   2AF6           01309         goto    sweep_off
02FD   2AEF           01310         goto    sweep_on
                      01311 
                      01312 ; check if remote enable switch had changed
02FE                  01313 update_remote:
02FE   0B36           01314         decfsz  init_done,W             ; if init not done, don't bother
02FF   2B1C           01315         goto    update_rmxit
0300   0850           01316         movf    remote_toggle,W         ; pick up remote_toggle byte
0301   3920           01317         andlw   REMOTE_ON
0302   0607           01318         xorwf   PORTC,W                 ; exclusive or with PORTC
0303   3920           01319         andlw   REMOTE_ON               ; did REMOTE_ON change value
0304   1903           01320         btfsc   STATUS,Z                ; if no change, exit
0305   2B1C           01321         goto    update_rmxit
                      01322 ;       movlw   0x20
                      01323 ;       movwf   remote_block            ; flush usart
0306   3020           01324         movlw   REMOTE_ON
0307   06D0           01325         xorwf   remote_toggle,F
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0308   1AD0           01326         btfsc   remote_toggle,REMOTE_BIT ; if remote switch just turned on,
0309   2B1D           01327         goto    remote_off
                      01328 
                      01329 ;       call    usart_enable
030A   1683           01330         bsf     STATUS,RP0              ; goto bank 1
030B   3081           01331         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
030C   0099           01332         movwf   SPBRG
030D   3020           01333         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
030E   0098           01334         movwf   TXSTA                   ; asynchronous mode, low speed mode
030F   1283           01335         bcf     STATUS,RP0              ; goto bank 0
0310   3090           01336         movlw   0x90                    ; 8-bit receive, receiver enabled
0311   0098           01337         movwf   RCSTA                   ; serial port enabled
0312   081A           01338         movf    RCREG,W                 ; flush input data
0313   081A           01339         movf    RCREG,W                 ; flush input data
                      01340 
                      01341 ;       movlw   REMOTE_ON
                      01342 ;       iorlw   FEED_TOGGLE
                      01343 ;       movwf   remote_toggle           ; then set remote and feed toggles
0314   1450           01344         bsf     remote_toggle,FEED_BIT  ;   set feed toggle
0315   184D           01345         btfsc   sweep_is_on,0           ;      if sweep is on
0316   14D0           01346         bsf     remote_toggle,SWEEP_BIT ;         set sweep bit
0317   084D           01347         movf    sweep_is_on,W           ; copy sweep_is_on flag to last_sweep
0318   00D3           01348         movwf   last_sweep
0319   304B           01349         movlw   BLOCK_CNT-8             ; short beep
031A   00D1           01350         movwf   remote_block
031B   25A9           01351         call    usart_disable
031C                  01352 update_rmxit:
031C   0008           01353         return
031D                  01354 remote_off:
                      01355 ;       call    usart_off
031D   10D0           01356         bcf     remote_toggle,SWEEP_BIT ; turn off sweep_toggle
031E   2DAF           01357         goto    usart_off
031F   0008           01358         return
                      01359 ;
                      01360 ; acquire reading on analog channel
                      01361 ; enters: (a2d_chan) = chanel number
                      01362 ; exits: W = result
0320                  01363 acq_a2d
0320   0EB3           01364         swapf   a2d_chan,F              ; move channel number
0321   1003           01365         bcf     STATUS,C                ;  clear carry bit before rotate
0322   0C33           01366         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
0323   3881           01367         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
0324   009F           01368         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
                      01369                                         ;;acquisition delay - incr channel number for next op
0325   0EB3           01370         swapf   a2d_chan,F              ; restore channel number
0326   0AB3           01371         incf    a2d_chan,F              ; incr channel number
0327   3005           01372         movlw   5                       ; mod 5 - only channels 0-4 valid
0328   0233           01373         subwf   a2d_chan,W
0329   1903           01374         btfsc   STATUS,Z
032A   00B3           01375         movwf   a2d_chan                ;      wrap to 0 if next chan is 5
                      01376 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

032B   3018           01377         movlw   0x18                    ; need 19.6us acquisition time
032C   00C8           01378         movwf   delay
032D                  01379 delaylp:
032D   0BC8           01380         decfsz  delay,f
032E   2B2D           01381         goto    delaylp
032F                  01382 WaitNoInt
032F   0801           01383         movf    TMR0,W                  ; waiting till enough time
0330   3CD0           01384         sublw   0d0h                    ; for one conversion before start
0331   1C03           01385         btfss   STATUS,C                ; of the next timer interrupt
0332   2B2F           01386         goto    WaitNoInt               ; (Conv can be disturbed by an intr)
0333   151F           01387         bsf     ADCON0,GO               ; start ADC
0334                  01388 WaitAdc
0334   191F           01389         btfsc   ADCON0,GO               ; waiting until ACDC...
0335   2B34           01390         goto    WaitAdc                 ; ... is ready
                      01391 ; result is waiting in ADRES, but first select next channel and start acquisition
0336   0EB3           01392         swapf   a2d_chan,F              ; restore channel number
0337   1003           01393         bcf     STATUS,C                ;  clear carry bit before rotate
0338   0C33           01394         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
0339   3881           01395         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
033A   009F           01396         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
033B   0EB3           01397         swapf   a2d_chan,F              ; restore channel number
                      01398 
033C   081E           01399         movf    ADRES,W                 ; put result into W-reg
033D   0064           01400         clrwdt                          ; clear watch dog timer
033E   0008           01401         return
                      01402 
                      01403 ; calculate desired bottom pwm
033F                  01404 calc_bot_pwm
                      01405 ; first calculate speed based on no spin
                      01406 ; 08/07/09 start
                      01407 ;       movlw   0x8f
033F   308F           01408         movlw   0x8f                    ; minimum speed pot read allowed
                      01409 ; 08/07/09 end
0340   0239           01410         subwf   spd_a2d,w
0341   00BF           01411         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01412 ; 08/07/09 start
                      01413 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01414 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
0342   3E4A           01415         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 72/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01416 ; 08/07/09 end
0343   00BD           01417         movwf   calc_pwm
0344   1003           01418         bcf     STATUS,C
0345   0CBF           01419         rrf     delta_s,F               ; (div by 2)
                      01420 ; 08/07/09 start
                      01421 ;       movf    delta_s,w
                      01422 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01423 ; 08/07/09 end
0346   1003           01424         bcf     STATUS,C
0347   0CBF           01425         rrf     delta_s,f               ; (div by 4)
0348   083F           01426         movf    delta_s,w
0349   07BD           01427         addwf   calc_pwm,F              ;               + delta_s / 4
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

034A   1003           01428         bcf     STATUS,C
034B   0CBF           01429         rrf     delta_s,F               ; (div by 8)
                      01430 ; 08/07/09 start
034C   083F           01431         movf    delta_s,w
034D   07BD           01432         addwf   calc_pwm,F              ;               + delta_s / 8
                      01433 ; 08/07/09 end
034E   1003           01434         bcf     STATUS,C
034F   0CBF           01435         rrf     delta_s,F               ; (div by 16)
                      01436 ; 08/07/09 start
0350   02BD           01437         subwf   calc_pwm,f              ;               - delta_s / 16
                      01438 ; 08/07/09 end
                      01439 ;       bcf     STATUS,C
                      01440 ;       rrf     delta_s,W               ; (div by 32)
                      01441 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01442 ; 08/07/09 end
                      01443 ; now adjust based on spin
0351   0838           01444         movf    spin_a2d,w
0352   3CBA           01445         sublw   0xba                    ; 186 - spin_a2d
0353   1903           01446         btfsc   STATUS,Z                ; if 186 <= spin_a2d <= 191, then no spin
0354   2BC1           01447         goto    no_spin1
0355   1803           01448         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
0356   2B5B           01449         goto    adjust_backspin1
0357   3E05           01450         addlw   5                       ;
0358   1803           01451         btfsc   STATUS,C                ; if spin_a2d is 187,188,189,190 or 191, then no spin
0359   2BC1           01452         goto    no_spin1
035A   2B99           01453         goto    adjust_topspin1
035B                  01454 adjust_backspin1:                       ; if spin_a2d < 186 then we have back spin
035B   30C5           01455         movlw   0xc5
035C   0239           01456         subwf   spd_a2d,W               ; speed_a2d - 197
035D   1803           01457         btfsc   STATUS,C                ; skip if borrow (slow speed)
035E   2B77           01458         goto    high_spd1
035F   308F           01459         movlw   0x8f                    ; slow speed
0360   0239           01460         subwf   spd_a2d,w
0361   00BF           01461         movwf   delta_s                 ; delta_s = speed_a2d - 143
0362   00C9           01462         movwf   mult1                   ; mult1 =       delta_s
0363   1003           01463         bcf     STATUS,C
0364   0CBF           01464         rrf     delta_s,f               ; (div by 2)
0365   1003           01465         bcf     STATUS,C
0366   0CBF           01466         rrf     delta_s,f               ; (div by 4)
0367   083F           01467         movf    delta_s,w
0368   07C9           01468         addwf   mult1,f                 ;               + delta_s / 4
0369   1003           01469         bcf     STATUS,C
036A   0CBF           01470         rrf     delta_s,f               ; (div by 8)
036B   1003           01471         bcf     STATUS,C
036C   0CBF           01472         rrf     delta_s,f               ; (div by 16)
036D   083F           01473         movf    delta_s,w
036E   02C9           01474         subwf   mult1,f                 ;               - delta_s / 16
036F   1003           01475         bcf     STATUS,C
0370   0C3F           01476         rrf     delta_s,w               ; (div by 32)
0371   07C9           01477         addwf   mult1,f                 ;               + delta_s / 32
0372   300B           01478         movlw   0x0b
0373   00CA           01479         movwf   mult2
0374   2573           01480         call    mult_sub                ; W = 11 * mult1 / 64
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0375   00C9           01481         movwf   mult1                   ; mult1 is maxspin for this speed
0376   2B8F           01482         goto    adjust_bs1
0377                  01483 high_spd1:
0377   30C5           01484         movlw   0xc5
0378   0239           01485         subwf   spd_a2d,W               ; speed_a2d - 197
0379   00BF           01486         movwf   delta_s                 ; delta_s = speed_a2d - 197
037A   00C9           01487         movwf   mult1
037B   1003           01488         bcf     STATUS,C
037C   0CBF           01489         rrf     delta_s,f               ; (div by 2)
037D   1003           01490         bcf     STATUS,C
037E   0CBF           01491         rrf     delta_s,f               ; (div by 4)
037F   083F           01492         movf    delta_s,w
0380   07C9           01493         addwf   mult1,f                 ;               + delta_s / 4
0381   1003           01494         bcf     STATUS,C
0382   0CBF           01495         rrf     delta_s,f               ; (div by 8)
0383   1003           01496         bcf     STATUS,C
0384   0CBF           01497         rrf     delta_s,f               ; (div by 16)
0385   083F           01498         movf    delta_s,w
0386   02C9           01499         subwf   mult1,f                 ;               - delta_s / 16
0387   1003           01500         bcf     STATUS,C
0388   0C3F           01501         rrf     delta_s,w               ; (div by 32)
0389   07C9           01502         addwf   mult1,f                 ;               + delta_s / 32
038A   300B           01503         movlw   0x0b
038B   00CA           01504         movwf   mult2
038C   2573           01505         call    mult_sub                ; W = 11 * mult1 / 64
038D   3C0B           01506         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
038E   00C9           01507         movwf   mult1                   ; mul1 is maxspin for this speed
038F                  01508 adjust_bs1:
038F   0838           01509         movf    spin_a2d,w
0390   3CBA           01510         sublw   0xba                    ; 186 - spin_a2d
0391   00BF           01511         movwf   delta_s                 ; amount of back spin desired (delta back_spin)
0392   00CA           01512         movwf   mult2                   ; max delta spin = delta_s
0393   1003           01513         bcf     STATUS,C
0394   0C3F           01514         rrf     delta_s,w               ; (div by 2)
0395   07CA           01515         addwf   mult2,f                 ;               + delta_s / 2
0396   2573           01516         call    mult_sub                ; W = maxspin * (delta back_spin) / 64
0397   07BD           01517         addwf   calc_pwm,f              ; calc_pwm = calc_pwm + maxspin * (delta back_spin) / 64
0398   2BC1           01518         goto    no_spin1
                      01519 
0399                  01520 adjust_topspin1:
0399   30BF           01521         movlw   0xbf                    ; mult1 = spin_a2d - 191
039A   0238           01522         subwf   spin_a2d,w
039B   00C9           01523         movwf   mult1                   ; max top spin = delta_spin
039C   00BF           01524         movwf   delta_s
039D   1003           01525         bcf     STATUS,C
039E   0CBF           01526         rrf     delta_s,f               ; (div by 2)
039F   1003           01527         bcf     STATUS,C
03A0   0CBF           01528         rrf     delta_s,f               ; (div by 4)
03A1   1003           01529         bcf     STATUS,C
03A2   0CBF           01530         rrf     delta_s,f               ; (div by 8)
03A3   083F           01531         movf    delta_s,w
03A4   07C9           01532         addwf   mult1,f                 ;               + delta_spin / 8 
03A5   1003           01533         bcf     STATUS,C
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03A6   0CBF           01534         rrf     delta_s,f               ; (div by 16)
03A7   083F           01535         movf    delta_s,w
03A8   02C9           01536         subwf   mult1,f                 ;               - delta_spin / 16
03A9   1003           01537         bcf     STATUS,C
03AA   0C3F           01538         rrf     delta_s,w               ; (div by 32)
03AB   07C9           01539         addwf   mult1,f                 ;               + delta_spin / 32
                      01540 
03AC   30C5           01541         movlw   0xc5
03AD   0239           01542         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
03AE   1C03           01543         btfss   STATUS,C                ; skip if no borrow (fast speed)
03AF   2BBC           01544         goto    slow_spd
                      01545                                         ; fast speed:
03B0   00BF           01546         movwf   delta_s                 ; maxspin = delta_speed / 2
03B1   1003           01547         bcf     STATUS,C
03B2   0CBF           01548         rrf     delta_s,f               ; (div by 2)
03B3   083F           01549         movf    delta_s,w
03B4   00CA           01550         movwf   mult2
03B5   1003           01551         bcf     STATUS,C
03B6   0CBF           01552         rrf     delta_s,F               ; (div by 4)
03B7   1003           01553         bcf     STATUS,C
03B8   0C3F           01554         rrf     delta_s,W               ; (div by 8)
03B9   024A           01555         subwf   mult2,W                 ;           - delta_speed / 8
03BA   3E29           01556         addlw   0x29                    ;           + 41
03BB   2BBD           01557         goto    ts_com1
                      01558 
03BC                  01559 slow_spd
03BC   3029           01560         movlw   0x29                    ; slow speed: maxspin = 41
03BD                  01561 ts_com1
03BD   023D           01562         subwf   calc_pwm,w
03BE   00CA           01563         movwf   mult2                   ; mult2 = calc_pwm - maxspin
03BF   2573           01564         call    mult_sub                ; W = (max top spin) * (calc_pwm - maxspin) / 64
03C0   02BD           01565         subwf   calc_pwm,f              ; calc_pwm = calc_pwm - (196 - spin_a2d) * (calc_pwm - maxspin) 
                            / 64
03C1                  01566 no_spin1
                      01567 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01568 ;       sublw   0xf3                    ; DEBUG
                      01569 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01570 ;       goto    force255                ; DEBUG
03C1   083D           01571         movf    calc_pwm,w
03C2   00A6           01572         movwf   t_bot_pwm
03C3   3C1F           01573         sublw   0x1f                    ; 41 - t_bot_pwm
03C4   1C03           01574         btfss   STATUS,C                ; skip if no borrow
03C5   0008           01575         return
03C6   301F           01576         movlw   0x1f
03C7   00A6           01577         movwf   t_bot_pwm
03C8   0008           01578         return                          ;  make at least 41
                      01579 ;force255                               ; DEBUG
                      01580 ;       movlw   0xff                    ; DEBUG
                      01581 ;       movwf   t_bot_pwm               ; DEBUG
                      01582 ;       return                          ; DEBUG
                      01583 
                      01584 ; calculate desired top pwm
03C9                  01585 calc_top_pwm
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01586 ; first calculate speed based on no spin
                      01587 ; 08/07/09 start
                      01588 ;       movlw   0x8f
03C9   308F           01589         movlw   0x8f                    ; minimum speed pot read allowed
                      01590 ; 08/07/09 end
03CA   0239           01591         subwf   spd_a2d,w
03CB   00BF           01592         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01593 ; 08/07/09 start
                      01594 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01595 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
03CC   3E4A           01596         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 74/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01597 ; 08/07/09 end
03CD   00BD           01598         movwf   calc_pwm
03CE   1003           01599         bcf     STATUS,C
03CF   0CBF           01600         rrf     delta_s,F               ; (div by 2)
                      01601 ; 08/07/09 start
                      01602 ;       movf    delta_s,w
                      01603 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01604 ; 08/07/09 end
03D0   1003           01605         bcf     STATUS,C
03D1   0CBF           01606         rrf     delta_s,f               ; (div by 4)
03D2   083F           01607         movf    delta_s,w
03D3   07BD           01608         addwf   calc_pwm,F              ;               + delta_s / 4
03D4   1003           01609         bcf     STATUS,C
03D5   0CBF           01610         rrf     delta_s,F               ; (div by 8)
                      01611 ; 08/07/09 start
03D6   083F           01612         movf    delta_s,w
03D7   07BD           01613         addwf   calc_pwm,F              ;               + delta_s / 8
                      01614 ; 08/07/09 end
03D8   1003           01615         bcf     STATUS,C
03D9   0CBF           01616         rrf     delta_s,F               ; (div by 16)
                      01617 ; 08/07/09 start
03DA   02BD           01618         subwf   calc_pwm,f              ;               - delta_s / 16
                      01619 ; 08/07/09 end
                      01620 ;       bcf     STATUS,C
                      01621 ;       rrf     delta_s,W               ; (div by 32)
                      01622 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01623 ; 08/07/09 end
                      01624 ; now adjust based on spin
03DB   0838           01625         movf    spin_a2d,w
03DC   3CBA           01626         sublw   0xba                    ; 186 - spin_a2d
03DD   1903           01627         btfsc   STATUS,Z                ; if spin_a2d is 186, then no spin
03DE   2C49           01628         goto    no_spin
03DF   1803           01629         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
03E0   2C2E           01630         goto    adjust_backspin
03E1   3E05           01631         addlw   5                       ;
03E2   1803           01632         btfsc   STATUS,C                ; if spin_a2d is 187-191, then no spin
03E3   2C49           01633         goto    no_spin
03E4                  01634 adjust_topspin:                         ; if spin_a2d > 197 then we have top spin
03E4   30C5           01635         movlw   0xc5
03E5   0239           01636         subwf   spd_a2d,W               ; speed_a2d - 197
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03E6   1803           01637         btfsc   STATUS,C                ; skip if borrow (slow speed)
03E7   2C00           01638         goto    high_spd
03E8   308F           01639         movlw   0x8f                    ; slow speed
03E9   0239           01640         subwf   spd_a2d,w
03EA   00BF           01641         movwf   delta_s                 ; delta_s = speed_a2d - 143
03EB   00C9           01642         movwf   mult1                   ; mult1 =       delta_s
03EC   1003           01643         bcf     STATUS,C
03ED   0CBF           01644         rrf     delta_s,f               ; (div by 2)
03EE   1003           01645         bcf     STATUS,C
03EF   0CBF           01646         rrf     delta_s,f               ; (div by 4)
03F0   083F           01647         movf    delta_s,w
03F1   07C9           01648         addwf   mult1,f                 ;               + delta_s / 4
03F2   1003           01649         bcf     STATUS,C
03F3   0CBF           01650         rrf     delta_s,f               ; (div by 8)
03F4   1003           01651         bcf     STATUS,C
03F5   0CBF           01652         rrf     delta_s,f               ; (div by 16)
03F6   083F           01653         movf    delta_s,w
03F7   02C9           01654         subwf   mult1,f                 ;               - delta_s / 16
03F8   1003           01655         bcf     STATUS,C
03F9   0C3F           01656         rrf     delta_s,w               ; (div by 32)
03FA   07C9           01657         addwf   mult1,f                 ;               + delta_s / 32
03FB   300B           01658         movlw   0x0b
03FC   00CA           01659         movwf   mult2
03FD   2573           01660         call    mult_sub                ; W = 11 * mult1 / 64
03FE   00C9           01661         movwf   mult1                   ; mult1 is maxspin for this speed
03FF   2C18           01662         goto    adjust_ts
0400                  01663 high_spd:
0400   30C5           01664         movlw   0xc5
0401   0239           01665         subwf   spd_a2d,W               ; speed_a2d - 197
0402   00BF           01666         movwf   delta_s                 ; delta_s = speed_a2d - 197
0403   00C9           01667         movwf   mult1
0404   1003           01668         bcf     STATUS,C
0405   0CBF           01669         rrf     delta_s,f               ; (div by 2)
0406   1003           01670         bcf     STATUS,C
0407   0CBF           01671         rrf     delta_s,f               ; (div by 4)
0408   083F           01672         movf    delta_s,w
0409   07C9           01673         addwf   mult1,f                 ;               + delta_s / 4
040A   1003           01674         bcf     STATUS,C
040B   0CBF           01675         rrf     delta_s,f               ; (div by 8)
040C   1003           01676         bcf     STATUS,C
040D   0CBF           01677         rrf     delta_s,f               ; (div by 16)
040E   083F           01678         movf    delta_s,w
040F   02C9           01679         subwf   mult1,f                 ;               - delta_s / 16
0410   1003           01680         bcf     STATUS,C
0411   0C3F           01681         rrf     delta_s,w               ; (div by 32)
0412   07C9           01682         addwf   mult1,f                 ;               + delta_s / 32
0413   300B           01683         movlw   0x0b
0414   00CA           01684         movwf   mult2
0415   2573           01685         call    mult_sub                ; W = 11 * mult1 / 64
0416   3C0B           01686         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
0417   00C9           01687         movwf   mult1                   ; mul1 is maxspin for this speed
0418                  01688 adjust_ts:
0418   30BF           01689         movlw   0xbf                    ; spin_a2d - 191
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0419   0238           01690         subwf   spin_a2d,w
041A   00BF           01691         movwf   delta_s                 ; amount of top spin desired (delta top_spin)
041B   00CA           01692         movwf   mult2                   ; max delta spin = delts_s
041C   1003           01693         bcf     STATUS,C
041D   0CBF           01694         rrf     delta_s,f               ; (div by 2)
041E   1003           01695         bcf     STATUS,C
041F   0CBF           01696         rrf     delta_s,f               ; (div by 4)
0420   1003           01697         bcf     STATUS,C
0421   0CBF           01698         rrf     delta_s,f               ; (div by 8)
0422   083F           01699         movf    delta_s,w
0423   07CA           01700         addwf   mult2,f                 ;               + delta_s / 8
0424   1003           01701         bcf     STATUS,C
0425   0CBF           01702         rrf     delta_s,f               ; (div by 16)
0426   083F           01703         movf    delta_s,w
0427   02CA           01704         subwf   mult2,f                 ;               - delta_s / 16
0428   1003           01705         bcf     STATUS,C
0429   0C3F           01706         rrf     delta_s,w               ; (div by 32)
042A   07CA           01707         addwf   mult2,f                 ;               + delta_s / 32
042B   2573           01708         call    mult_sub                ; W = maxspin * (delta top_spin) / 64
042C   07BD           01709         addwf   calc_pwm,f
042D   2C49           01710         goto    no_spin
                      01711 
042E                  01712 adjust_backspin:
042E   0838           01713         movf    spin_a2d,w
042F   3CBA           01714         sublw   0xba                    ; mult1 = 186 - spin_a2d
0430   00C9           01715         movwf   mult1
0431   1003           01716         bcf     STATUS,C                ; max backspin = (186 - spin_a2d) * 3 / 2
0432   0C49           01717         rrf     mult1,w
0433   07C9           01718         addwf   mult1,f
                      01719 
0434   30C5           01720         movlw   0xc5
0435   0239           01721         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
0436   1C03           01722         btfss   STATUS,C                ; skip if no borrow (fast speed)
0437   2C44           01723         goto    slow_spd1
                      01724                                         ; fast speed:
0438   00BF           01725         movwf   delta_s                 ; maxspin =
0439   1003           01726         bcf     STATUS,C
043A   0CBF           01727         rrf     delta_s,f               ; (div by 2)
043B   083F           01728         movf    delta_s,w               ;           delta_speed / 2
043C   00CA           01729         movwf   mult2
043D   1003           01730         bcf     STATUS,C
043E   0CBF           01731         rrf     delta_s,f               ; (div by 4)
043F   1003           01732         bcf     STATUS,C                
0440   0C3F           01733         rrf     delta_s,w               ; (div by 8)
0441   024A           01734         subwf   mult2,w                 ;           - delta_speed / 8
0442   3E29           01735         addlw   0x29                    ;           + 41
0443   2C45           01736         goto    bs_com
                      01737 
0444                  01738 slow_spd1
0444   3029           01739         movlw   0x29
0445                  01740 bs_com
0445   023D           01741         subwf   calc_pwm,w
0446   00CA           01742         movwf   mult2                   ; mult2 = calc_pwm - maxspin
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0447   2573           01743         call    mult_sub                ; W = (max back spin) * (calc_pwm - maxspin) / 64
0448   02BD           01744         subwf   calc_pwm,f              ; calc_pwm -= W
0449                  01745 no_spin
                      01746 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01747 ;       sublw   0xf3                    ; DEBUG
                      01748 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01749 ;       goto    force255_1              ; DEBUG
0449   083D           01750         movf    calc_pwm,w
044A   00A4           01751         movwf   t_top_pwm
044B   0008           01752         return
                      01753 ;force255_1                             ; DEBUG
                      01754 ;       movwf   0xff                    ; DEBUG
                      01755 ;       movwf   t_top_pwm               ; DEBUG
                      01756 ;       return                          ; DEBUG
                      01757 
044C                  01758 power_is_off:
                      01759 ; here at power on if detected the power switch is off
                      01760 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01761 ;       clrwdt                          ;  let wdt reset processor
                      01762 
044C   0186           01763         clrf    PORTB                   ; turn off all LED
044D   083A           01764         movf    bat_a2d,w               ; get battery level
044E   3C99           01765         sublw   99h                     ; battery input at least 3.0V? (battery at least 13.2V)
044F   1803           01766         btfsc   STATUS,C                ;    skip if no borrow (> 3.0V)
0450   2C6E           01767         goto    charg_lt_3_0            ; charging, below 3.0V
0451   1903           01768         btfsc   STATUS,Z
0452   2C6E           01769         goto    charg_lt_3_0
0453   083A           01770         movf    bat_a2d,w
                      01771 ;       sublw   0a3h                    ; battery input at least 3.2V? (battery at least 14.1V), MJZ COM
                            MENTED THIS LINE
0454   3C9F           01772         sublw   09fh                    ;MJZ ADDED THIS LINE, battery input at least 3.1V? (battery at l
                            east 13.7V)
0455   1803           01773         btfsc   STATUS,C                ;    skip if no borrow (> 3.2V)
0456   2C65           01774         goto    charg_lt_3_2            ; charging, below 3.2V
0457   1903           01775         btfsc   STATUS,Z
0458   2C65           01776         goto    charg_lt_3_2
0459   083A           01777         movf    bat_a2d,w
                      01778 ;       sublw   0a8h                    ; battery input at least 3.3V? (battery at least 14.5V), MJZ COM
                            MENTED THIS LINE
045A   3CA3           01779         sublw   0a3h                    ;MJZ ADDED THIS LINE, battery input at least 3.2V? (battery at l
                            east 14.1V)
045B   1803           01780         btfsc   STATUS,C                ;    skip if no borrow (> 3.3V)
045C   2C64           01781         goto    charg_lt_3_3
045D   1903           01782         btfsc   STATUS,Z
045E   2C64           01783         goto    charg_lt_3_3
                      01784                                         ; we are here because we are charging and power > 3.3V
045F   1506           01785         bsf     PORTB,GREEN_LED         ;   green on and red off
0460                  01786 wait_reset_lp:
0460   0064           01787         clrwdt
                      01788 ;       btfss   PORTB,0         ; if RB0/INT bit is not set, power had been turned back on, MJZ COMMENTE
                            D THIS LINE
0461   1E06           01789         btfss   PORTB,4         ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
0462   1486           01790         bsf     PORTB,RED_LED           ;  set red led
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0463   2C60           01791         goto    wait_reset_lp           ; loop forever until charging power removed and system reset
                      01792                                         ; 
                      01793                                         ; 
                      01794 
0464                  01795 charg_lt_3_3:                           ; charging, 3.2V < power level < 3.3V
0464   2C66           01796         goto    flash_grn               ; we want red off and flashing green
0465                  01797 charg_lt_3_2:                           ; charging, 3.0V < power level < 3.2V
                      01798 ;       bsf     PORTB,RED_LED           ; we want red on and flashing green, MJZ COMMENTED THIS LINE
0465   2C6A           01799         goto    flash_red               ;MJZ ADDED THIS LINE, we want flashing red and green off
0466                  01800 flash_grn:
0466   1506           01801         bsf     PORTB,GREEN_LED         ; turn on green led
0467   3004           01802         movlw   GREEN_LED_ON
0468   00CA           01803         movwf   mult2                   ; bits to toggle
0469   2C71           01804         goto    flash_com
                      01805 
046A                  01806 flash_red:                                      ;MJZ ADDED THIS LINE
046A   1486           01807         bsf PORTB,RED_LED               ;MJZ ADDED THIS LINE, turn on red led
046B   3002           01808         movlw   RED_LED_ON              ;MJZ ADDED THIS LINE
046C   00CA           01809         movwf   mult2                   ;MJZ ADDED THIS LINE
046D   2C71           01810         goto    flash_com               ;MJZ ADDED THIS LINE
                      01811 
046E                  01812 charg_lt_3_0:                           ; charging, power level <= 3.0V
                      01813 ;       bsf     PORTB,GREEN_LED         ; turn on green led, MJZ COMMENTED THIS LINE
                      01814 ;       movlw   GREEN_LED_ON|RED_LED_ON ; toggle both red and green, only 1 on at a time, MJZ COMMENTED 
                            THIS LINE
                      01815 ;       movwf   mult2                   ;MJZ COMMENTED THIS LINE
                      01816 
046E   1486           01817         bsf     PORTB,RED_LED           ;MJZ ADDED THIS LINE, we want red on and green off
046F   3000           01818         movlw   0                               ;MJZ ADDED THIS LINE
0470   00CA           01819         movwf   mult2                   ;MJZ ADDED THIS LINE
                      01820 
                      01821 
                      01822 
0471                  01823 flash_com:
0471   3040           01824         movlw   0x40
0472   00C9           01825         movwf   mult1
0473                  01826 fgrn_loop:
0473   3004           01827         movlw   PAUSE_TIME
0474   24F4           01828         call    wait
0475   3004           01829         movlw   PAUSE_TIME
0476   24F4           01830         call    wait
0477   3004           01831         movlw   PAUSE_TIME
0478   24F4           01832         call    wait
0479   084A           01833         movf    mult2,w                 ; get bits to toggle
047A   0686           01834         xorwf   PORTB,F                 ; toggle leds
047B   0BC9           01835         decfsz  mult1,f
047C   2C73           01836         goto    fgrn_loop
                      01837 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on      
                            ;MJZ COMMENTED THIS LINE
047D   1A06           01838         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
047E   2C99           01839         goto    pwr_off_lp              ;  let wdt reset the system
047F   3002           01840         movlw   2
0480   00B3           01841         movwf   a2d_chan                ; get battery level again
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0481   2320           01842         call    acq_a2d
0482   00BA           01843         movwf   bat_a2d         
0483   2C4C           01844         goto    power_is_off
                      01845 
                      01846 
                      01847 ; check if RB7:RB4 pins had changed state
0484                  01848 chk_rbif:
                      01849 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set, check if power switch is turned off
                      01850 ;       btfss   PORTB,0                 ; if power switch is turned off ;MJZ COMMENTED THIS LINE
0484   1E06           01851         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
0485   2C9A           01852         goto    chk_rbif3
                      01853 ;       btfss   PORTB,0                 ; check power switch again      ;MJZ COMMENTED THIS LINE
0486   1E06           01854         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
0487   2C9A           01855         goto    chk_rbif3
0488   018B           01856         clrf    INTCON                  ; disable all intrs
0489   0197           01857         clrf    CCP1CON                 ; CCP1 Module is off
048A   019D           01858         clrf    CCP2CON                 ; CCP2 Module is off
                      01859 ;       clrf    PORTC                   ; disable feed motor pwm
048B   3040           01860         movlw   BEEP_OFF                ; beep is off
048C   0087           01861         movwf   PORTC                   ; disable feed motor pwm
                      01862                                         ; disable bottom serve motor pwm
                      01863                                         ; disable top serve motor pwm
                      01864                                         ; sweep motor disabled
                      01865                                         ; elevation motor disabled
048D   0186           01866         clrf    PORTB                   ; turn off all LED
048E   0064           01867         clrwdt
048F   1506           01868         bsf     PORTB,GREEN_LED
                      01869 ;       movlw   0x40
0490   3080           01870         movlw   0x80
0491   00C9           01871         movwf   mult1
0492                  01872 pwr_off_loop:
0492   3004           01873         movlw   PAUSE_TIME
0493   24F4           01874         call    wait
0494   3006           01875         movlw   6                       ; red led on + green led on
0495   0686           01876         xorwf   PORTB,F                 ; toggle red and green led, only 1 on
0496   0BC9           01877         decfsz  mult1,f
0497   2C92           01878         goto    pwr_off_loop
                      01879 
0498   0186           01880         clrf    PORTB                   ; turn off all leds
0499                  01881 pwr_off_lp:
                      01882 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01883 ;       clrwdt                          ;  let wdt reset processor
0499   2C99           01884         goto    pwr_off_lp
                      01885 
049A                  01886 chk_rbif3:
                      01887 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set,       ;MJZ COMMENTED THIS LINE
049A   2CAB           01888         goto    chk_rbif1
                      01889 
                      01890 
                      01891 
                      01892 ;MJZ ADDED LINE, PREVIOUS VERSION HAD POWER SWITCH ON RB0/INT0.
                      01893 ;MJZ ADDED LINE, CHK_RBIF2 WOULD HAVE BEEN RUN ONLY IF A POWER OFF ON RB0/INT0 SET INTF, BUT
                      01894 ;MJZ ADDED LINE, WHEN RB0 WAS READ, THE POWER OFF CONDITION HAD ALREADY GONE AWAY, I.E. A SPURIOUS SIGNA
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            L SET INTF.
                      01895 ;MJZ ADDED LINE, THE INTF WAS CHECKED FOR IN CHK_RBIF3, SO TO BE SAFE THAT LINE IS NOW COMMENTED SO CHK_
                            RBIF2 WOULD NEVER RUN.
                      01896 ;MJZ ADDED LINE, POWER OFF IS NOW DETECTED ON RB4 WHICH USED TO BE SWEEP MOTOR ERROR DETECTION.
                      01897 ;MJZ ADDED LINE, SWEEP MOTOR ERROR USED TO BE ON RB4, BUT NONE OF THAT LOGIC IS TAKEN OUT, BECAUSE THE P
                            OWER OFF DETECTION CODE
                      01898 ;MJZ ADDED LINE, IS EXECUTED BEFORE MOTOR ERROR CODE, SO IF RB4 IS SET, A POWER OFF IS DETECTED.
                      01899 ;MJZ ADDED LINE, BALL DROP IS NOW DETECTED ON RB0/INT0.
                      01900 
                      01901 
                      01902 
049B                  01903 chk_rbif2:
049B   30F9           01904         movlw   0xf9
049C   0586           01905         andwf   PORTB,F                 ; clear red and green led
049D   3004           01906         movlw   PAUSE_TIME
049E   24F4           01907         call    wait
049F   1506           01908         bsf     PORTB,GREEN_LED
04A0   3004           01909         movlw   PAUSE_TIME
04A1   24F4           01910         call    wait
04A2   3006           01911         movlw   6
04A3   0686           01912         xorwf   PORTB,F
04A4   3004           01913         movlw   PAUSE_TIME
04A5   24F4           01914         call    wait
04A6   3006           01915         movlw   6
04A7   0686           01916         xorwf   PORTB,F
04A8   30F9           01917         movlw   0xf9
04A9   0586           01918         andwf   PORTB,F
04AA   05C3           01919         andwf   led_bits,F
                      01920 ;       bcf     INTCON,INTF                     ; MJZ commented this line, INTF now used for ball drop d
                            etection.
04AB                  01921 chk_rbif1:
04AB   1C0B           01922         btfss   INTCON,RBIF             ; if RBIF is clear, return
04AC   0008           01923         return
04AD   0E06           01924         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
04AE   100B           01925         bcf     INTCON,RBIF             ;  clear RBIF bit in INTCON
                      01926 ;       andlw   0x0f                    ;  clear upper bits
04AF   054C           01927         andwf   rbif_bits,w             ;  and with mask
04B0   1903           01928         btfsc   STATUS,Z                ;  if zero, return
04B1   0008           01929         return
04B2   3006           01930         movlw   6                       ; wait 10us
04B3   00C4           01931         movwf   rbif_wait
04B4                  01932 rbif_lp
04B4   0E06           01933         swapf   PORTB,w                 ; double checking, get RB7:RB4 in lower bits
                      01934 ;       andlw   0x0f                    ;  clear upper bits
04B5   054C           01935         andwf   rbif_bits,w             ;  and with mask
04B6   1903           01936         btfsc   STATUS,Z                ;  if zero, return
04B7   0008           01937         return
04B8   0BC4           01938         decfsz  rbif_wait,f
04B9   2CB4           01939         goto    rbif_lp
04BA   0E06           01940         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
                      01941 ;       andlw   0x0f                    ;  clear upper bits
04BB   054C           01942         andwf   rbif_bits,w             ; and with mask
04BC   1903           01943         btfsc   STATUS,Z                ;  if zero, return
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BD   0008           01944         return
04BE   00C1           01945         movwf   err_no                  ; save as error number
                      01946 ; motor error, disable all motors, flash error code
                      01947 ;
04BF                  01948 motor_error
                      01949         ; disable all motors
04BF   0064           01950         clrwdt
04C0   018B           01951         clrf    INTCON                  ; disable all intrs
04C1   0197           01952         clrf    CCP1CON                 ; CCP1 Module is off
04C2   019D           01953         clrf    CCP2CON                 ; CCP2 Module is off
                      01954 ;       clrf    PORTC                   ; disable feed motor pwm
04C3   3040           01955         movlw   BEEP_OFF                ; disable feed motor pwm
04C4   0087           01956         movwf   PORTC                   ; disable bottom serve motor pwm
                      01957                                         ; disable top serve motor pwm
                      01958                                         ; sweep motor disabled
                      01959                                         ; eleveation motor disabled
04C5   0186           01960         clrf    PORTB                   ; turn off all LED
04C6                  01961 moterr_lp
04C6   3002           01962         movlw   2
04C7   00C2           01963         movwf   flash_code
04C8   0841           01964         movf    err_no,w                ; get motor error bits
04C9   18C1           01965         btfsc   err_no,1                ; feed motor error
04CA   24D8           01966         call    flash_error             ;  flash 2
04CB   3003           01967         movlw   3
04CC   00C2           01968         movwf   flash_code
04CD   19C1           01969         btfsc   err_no,3                ; top serve motor error
04CE   24D8           01970         call    flash_error             ;  flash 3
04CF   3004           01971         movlw   4
04D0   00C2           01972         movwf   flash_code
04D1   1941           01973         btfsc   err_no,2                ; bottom serve motor error
04D2   24D8           01974         call    flash_error             ;  flash 4
04D3   3005           01975         movlw   5
04D4   00C2           01976         movwf   flash_code
                      01977 ;       btfsc   err_no,0                ; feed motor error      ;MJZ COMMENTED THIS LINE, SHOULD BE SWEE
                            P MOTOR ERROR
04D5   1841           01978         btfsc   err_no,0                ; MJZ ADDED THIS LINE, SWEEP MOTOR ERROR
04D6   24D8           01979         call    flash_error             ;  flash 5
04D7   2CC6           01980         goto    moterr_lp
                      01981 
04D8                  01982 flash_error:
                      01983 ;       movwf   flash_code              ; for err_no times,
04D8   1106           01984         bcf     PORTB,GREEN_LED         ;   turn off green led
04D9   3030           01985         movlw   FLASH_TIME
04DA   24F4           01986         call    wait
04DB                  01987 flash_greenled
04DB   1506           01988         bsf     PORTB,GREEN_LED         ;   turn on green led
04DC   3030           01989         movlw   FLASH_TIME
04DD   24F4           01990         call    wait
04DE   1106           01991         bcf     PORTB,GREEN_LED         ;   turn off green led
04DF   3030           01992         movlw   FLASH_TIME
04E0   24F4           01993         call    wait
04E1   0BC2           01994         decfsz  flash_code,f
04E2   2CDB           01995         goto    flash_greenled
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01996 
04E3   3004           01997         movlw   PAUSE_TIME
04E4   00C2           01998         movwf   flash_code
04E5                  01999 pause
04E5   3030           02000         movlw   FLASH_TIME              ; now pause
04E6   24F4           02001         call    wait
04E7   0BC2           02002         decfsz  flash_code,f
04E8   2CE5           02003         goto    pause
04E9   0008           02004         return
                      02005 
                      02006 
                      02007 ; battery below 2.4V - disable all motors, LEDs green off and red flashing
04EA                  02008 bat_dead
                      02009         ; disable all motors
04EA   0064           02010         clrwdt
04EB   018B           02011         clrf    INTCON                  ; disable all intrs
04EC   0197           02012         clrf    CCP1CON                 ; CCP1 Module is off
04ED   019D           02013         clrf    CCP2CON                 ; CCP2 Module is off
                      02014 ;       clrf    PORTC                   ; disable feed motor pwm
04EE   3040           02015         movlw   BEEP_OFF                ; disable feed motor pwm
04EF   0087           02016         movwf   PORTC                   ; disable bottom serve motor pwm
                      02017                                         ; disable top serve motor pwm
                      02018                                         ; sweep motor disabled
                      02019                                         ; elevation motor disabled
04F0   0186           02020         clrf    PORTB                   ; turn off all LED
                      02021 
                      02022 ;flash_redled                           ;MJZ COMMENTED THIS LINE
                      02023 ;       movlw   RED_LED_ON              ;MJZ COMMENTED THIS LINE
                      02024 ;       xorwf   PORTB,f                 ; toggle red LED, MJZ COMMENTED THIS LINE
                      02025 ;       movlw   FLASH_TIME              ;MJZ COMMENTED THIS LINE
                      02026 ;       call    wait                    ;MJZ COMMENTED THIS LINE
                      02027 ;       goto    flash_redled    ;MJZ COMMENTED THIS LINE
                      02028 
                      02029 
04F1                  02030 bat_dead_loop                           ;MJZ ADDED THIS LINE
04F1   1486           02031         bsf             PORTB,RED_LED   ;MJZ ADDED THIS LINE, TURN ON RED LED
04F2   0064           02032         clrwdt
04F3   2CF1           02033         goto    bat_dead_loop   ;MJZ ADDED THIS LINE
                      02034 
                      02035         
                      02036 
                      02037 ; wait (W) number of timer1 overflows
                      02038 ; if (W) = 255, wait time is about 1.2 seconds
04F4                  02039 wait
04F4   00C0           02040         movwf   wait_cnt
04F5                  02041 waitlp
04F5   0064           02042         clrwdt
04F6   1C0C           02043         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
04F7   2CF5           02044         goto    waitlp
04F8   30A8           02045         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
04F9   008E           02046         movwf   TMR1L
04FA   3061           02047         movlw   MSEC5_MSB
04FB   008F           02048         movwf   TMR1H
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04FC   100C           02049         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
04FD   0BC0           02050         decfsz  wait_cnt,f              ;  decrement wait_cnt
04FE   2CF5           02051         goto    waitlp
04FF   0008           02052         return
                      02053 
                      02054 ; wait (W) number of timer1 overflows withou clearing watch dog timer
                      02055 ; if (W) = 255, wait time is about 1.2 seconds
0500                  02056 wait_no_clrwdt
0500   00C0           02057         movwf   wait_cnt
0501                  02058 waitlp1
0501   1C0C           02059         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0502   2D01           02060         goto    waitlp1
0503   30A8           02061         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
0504   008E           02062         movwf   TMR1L
0505   3061           02063         movlw   MSEC5_MSB
0506   008F           02064         movwf   TMR1H
0507   100C           02065         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
0508   0BC0           02066         decfsz  wait_cnt,f              ;  decrement wait_cnt
0509   2D01           02067         goto    waitlp1
050A   0008           02068         return
                      02069 
                      02070 ; initialize battery level on power up  
050B                  02071 init_bat_level:
050B   01C5           02072         clrf    power_level
050C   083A           02073         movf    bat_a2d,w
050D   3C84           02074         sublw   0x84                    ; 0x84 - bat_a2d
050E   1C03           02075         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
050F   2D1A           02076         goto    init_pl_com                     ; if borrow, over 2.6V: power_level_tmp = 0
0510   0AC5           02077         incf    power_level,f
0511   083A           02078         movf    bat_a2d,w
0512   3C80           02079         sublw   0x80                    ; 0x80 - bat_a2d
0513   1C03           02080         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
0514   2D1A           02081         goto    init_pl_com             ; if borrow, over 2.5V: power_level_tmp = 1
                      02082 ; less than 2.5V, about 10 mins left
0515   0AC5           02083         incf    power_level,f
0516   083A           02084         movf    bat_a2d,w
0517   3C7A           02085         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
0518   1803           02086         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
0519   0AC5           02087         incf    power_level,f   ;       if borrow, less then 2.4V: power_level_tmp = 3
051A                  02088 init_pl_com:
051A   0845           02089         movf    power_level,w
051B   00C6           02090         movwf   power_level_r
                      02091 ; fall through to set battery leds
                      02092 
                      02093 
                      02094 ; update battery leds. Called every 16 seconds. Take the lowest value from the last 16 second period
051C                  02095 update_bat_led:
051C   0846           02096         movf    power_level_r,w
051D   00C5           02097         movwf   power_level
051E   3903           02098         andlw   0x03
051F   1903           02099         btfsc   STATUS,Z                ; power level 0: > 2.6V
0520   2D31           02100         goto    over2_6v
0521   0BC5           02101         decfsz  power_level,f           ;
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0522   2D24           02102         goto    under2_5v
0523   2D2E           02103         goto    over2_5v                ; power level 1: > 2.5V
                      02104 
                      02105 
0524                  02106 under2_5v
0524   0BC5           02107         decfsz  power_level,f
0525   2CEA           02108         goto    bat_dead                        ; power level 3: < 2.4V ;MJZ DEBUG, COMMENTED THIS LINE
                      02109 ;       goto    over2_6v                        ;MJZ DEBUG, ADDED THIS LINE
                      02110 
                      02111 ;between_2.4v_2.5v                              ; less than 2.5V, about 10 mins left (GREEN OFF RED ON),
                             MJZ COMMENTED THIS LINE
                      02112 ;       btfss   led_bits,GREEN_LED      ; if green led on, turn it off, MJZ COMMENTED THIS LINE
                      02113 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      02114 ;       bcf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      02115 ;       bcf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
0526                  02116 between_2.4v_2.5v:                              ;MJZ ADDED THIS LINE, BETWEEN 2.4V & 2.5V, GREEN OFF, RE
                            D ON(FLASHING)
0526   1106           02117         bcf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE
0527   1486           02118         bsf             PORTB,RED_LED           ;MJZ ADDED THIS LINE
0528   2D38           02119         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      02120 
                      02121 
0529                  02122 grn_off:
0529   18C3           02123         btfsc   led_bits,RED_LED        ; if red led off, turn it on
052A   2D38           02124         goto    bat_led_xit
052B   14C3           02125         bsf     led_bits,RED_LED
052C   1486           02126         bsf     PORTB,RED_LED
052D   2D38           02127         goto    bat_led_xit
                      02128 
                      02129 
                      02130 
                      02131 ;over2_5v:                                              ; between 2.5v and 2.7V - 1/3 capacity (GREEN ON
                             RED ON), MJZ COMMENTED THIS LINE
                      02132 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      02133 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      02134 ;       bsf             led_bits,GREEN_LED      ;MJZ COMMENTED THIS LINE
                      02135 ;       bsf             PORTB,GREEN_LED         ;MJZ COMMENTED THIS LINE
                      02136 ;       goto    grn_off                         ; goto turn red led on if necessary, MJZ COMMENTED THIS 
                            LINE
052E                  02137 over2_5v:                                               ;MJZ ADDED THIS LINE, BETWEEN 2.5V & 2.7V - 1/3 
                            CAPACITY (GREEN ON(FLASHING), RED OFF)
052E   1086           02138         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
052F   1506           02139         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
0530   2D38           02140         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      02141 
                      02142 
                      02143 ;over2_6v:                                              ; greater than 2.6V, battery good       (GREEN O
                            N RED OFF), MJZ COMMENTED THIS LINE
                      02144 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      02145 ;       goto    grn_on
                      02146 ;       bsf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      02147 ;       bsf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
0531                  02148 over2_6v:                                               ;MJZ ADDED THIS LINE, GREATER THAN 2.6V, BATTERY
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                             GOOD (GREEN ON, RED OFF)
0531   1086           02149         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
0532   1506           02150         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
0533   2D38           02151         goto    bat_led_xit                     ;MJZ ADDED THIS LINE    
                      02152 
                      02153 
0534                  02154 grn_on:
0534   1CC3           02155         btfss   led_bits,RED_LED        ; if red led on, turn it off
0535   2D38           02156         goto    bat_led_xit
0536   10C3           02157         bcf     led_bits,RED_LED
0537   1086           02158         bcf     PORTB,RED_LED
                      02159 
0538                  02160 bat_led_xit:
0538   0846           02161         movf    power_level_r,w
0539   00C5           02162         movwf   power_level
053A   3003           02163         movlw   3
053B   00C6           02164         movwf   power_level_r
053C   0008           02165         return  
                      02166 
                      02167 
053D                  02168 record_bat_level:
                      02169 ; within a 16second time period, record the lowest power level
053D   01C7           02170         clrf    power_level_tmp
053E   083A           02171         movf    bat_a2d,w
053F   3C84           02172         sublw   0x84                    ; 0x84 - bat_a2d
0540   1C03           02173         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
0541   2D4C           02174         goto    pl_com                  ; if borrow, over 2.6V: power_level_tmp = 0
0542   0AC7           02175         incf    power_level_tmp,f
0543   083A           02176         movf    bat_a2d,w
0544   3C80           02177         sublw   0x80                    ; 0x80 - bat_a2d
0545   1C03           02178         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
0546   2D4C           02179         goto    pl_com                  ; if borrow, over 2.5V: power_level_tmp = 1
                      02180 ; less than 2.5V, about 10 mins left
0547   0AC7           02181         incf    power_level_tmp,f
0548   083A           02182         movf    bat_a2d,w
0549   3C7A           02183         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
054A   1803           02184         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
054B   0AC7           02185         incf    power_level_tmp,f       ;       if borrow, less then 2.4V: power_level_tmp = 3
054C                  02186 pl_com:
054C   0846           02187         movf    power_level_r,w         ; power_level_r - power_level_tmp
054D   0247           02188         subwf   power_level_tmp,w
054E   1803           02189         btfsc   STATUS,C                ; if borrow => power_level_tmp < power_level_r
054F   2D52           02190         goto    no_bat_adjust
0550   0847           02191         movf    power_level_tmp,w       ;   power_level_r = new power level
0551   00C6           02192         movwf   power_level_r
0552                  02193 no_bat_adjust:
0552   0008           02194         return  
                      02195 
0553                  02196 debug_led:
0553   083B           02197         movf    feed_a2d,w
0554   00C2           02198         movwf   flash_code
0555   0CC2           02199         rrf     flash_code,F
0556   0CC2           02200         rrf     flash_code,F
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0557   0CC2           02201         rrf     flash_code,F
0558   0CC2           02202         rrf     flash_code,F
0559   0CC2           02203         rrf     flash_code,F
055A   0C42           02204         rrf     flash_code,W
055B   3903           02205         andlw   3
055C   3E01           02206         addlw   1
055D   00C2           02207         movwf   flash_code
055E   24D8           02208         call    flash_error
055F   083B           02209         movf    feed_a2d,w
0560   00C2           02210         movwf   flash_code
0561   0CC2           02211         rrf     flash_code,F
0562   0CC2           02212         rrf     flash_code,F
0563   0C42           02213         rrf     flash_code,W
0564   3907           02214         andlw   7
0565   3E01           02215         addlw   1
0566   00C2           02216         movwf   flash_code
0567   24D8           02217         call    flash_error
0568   083B           02218         movf    feed_a2d,w
0569   3907           02219         andlw   7
056A   3E01           02220         addlw   1
056B   00C2           02221         movwf   flash_code
056C   24D8           02222         call    flash_error
                      02223 
056D   3003           02224         movlw   3
056E   00B3           02225         movwf   a2d_chan
056F   2320           02226         call    acq_a2d                 ; acquire chan3 a2d - feed rate
0570   00BB           02227         movwf   feed_a2d
0571   0064           02228         clrwdt
0572   2D53           02229         goto    debug_led
                      02230 
                      02231 ; special 16 bit multiply routine
                      02232 ;  temp:mult2 = mult2 x mult1
                      02233 ; returns temp:mult2 / 64
                      02234 ; returnw r2:r1 = mult2 x mult1
                      02235 ;
0573                  02236 mult_sub:
0573   0849           02237         movf    mult1,W                 ; if either mult1 or mult2 is 0
0574   1903           02238         btfsc   STATUS,Z
0575   2D89           02239         goto    mult_ret_0              ; returns 0
0576   084A           02240         movf    mult2,W                 ; if either mult1 or mult2 is 0
0577   1903           02241         btfsc   STATUS,Z
0578   2D89           02242         goto    mult_ret_0              ; returns 0
0579   01CA           02243         clrf    mult2
057A   01A2           02244         clrf    temp
057B                  02245 mult_lp:
057B   07CA           02246         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
057C   1803           02247         btfsc   STATUS,C
057D   0AA2           02248         incf    temp,f
057E   0BC9           02249         decfsz  mult1,F
057F   2D7B           02250         goto    mult_lp
0580   084A           02251         movf    mult2,w
0581   00CE           02252         movwf   r1
0582   0822           02253         movf    temp,w
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0583   00CF           02254         movwf   r2
0584   0DCA           02255         rlf     mult2,f                 ; div result by 64
0585   0DA2           02256         rlf     temp,f
0586   0DCA           02257         rlf     mult2,f
0587   0D22           02258         rlf     temp,w
0588   0008           02259         return
                      02260 
0589                  02261 mult_ret_0
0589   3400           02262         retlw   0
                      02263 
                      02264 
                      02265 
                      02266 ; special 16 bit multiply routine
                      02267 ;  temp:mult2 = mult2 x mult1
                      02268 ; returns (temp:mult2 + 63) / 64
                      02269 ;
058A                  02270 mult_sub1:
058A   0849           02271         movf    mult1,W                 ; if either mult1 or mult2 is 0
058B   1903           02272         btfsc   STATUS,Z
058C   2D89           02273         goto    mult_ret_0              ; returns 0
058D   084A           02274         movf    mult2,W                 ; if either mult1 or mult2 is 0
058E   1903           02275         btfsc   STATUS,Z
058F   2D89           02276         goto    mult_ret_0              ; returns 0
0590   01CA           02277         clrf    mult2
0591   01A2           02278         clrf    temp
0592                  02279 mult_lp1:
0592   07CA           02280         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
0593   1803           02281         btfsc   STATUS,C
0594   0AA2           02282         incf    temp,f
0595   0BC9           02283         decfsz  mult1,F
0596   2D92           02284         goto    mult_lp1
0597   303F           02285         movlw   0x3f
0598   07CA           02286         addwf   mult2,f                 
0599   1803           02287         btfsc   STATUS,C
059A   0AA2           02288         incf    temp,f                  ; temp:mult2 += 63
059B   0DCA           02289         rlf     mult2,f                 ; div result by 64
059C   0DA2           02290         rlf     temp,f
059D   0DCA           02291         rlf     mult2,f
059E   0D22           02292         rlf     temp,w
059F   0008           02293         return
                      02294 
                      02295 ; enable usart
05A0                  02296 usart_enable:
                      02297         ; init usart
05A0   1683           02298         bsf     STATUS,RP0              ; goto bank 1
                      02299 ;       movlw   0xff                    ; 1200 baud
05A1   3081           02300         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05A2   0099           02301         movwf   SPBRG
05A3   3020           02302         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05A4   0098           02303         movwf   TXSTA                   ; asynchronous mode, low speed mode
05A5   1283           02304         bcf     STATUS,RP0              ; goto bank 0
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05A6   3090           02305         movlw   0x90                    ; 8-bit receive, receiver enabled
05A7   0098           02306         movwf   RCSTA                   ; serial port enabled
05A8   0008           02307         return
                      02308 
                      02309 ; disable usart
05A9                  02310 usart_disable
05A9   1683           02311         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05AA   0198           02312         clrf    TXSTA                   ; disable transmitter
05AB   1283           02313         bcf     STATUS,RP0              ; goto bank 0
05AC   0198           02314         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02315 ;       bsf     PORTC,6                 ; beep is 30 ff's
05AD   1307           02316         bcf     PORTC,6                 ; beep is 30 00's
05AE   0008           02317         return
                      02318 
                      02319 ; disable usart with no beep
05AF                  02320 usart_off
05AF   1683           02321         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05B0   0198           02322         clrf    TXSTA                   ; disable transmitter
05B1   1283           02323         bcf     STATUS,RP0              ; goto bank 0
05B2   0198           02324         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02325 ;       bcf     PORTC,6                 ; no beep - beep is 30 ff's
05B3   1707           02326         bsf     PORTC,6                 ; no beep - beep is 30 00's
05B4   0008           02327         return
                      02328 
                      02329 ; if there is data in RCREG, return in W (returned as 0x30 + data)
05B5                  02330 getchar:
05B5   0103           02331         clrw
05B6   1E8C           02332         btfss   PIR1,RCIF               ; if not input data, return 0 in W
05B7   0008           02333         return
05B8   081A           02334         movf    RCREG,W                 ; else read input data
05B9   3E30           02335         addlw   0x30
05BA   0008           02336         return
                      02337 
                      02338 ; get transmits status, 0 = not ok to send, 1 = ok to send
05BB                  02339 xmit_status:
05BB   0103           02340         clrw
05BC   1A0C           02341         btfsc   PIR1,TXIF               ; if xmit not empty, skip
05BD   3001           02342         movlw   1
05BE   0008           02343         return
                      02344 
                      02345 ; send data in (W) to usart
05BF                  02346 putchar:
05BF   0099           02347         movwf   TXREG                   ; write data to usart
05C0   0008           02348         return
                      02349 
                      02350 ; called every 5 msec to handle anything related to the remote control
05C1                  02351 chk_remote:
05C1   1AD0           02352         btfsc remote_toggle,REMOTE_BIT  ; if remote not enabled, exit
05C2   0008           02353         return
05C3   0851           02354         movf    remote_block,W          ; if remote blocking,
05C4   1903           02355         btfsc   STATUS,Z                ;
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C5   2DCF           02356         goto    no_blocking
05C6   3C42           02357         sublw   0x42                    ;  if 100msec had elapsed,
05C7   1903           02358         btfsc   STATUS,Z                ;
                      02359 ;       bcf     PORTC,6                 ;   turn off beep - beep is 30 ff's
05C8   1707           02360         bsf     PORTC,6                 ;   turn off beep - beep is 30 00's
05C9   0BD1           02361         decfsz  remote_block,F          ;  if last block,
05CA   0008           02362         return
05CB   25A0           02363         call    usart_enable            ;   re-enable usart
05CC   25B5           02364         call    getchar                 ;   flush
05CD   25B5           02365         call    getchar                 ;    input fifo
05CE   0008           02366         return
                      02367 
05CF                  02368 no_blocking:
05CF   25B5           02369         call    getchar
05D0   39FF           02370         andlw   0xff                    ; if no input, exit
05D1   1903           02371         btfsc   STATUS,Z
05D2   0008           02372         return
05D3   3C38           02373         sublw   0x38    
05D4   1903           02374         btfsc   STATUS,Z                ; got 8 from transmitter - toggle sweep function
05D5   2DE1           02375         goto    sweep_toggled
05D6   3C06           02376         sublw   0x06
05D7   1903           02377         btfsc   STATUS,Z                ; got 2 from transmiiter - toggle feed functions
05D8   2DE6           02378         goto    feed_toggled
05D9   30A0           02379         movlw   0xa0
05DA   00D1           02380         movwf   remote_block
                      02381 ;no long beep   call    usart_disable
05DB   25AF           02382         call    usart_off               ; no long beep
05DC   0008           02383         return
                      02384 
05DD                  02385 set_remote_block
05DD   3053           02386         movlw   BLOCK_CNT
05DE   00D1           02387         movwf   remote_block
05DF   25A9           02388         call    usart_disable
05E0   0008           02389         return
                      02390 
05E1                  02391 sweep_toggled:
05E1   301E           02392         movlw   0x1e                    ; set up to send 30 FF's
05E2   00D2           02393         movwf   FF_count
05E3   3002           02394         movlw   SWEEP_TOGGLE
05E4   06D0           02395         xorwf   remote_toggle,F
                      02396 ;       movlw   8                       ; DEBUG
                      02397 ;       movwf   beep_count              ; DEBUG
05E5   2DDD           02398         goto    set_remote_block
                      02399 
05E6                  02400 feed_toggled:
05E6   301E           02401         movlw   0x1e                    ; set up to send 30 FF's
05E7   00D2           02402         movwf   FF_count
05E8   3001           02403         movlw   FEED_TOGGLE
05E9   06D0           02404         xorwf   remote_toggle,F
                      02405 ;       movlw   2                       ; DEBUG
                      02406 ;       movwf   beep_count              ; DEBUG
05EA   2DDD           02407         goto    set_remote_block
                      02408 
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02409 
                      02410 
                      02411 ; Current sweep/2-line switch configuration.
                      02412 ; Sweep Enable SPST (On/Off) rocker, Sweep On / Sweep Off, input ot uC.
                      02413 ; Sweep Mode SPDT (On/Off/On) rocker, Narrow 2-line / Continuous Sweep / Wide 2-line, either On position
                             allows respective 2-line
                      02414 ; limit switch to be input to the uC.
                      02415 ; Sweep Enable switch  must be on for sweep motor to turn on in any sweep mode.
                      02416 ; Continuous sweep is when Sweep Mode Switch is off (center position), not allowing any 2-line limit swi
                            tch detection.
                      02417 ; Narrow or Wide 2-Line mode is when Sweep Mode Switch is on in either direction allowing either narrow 
                            or wide limit
                      02418 ; switch detection.
                      02419 ; If sweep is on in continuous mode and then it is switched to any 2-line mode, a ball could be released
                             before the sweep stops at 
                      02420 ; a 2-line limit switch, because we do not know we are in 2-line mode until the first 2-line limit switc
                            h is detected.
                      02421 ; When a 2-line limit switch is detected (change of state), the feed motor speed is restricted so ball f
                            eed rate is slower than
                      02422 ; side to side sweep.
                      02423 
                      02424 
05EB                  02425 chk_2linesw:                                    ; called every 5ms
05EB   1C4D           02426         btfss   sweep_is_on,0           ; If sweep motor on flag is on, I.E. sweep switch or remote turn
                            ed sweep on
05EC   2E1E           02427         goto    normal_feed_rate        ; If sweep motor on flag is off, set feed rate to normal.
                      02428 
05ED   1E05           02429         btfss   PORTA,LINESWBIT
05EE   2621           02430         call    restrict_feed_rate
                      02431 
                      02432 ; THE FOLLOWING TWO LINES CORRECTED THE PROBLEM IF IN 2-LINE MODE AND 2-LINE LIMIT SWITCH ON (MACHINE ST
                            OPPED
                      02433 ; AT 2-LINE), WHEN 2-LINE ROCKER WAS TURNED OFF, SWEEP MOTOR WOULD NOT START BACK UP UNTIL SWEEP SWITCH 
                            WAS TOGGLED
                      02434 
05EF   1A05           02435         btfsc   PORTA,LINESWBIT         ; IF 2-LINE LIMIT SWITCH IS OFF...
05F0   1587           02436         bsf             PORTC,SWEEP_EN          ; TURN ON SWEEP MOTOR
                      02437 
                      02438         
                      02439 
05F1   0855           02440         movf    linesw_toggle,W         ; GET 2-LINE LIMIT SWITCH TOGGLE FLAG BYTE
05F2   3910           02441         andlw   0x10                            ; BIT 4 IS THE ACTUAL FLAG, GET RID OF OTHER BITS (THERE
                             SHOULDN'T BE ANY)
05F3   0605           02442         xorwf   PORTA,W                         ; COMPARE TO PORTA
05F4   3910           02443         andlw   0x10                            ; GET RID OF EXTRA BITS AGAIN
05F5   1903           02444         btfsc   STATUS,Z                        ; DID 2-LINE LIMIT SWITCH CHANGE STATE?
05F6   2DF8           02445         goto    linesw_no_change        ;
05F7   2E01           02446         goto    linesw_change           ;
05F8                  02447 linesw_no_change:                               ; IF 2-LINE LIMIT SWITCH DID NOT CHANGE STATE
05F8   1E05           02448         btfss   PORTA,LINESWBIT         ; If 2-Line limit switch is on, don't do anything, otherwise sta
                            rt sweep timer.
05F9   0008           02449         return
05FA   3000           02450         movlw   0                                       ;
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05FB   0656           02451         xorwf   sweep_timer,W           ; IF SWEEP TIMER IS 0, 6 SECONDS SINCE LAST LINE SWITCH CLOSURE 
                            DETECTED
05FC   1D03           02452         btfss   STATUS,Z                        ; THEN ASSUME NOT 2-LINE MODE AND SET FEED RATE BACK TO 
                            NORMAL ALGORITHM
05FD   0008           02453         return                                          ; IF TIMER NOT EXPIRED, HAVEN'T WAITED LONG ENOU
                            GH
05FE   3000           02454         movlw   0x00                            ; 0=NORMAL FEED RATE ALGORITHM
05FF   00D7           02455         movwf   feed_rate_type          ; SET FEED RATE TO NORMAL ALGORITHM
0600   0008           02456         return                                          ;
0601                  02457 linesw_change:                                  ; IF 2-LINE SWITCH DID CHANGE STATE
                      02458 ;       movlw   0x01                            ; 1=RESTRICTED FEED RATE FOR 2-LINE MODE
                      02459 ;       movwf   feed_rate_type          ; SET FEED RATE TO RESTRICTED FOR 2-LINE MODE
0601   3006           02460         movlw   0x06                            ; 8 SECONDS
0602   00D6           02461         movwf   sweep_timer                     ; START TIMER AT 6 SECONDS (REALLY x SEC, BECAUSE OF MIS
                            CALCULATION WITH 5MS TIMER)
0603   3010           02462         movlw   0x10                            ;
0604   06D5           02463         xorwf   linesw_toggle,F         ; IF CHANGE (TOGGLE), PUT NEW VALUE IN LINESW_TOGGLE
                      02464 ;       btfss   PORTA,LINESWBIT         ; CHECK FOR 2-LINE LIMIT SWITCH ON (LOW)
                      02465 ;       bcf             PORTC,SWEEP_EN          ; IF 2-LINE LIMIT SWITCH IS ON, TURN OFF SWEEP MOTOR, TH
                            EN LEAVE ROUTINE
                      02466 ;       return                                          ; IF 2-LINE LIMIT SWITCH IS OFF, LEAVE ROUTINE
0605   1A05           02467         btfsc   PORTA,LINESWBIT
0606   0008           02468         return
0607   3001           02469         movlw   0x01
0608   00D7           02470         movwf   feed_rate_type
0609   1187           02471         bcf             PORTC,SWEEP_EN
060A   0008           02472         return
060B                  02473 linesw_toggle_init:                             ; WHEN SWEEP IS JUST TURNED ON, MUST MATCH LINESW_TOGGLE
                             VALUE TO 2-LINE SWITCH VALUE
060B   1A05           02474         btfsc   PORTA,4                         ;
060C   2E0E           02475         goto    linesw_toggle_set       ;
060D   2E11           02476         goto    linesw_toggle_clr       ;
060E                  02477 linesw_toggle_set:                              ;
060E   3010           02478         movlw   0x10                            ;
060F   00D5           02479         movwf   linesw_toggle           ;
0610   0008           02480         return                                          ;       
0611                  02481 linesw_toggle_clr:                              ;
0611   01D5           02482         clrf    linesw_toggle           ;
0612   0008           02483         return                                          ;
                      02484 
                      02485 ; IF THERE WAS A LINESW_TOGGLE CHANGE AND 2-LINE LIMIT SWITCH IS NOW OFF (SWEEPING), START TIMER AT 0 (C
                            LEAR), IF NOT
                      02486 ; ANOTHER TOGGLE WITHIN APPROX. 6 SECONDS, THEN 2-LINE MODE IS NOW OFF AND USE NORMAL FEED RATE ALGORITH
                            M.
                      02487 ;
                      02488 
0613                  02489 chk_intf:                                               ; CALLED EVERY 5MS
0613   1C4D           02490         btfss   sweep_is_on,0           ; IF SWEEP MOTOR ON FLAG IS ON
0614   0008           02491         return                                          ;
                      02492 ;       btfsc   INTCON,INTF                     ; CHECK FOR RB0/INT FLAG SET
                      02493 ;       btfsc   PORTB,0                         ; Flag was set, now double check ball detect switch inpu
                            t still on.
                      02494 ;       return                                          ;
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02495 ;       goto    ball_dropped            ; Double checked that ball was dropped.
0615   1C8B           02496         btfss   INTCON,INTF                     ; If RBO/INT flag set, double check switch is still on (
                            debounce/noise filter).
0616   0008           02497         return                                          ; If RBO/INT flag not set, return.
0617   1C06           02498         btfss   PORTB,0                         ; If ball detect switch is still on, then ball was dropp
                            ed.
0618   2E1B           02499         goto    ball_dropped            ;
0619   108B           02500         bcf             INTCON,INTF                     ; If ball detect switch is no longer on, it was 
                            a spurious detection, clear INTF and return.
061A   0008           02501         return
061B                  02502 ball_dropped:                                   ;
061B   1587           02503         bsf             PORTC,SWEEP_EN          ; ...THEN TURN ON SWEEP MOTOR
061C   108B           02504         bcf             INTCON,INTF                     ;
061D   0008           02505         return                                          ;
061E                  02506 normal_feed_rate
061E   3000           02507         movlw   0x00                            ; 0=Normal feed rate algorithm
061F   00D7           02508         movwf   feed_rate_type          ; If sweep motor on flag is not on, set feed rate to normal.
0620   0008           02509         return                                          ;
0621                  02510 restrict_feed_rate
0621   3001           02511         movlw   0x01
0622   00D7           02512         movwf   feed_rate_type
0623   0008           02513         return
                      02514 
                      02515 ; WHEN 2-LINE MODE (LINE LIMIT SWITCH) IS DETECTED, MUST REDUCE MAXIMUM BALL FEED RATE SO THAT TIME BETW
                            EEN
                      02516 ; BALLS FED IS LONGER THAN TIME TO SWEEP SIDE TO SIDE (APPROX. 5 SECONDS), I.E. LIMIT FEED MOTOR SPEED.
                      02517 ; WHEN 2-LINE MODE IS NOT DETECTED FOR LONGER THAN A SIDE TO SIDE SWEEP, MUST GO BACK TO NORMAL FEED RAT
                            E ALGORITHM.
                      02518 
                      02519 
                      02520 
0624                  02521 toggle_green_led:
0624   3004           02522         movlw   GREEN_LED_ON    ; value to turn on green LED
0625   0686           02523         xorwf   PORTB,f                 ; toggle green LED
0626   0008           02524         return
                      02525 
0627                  02526 toggle_red_led:
0627   3002           02527         movlw   RED_LED_ON              ; value to turn on red LED
0628   0686           02528         xorwf   PORTB,f                 ; toggle red LED
0629   0008           02529         return
                      02530 
                      02531 ; The following lines were a part of the fix for the ball jam problem at power-on.
                      02532 ; If the machine was powered on and a ball that was already in the chute got jammed in the server wheels
                            , the machine
                      02533 ; would not shut down with an overcurrent error if the speed pot was set fairly low.
                      02534 ; The top serve motor is the first to turn on and would cause the jam.
                      02535 ; The jammed top server motor would just continue to draw excessive current until it's free-wheeling dio
                            de would heat up and fail.
                      02536 ; The changes dated 06/09/05 make the top serve motor spin up quickly at power-on, regardless of the pot
                             setting.
                      02537 ; Then if a ball gets jammed at power-on, enough current is present to trip the overcurrent circuit.
062A                  02538 top_not_inited:                         ; 06/09/05 MJZ added this line
062A   308F           02539         movlw   0x8f                    ; 06/09/05 MJZ added this line
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

062B   00A4           02540         movwf   t_top_pwm               ; 06/09/05 MJZ added this line
062C   0008           02541         return                                  ; 06/09/05 MJZ added this line
                      02542 
                      02543 ; The following lines and all lines dated 06/15/05 are changes that, at power-on, ramp up the bottom ser
                            ve motor to fairly 
                      02544 ; fast speed, regardless of the pot setting, before it is allowed to be set to the pot. When the changes
                            , 06/09/05, were added
                      02545 ; to ramp up the top serve motor at power-on, the top serve motor, if the speed pot was set low, would s
                            low down before the 
                      02546 ; bottom serve motor would start spinning. The bottom serve motor would pull a ball, that was already in
                             the chute, into the
                      02547 ; wheels and the serve motors would jam on the ball without overcurrent detection, because both motors a
                            re drawing too little
                      02548 ; current. Now the bottom serve motor will draw enough current at the ball jam time to trip the overcurr
                            ent detection circuit.
062D                  02549 bot_not_inited:                         ; 06/15/05 MJZ added this line
062D   308F           02550         movlw   0x8f                    ; 06/15/05 MJZ added this line
062E   00A6           02551         movwf   t_bot_pwm               ; 06/15/05 MJZ added this line
062F   0008           02552         return                                  ; 06/15/05 MJZ added this line
                      02553 
                      02554 
                      02555         END                       ; directive 'end of program'
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

ADCON0                            0000001F
ADCON0VAL                         00000081
ADCON1                            0000009F
ADCON1VAL                         00000002
ADCS0                             00000006
ADCS1                             00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRES                             0000001E
BATTERY                           00000002
BEEP_OFF                          00000040
BF                                00000000
BLOCK_CNT                         00000053
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
ELEV_EN                           00000004
F                                 00000001
FEEDBIT                           00000003
FEED_BIT                          00000000
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

FEED_LED                          00000003
FEED_TOGGLE                       00000001
FERR                              00000002
FF_count                          00000052
FLASH_TIME                        00000030
FSR                               00000004
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GREEN_LED                         00000002
GREEN_LED_ON                      00000004
HighImpInt                        000000AF
HighImpInt2                       000000B1
HighImpShrt                       0000008B
Highpulse                         00000086
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTCONVAL                         000000A0
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
LINESWBIT                         00000004
LowImpInt                         000000DD
LowImpInt2                        000000DF
LowImpShrt                        000000BA
Lowpulse                          000000B6
MSEC5_LSB                         000000A8
MSEC5_MSB                         00000061
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTIONVAL                         000000C8
OPTION_REG                        00000081
P                                 00000004
PAUSE_TIME                        00000004
PCFG0                             00000000
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

PCFG1                             00000001
PCFG2                             00000002
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PMADR                             0000010D
PMADRH                            0000010F
PMCON1                            0000018C
PMDATA                            0000010C
PMDATH                            0000010E
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PWM1                              00000002
PWM2                              00000001
PWMADJUSTVAL                      00000016
PWMMAXVAL                         0000001D
PWMOUTBIT                         00000000
PwmInt                            00000083
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RED_LED                           00000001
RED_LED_ON                        00000002
REMOTE_BIT                        00000005
REMOTE_ON                         00000020
RP0                               00000005
RP1                               00000006
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SMP                               00000007
SPBRG                             00000099
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

SPDBIT                            00000001
SPEN                              00000007
SPINPBIT                          00000000
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SWEEPEN                           00000004
SWEEP_BIT                         00000001
SWEEP_EN                          00000003
SWEEP_TOGGLE                      00000002
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TICK_CNT                          00000057
TMR0                              00000001
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISAVAL                          0000003F
TRISB                             00000086
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

TRISBVAL                          000000F1
TRISC                             00000087
TRISCVAL                          000000A0
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WaitAdc                           00000334
WaitNoInt                         0000032F
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CP_ALL                           00003FEF
_CP_OFF                           00003FFF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F73                           00000001
a2d_chan                          00000033
acq_a2d                           00000320
adjust_backspin                   0000042E
adjust_backspin1                  0000035B
adjust_bs1                        0000038F
adjust_topspin                    000003E4
adjust_topspin1                   00000399
adjust_ts                         00000418
at0sec                            00000046
at10sec                           00000109
at11sec                           00000109
at12sec                           0000010A
at13sec                           0000010A
at14sec                           0000010B
at15sec                           0000010D
at1sec                            000000E3
at2sec                            000000FA
at3sec                            000000FA
at4sec                            000000FB
at5sec                            000000FC
at6sec                            00000104
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

at7sec                            00000105
at8sec                            00000108
at9sec                            00000109
atcom                             0000010C
ball_dropped                      0000061B
bat_a2d                           0000003A
bat_dead                          000004EA
bat_dead_loop                     000004F1
bat_led_xit                       00000538
beep_count                        00000054
between_2.4v_2.5v                 00000526
bot_inited                        00000029
bot_not_inited                    0000062D
bs_com                            00000445
c_bot_pwm                         00000027
c_top_pwm                         00000025
calc_bot_pwm                      0000033F
calc_feed                         00000212
calc_pwm                          0000003D
calc_top_pwm                      000003C9
charg_lt_3_0                      0000046E
charg_lt_3_2                      00000465
charg_lt_3_3                      00000464
chk_2linesw                       000005EB
chk_feed_rate_type                00000199
chk_feed_xit                      000002CD
chk_intf                          00000613
chk_rbif                          00000484
chk_rbif1                         000004AB
chk_rbif2                         0000049B
chk_rbif3                         0000049A
chk_remote                        000005C1
counter                           0000002E
counter2                          0000002F
debug_led                         00000553
dec_bot                           000001DD
dec_bot_by_8                      000001E3
dec_top                           000001C2
dec_top_by_8                      000001C8
delay                             00000048
delaylp                           0000032D
delta_c                           0000003E
delta_s                           0000003F
enable_feed                       000001FE
err_no                            00000041
feed_0_2                          00000235
feed_10_12                        0000029E
feed_12_off                       000002BC
feed_2_4                          00000245
feed_4_6                          00000250
feed_6_8                          00000262
feed_8_10                         00000280
feed_a2d                          0000003B
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

feed_end                          000002BF
feed_inited                       0000002A
feed_off                          000001F2
feed_ok                           00000145
feed_ok1                          000001A1
feed_rate_type                    00000057
feed_toggled                      000005E6
fgrn_loop                         00000473
flash_code                        00000042
flash_com                         00000471
flash_error                       000004D8
flash_greenled                    000004DB
flash_grn                         00000466
flash_red                         0000046A
getchar                           000005B5
grn_off                           00000529
grn_on                            00000534
high_spd                          00000400
high_spd1                         00000377
i_second                          0000006F
idle                              00000047
inc_bot_by_8                      000001DA
inc_top_by_8                      000001BF
init_bat_level                    0000050B
init_done                         00000036
init_enable_feed                  000002DE
init_feed_pwm                     000002CE
init_feed_xit                     000002E6
init_pl_com                       0000051A
init_update_feed                  000002E4
last_sweep                        00000053
led_bits                          00000043
linesw_change                     00000601
linesw_no_change                  000005F8
linesw_toggle                     00000055
linesw_toggle_clr                 00000611
linesw_toggle_init                0000060B
linesw_toggle_set                 0000060E
main                              00000010
moterr_lp                         000004C6
motor_error                       000004BF
msec5                             00000035
mult1                             00000049
mult2                             0000004A
mult3                             0000004B
mult_lp                           0000057B
mult_lp1                          00000592
mult_ret_0                        00000589
mult_sub                          00000573
mult_sub1                         0000058A
no_bat_adjust                     00000552
no_blocking                       000005CF
no_remote_feed                    000001EE
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

no_spin                           00000449
no_spin1                          000003C1
normal_feed_rate                  0000061E
not_second                        00000064
npwr_on_reset                     00000162
over1v                            000001FB
over2_5v                          0000052E
over2_6v                          00000531
over_pt4_v                        000002DB
pause                             000004E5
pl_com                            0000054C
power_is_off                      0000044C
power_level                       00000045
power_level_r                     00000046
power_level_tmp                   00000047
putchar                           000005BF
pwmdesired                        00000030
pwmhelp                           00000032
pwmmax                            00000031
pwr_off_loop                      00000492
pwr_off_lp                        00000499
pwr_on_code                       00000023
pwr_on_reset                      00000166
r1                                0000004E
r2                                0000004F
rbif_bits                         0000004C
rbif_lp                           000004B4
rbif_wait                         00000044
record_bat_level                  0000053D
remote_block                      00000051
remote_off                        0000031D
remote_toggle                     00000050
restrict_feed_rate                00000621
sec0init                          00000110
seconds                           00000034
set_bot                           000001E5
set_pwm_value                     000002CB
set_remote_block                  000005DD
set_top                           000001CA
slow_spd                          000003BC
slow_spd1                         00000444
soft_pwm                          00000037
spd_a2d                           00000039
spin_a2d                          00000038
stacks                            0000002D
stackw                            0000002C
status_temp                       00000021
sweep_a2d                         0000003C
sweep_exit                        000002FA
sweep_exit1                       000002FA
sweep_inited                      0000002B
sweep_is_on                       0000004D
sweep_off                         000002F6
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

sweep_on                          000002EF
sweep_remote                      000002FB
sweep_timer                       00000056
sweep_toggled                     000005E1
t_bot_pwm                         00000026
t_top_pwm                         00000024
temp                              00000022
tick0                             0000016C
tick1                             00000179
tick2                             00000187
tick3                             0000018C
tick4                             000001A2
tick5                             000001A8
tick6                             000001AB
tick7                             000001AE
toggle_green_led                  00000624
toggle_red_led                    00000627
top_inited                        00000028
top_not_inited                    0000062A
ts_com1                           000003BD
under2_5v                         00000524
upd_exit                          000001CC
update_bat_led                    0000051C
update_bot_pwm                    000001CD
update_done                       000001E7
update_feed                       00000207
update_feed_pwm                   000001E8
update_remote                     000002FE
update_rmxit                      0000031C
update_sweep                      000002E7
update_top_pwm                    000001B2
usart_disable                     000005A9
usart_enable                      000005A0
usart_off                         000005AF
w_temp                            00000020
wait                              000004F4
wait_cnt                          00000040
wait_no_clrwdt                    00000500
wait_reset_lp                     00000460
waitlp                            000004F5
waitlp1                           00000501
xmit_status                       000005BB
MPASM  5.37                      CS019B06.ASM   1-26-2013  14:53:43         PAGE 61


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XX--XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1582
Program Memory Words Free:  2514


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    21 reported,     0 suppressed

