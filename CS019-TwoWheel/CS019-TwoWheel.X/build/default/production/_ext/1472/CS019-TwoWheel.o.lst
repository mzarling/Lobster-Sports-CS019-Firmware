MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; CS019B05, 08/07/09, changing code to slow down new serve motors from Hillhouse products.
                      00002 
                      00003         list      p=16f73            ; list directive to define processor
                      00004         #include <p16f73.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Jan 06 2020
                      00005 ;  MPASM PIC16F73 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2020 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00456         LIST
                      00005 
                      00006 ;       __CONFIG   _CP_OFF & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
2007   3FE6           00007         __CONFIG   _CP_ALL & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
                      00008 
                      00009 ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00010 ; The lables following the directive are located in the respective .inc file.
                      00011 ; See respective data sheet for additional information on configuration word.
                      00012 
                      00013 ;*********************************************************************
                      00014 ; Definitions
                      00015 ;*********************************************************************
                      00016 ;
  000000A8            00017 MSEC5_LSB       equ     0xa8    
                      00018 ;NORMAL 
  00000061            00019 MSEC5_MSB       equ     0x61
                      00020 
                      00021 ;SIM MSEC5_MSB  equ     0xfe
                      00022 
                      00023 ; msec5 init value to count up to 1 second
                      00024 ; 200 5msec ticks (255 - 200)
                      00025 ;TICK_CNT       equ     0x37
  00000057            00026 TICK_CNT        equ     0x57
                      00027 ; remote block init value to count down to 1/2 second
  00000053            00028 BLOCK_CNT       equ     0x53
                      00029 ; I/O, Interrupt and Option Definitions
                      00030 ;
                      00031 ;OPTIONVAL      equ     88h             ;10001000b: portB no pull-up, tmr0 int
  000000C8            00032 OPTIONVAL       equ     0c8h            ;11001000b: portB no pull-up,  RB0/INT rising edge, tmr0 int
                      00033 ;OPTIONVAL      equ     088h            ;11001000b: portB no pull-up,  RB0/INT falling edge, tmr0 int
  000000A0            00034 INTCONVAL       equ     0a0h            ; set GIE, TOIE
                      00035 
                      00036                                         ; port A:
  00000000            00037 SPINPBIT        equ     00h             ; analog input for ball spin     a/d channel 0
  00000001            00038 SPDBIT          equ     01h             ; analog input for ball speed    a/d channel 1
  00000002            00039 BATTERY         equ     02h             ; analog input for battery level a/d channel 2
  00000003            00040 FEEDBIT         equ     03h             ; analog input for feed rate     a/d channel 3
  00000004            00041 SWEEPEN         equ     04h             ; analog input for sweep enable switch a/d channel 4 (PORTA bit 
                            5)
  0000003F            00042 TRISAVAL        equ     3fh             ;00111111b: A0 - A5 as input
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000002            00043 ADCON1VAL       equ     2               ; RA0,1,2,3,5 are analog        ;MJZ DEBUG, COMMENTED THIS LINE
                      00044 ;ADCON1VAL      equ     6               ;MJZ DEBUG, ADDED THIS LINE, CHANGED ALL ANALOG INPUTS TO DIGITA
                            L INPUTS
  00000081            00045 ADCON0VAL       equ     081h            ;10000001b: fosc/32, channel 0
  00000004            00046 LINESWBIT       equ 04h                 ;MJZ ADDED LINE, 2-LINE LIMIT SWITCH INPUT BIT, LOW=SWITCH ON, H
                            IGH=SWITCH OFF
                      00047 
                      00048                                         ; port B:
  000000F1            00049 TRISBVAL        equ     0f1h            ;11110001b: B1,B2,B3 as output
  00000001            00050 RED_LED         equ     1               ;  bit 1 controls red led
  00000002            00051 GREEN_LED       equ     2               ;  bit 2 controls green led
  00000003            00052 FEED_LED        equ     3               ;  bit 3 controls feed led
  00000002            00053 RED_LED_ON      equ     2               ;  value to turn on red led
  00000004            00054 GREEN_LED_ON    equ     4               ;  value to turn on green led
                      00055 
                      00056                                         ; port C:
  00000000            00057 PWMOUTBIT       equ     00h             ; software PWM output for feed motor
  00000003            00058 SWEEP_EN        equ     03h             ; sweep motor enable (digital out)
  00000004            00059 ELEV_EN         equ     04h             ; elevation motor enable (digital out)
  00000040            00060 BEEP_OFF        equ     0x40            ; bit 6 on disables beep
  000000A0            00061 TRISCVAL        equ     0a0h            ;10100000b: C7,C5 as input
  00000002            00062 PWM1            equ     2
  00000001            00063 PWM2            equ     1
                      00064 
  00000030            00065 FLASH_TIME      equ     30h
  00000004            00066 PAUSE_TIME      equ     4
                      00067 
                      00068 ;***** VARIABLE DEFINITIONS
  00000020            00069 w_temp          equ     0x20            ; variable used for context saving 
  00000021            00070 status_temp     equ     0x21            ; variable used for context saving
  00000022            00071 temp            equ     0x22
  00000023            00072 pwr_on_code     EQU     0x23
  00000024            00073 t_top_pwm       equ     0x24            ; target value for top PWM
  00000025            00074 c_top_pwm       equ     0x25            ; current value for top PWM
  00000026            00075 t_bot_pwm       equ     0x26            ; target value for bot PWM
  00000027            00076 c_bot_pwm       equ     0x27            ; current value for bot PWM
  00000028            00077 top_inited      equ     0x28            ; top motor init done
  00000029            00078 bot_inited      equ     0x29            ; bottom motor init done
  0000002A            00079 feed_inited     equ     0x2a            ; feed motor init done
  0000002B            00080 sweep_inited    equ     0x2b            ; sweep motor init done
                      00081 
  0000002C            00082 stackw          equ     0x2c            ; stack to push/pop the W-register
  0000002D            00083 stacks          equ     0x2d            ; stack to push/pop the STATUS-reg
  0000002E            00084 counter         equ     0x2e            ; counter: input frequency
                      00085                                         ;   f1 = crystalfreq. / 4 / 255
  0000002F            00086 counter2        equ     0x2f            ; counter2: input frequency
                      00087                                         ;   f2 = f1 / 128
  00000030            00088 pwmdesired      equ     0x30            ; target PWM of feed motor value 0..255
  00000031            00089 pwmmax          equ     0x31            ; register to support generation PWM
  00000032            00090 pwmhelp         equ     0x32            ; used as temp storage of pwmdesired
                      00091 
  00000033            00092 a2d_chan        equ     0x33            ; next channel to acquire a2d
                      00093 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000034            00094 seconds         equ     0x34            ; seconds since poweron
  00000035            00095 msec5           equ     0x35            ; number of 5msec intrs
  00000036            00096 init_done       equ     0x36            ; power up initialization done
  00000037            00097 soft_pwm        equ     0x37            ; software PWM module enabled
                      00098 
  00000038            00099 spin_a2d        equ     0x38            ; a2d value from a2d chan 0
  00000039            00100 spd_a2d         equ     0x39            ; a2d value from a2d chan 1
  0000003A            00101 bat_a2d         equ     0x3a            ; a2d value from a2d chan 2
  0000003B            00102 feed_a2d        equ     0x3b            ; a2d value from a2d chan 3
  0000003C            00103 sweep_a2d       equ     0x3c            ; a2d value from a2d chan 4
                      00104 
  0000003D            00105 calc_pwm        equ     0x3d            ; temporarily variable for calculating PWM
  0000003E            00106 delta_c         equ     0x3e            ; temp var
  0000003F            00107 delta_s         equ     0x3f            ; temp var
                      00108 
  00000040            00109 wait_cnt        equ     0x40            ; counter for wait routine
                      00110 ;err_no         equ     0x41            ; motor error number    ;MJZ COMMENTED THIS LINE
                      00111                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00112                                         ;              4= bottom serve err, 5= sweep motor error
  00000041            00113 err_no          equ     0x41            ; motor error number    ;MJZ ADDED THIS LINE
                      00114                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00115                                         ;              4= bottom serve err, 5= POWER OFF ERROR
  00000042            00116 flash_code      equ     0x42            ; local variable used by motor_err()
  00000043            00117 led_bits        equ     0x43            ; memory copy of LED bits on PORTB
  00000044            00118 rbif_wait       equ     0x44            ; delay for rechecking rbif
                      00119 
  00000045            00120 power_level     equ     0x45            ; power level for set led: 0 is > 2.6v, 1 is > 2.5V, 2 is > 2.4v
                            , 3 is < 2.4v
  00000046            00121 power_level_r   equ     0x46            ; lowest power level for this 16 second period
  00000047            00122 power_level_tmp equ     0x47            ; temp var 
  00000048            00123 delay           equ     0x48            ; delay var
                      00124 
  00000049            00125 mult1           equ     0x49            ; temp var for mult_sub routine
  0000004A            00126 mult2           equ     0x4a            ; temp var for mult_sub routine
  0000004B            00127 mult3           equ     0x4b            ; temp var for mult_sub routine
  0000004C            00128 rbif_bits       equ     0x4c            ; bit mask for checking motor errors
  0000004D            00129 sweep_is_on     equ     0x4d            ; sweep motor on flag
  0000004E            00130 r1              equ     0x4e            ; result of mult1 x mult2
  0000004F            00131 r2              equ     0x4f            ; result of mult1 x mult2
                      00132 
  00000050            00133 remote_toggle   equ     0x50            ; toggle bits for remote control
  00000000            00134 FEED_BIT        equ     0
  00000001            00135 SWEEP_BIT       equ     1
  00000005            00136 REMOTE_BIT      equ     5
  00000001            00137 FEED_TOGGLE     equ     0x01            ; bit 0:  0 = feed off, 1 = feed on
  00000002            00138 SWEEP_TOGGLE    equ     0x02            ; bit 1:  0 = sweep off, 1 = sweep on
  00000020            00139 REMOTE_ON       equ     0x20            ; bit 5:  0 = remote disabled, 1= enabled
  00000051            00140 remote_block    equ     0x51            ; time to block remote transmission input
  00000052            00141 FF_count        equ     0x52            ; remaining FF's to send for beep
  00000053            00142 last_sweep      equ     0x53            ;
  00000054            00143 beep_count      equ     0x54            ; DEBUG
                      00144 
                      00145 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00146 
  00000055            00147 linesw_toggle   equ 0x55        ;MJZ ADDED THIS LINE, BIT 4 IS 2-LINE SWITCH TOGGLE BIT
  00000056            00148 sweep_timer             equ 0x56        ;MJZ ADDED THIS LINE, REACHES 0 MEANS NO 2-LINE SWITCH DETECTED 
                            BETWEEN SIDE TO SIDE SWEEPS
  00000057            00149 feed_rate_type  equ 0x57        ;MJZ ADDED THIS LINE, BIT 0=0 FOR NORMAL FEED RATE ALGORITHM, 
                      00150                                                         ;MJZ ADDED THIS LINE, BIT 0=1 FOR RESTRICTED MAX
                             RATE IN 2-LINE MODE
                      00151 
                      00152 
                      00153 
                      00154 ;----------------------------------------------------------------------
                      00155 ; PWM-module constant
  00000016            00156 PWMADJUSTVAL    equ     .22
                      00157         ; correction number, defined by the following factors:
                      00158         ; time from timer interrupt to executing PC 004 + 3 cycles
                      00159         ; computing time from PC=004 to required edge   +18 cycles
                      00160         ; lost timer cycles due to writing the time     + 2 cycles
                      00161         ; cal desired PWM value to timer loading value  + 2 cycles
                      00162         ; time from timer loading to gen required edge  - 1 cycle
                      00163         ; valid value for hardware (unknown diff to the data sheet)
                      00164         ; 3+18+2+2-1=22
                      00165         ; value value for PICSIM version 5.11 (error of PICSIM):
                      00166         ; 0+18+2+2-1=21
  0000001D            00167 PWMMAXVAL       equ     .29
                      00168         ; loading value for pwmmax
                      00169         ; If n is the maximum length of a high pulse, which has to be
                      00170         ; generated by the skipping method, then is PWMMAXVAL = n+1.
                      00171         ; The max length of a low pulse using the skip method is n-1.
                      00172 
                      00173 
                      00174 
                      00175 ;**********************************************************************
0000                  00176                 ORG     0x000             ; processor reset vector
0000   018A           00177                 clrf    PCLATH            ; ensure page bits are cleared
0001   2810           00178                 goto    main              ; go to beginning of program
                      00179 
                      00180 
0004                  00181                 ORG     0x004             ; interrupt vector location
0004   00A0           00182                 movwf   w_temp            ; save off current W register contents
0005   0803           00183                 movf    STATUS,w          ; move status register into W register
0006   1283           00184                 bcf     STATUS,RP0        ; ensure file register bank set to 0
0007   00A1           00185                 movwf   status_temp       ; save off contents of STATUS register
                      00186 
                      00187 ; isr code can go here or be located as a call subroutine elsewhere
0008   190B           00188                 btfsc   INTCON,T0IF      ; check for timer0 interrupt
0009   2083           00189                 call    PwmInt
                      00190 
000A   1283           00191                 bcf     STATUS,RP0        ; ensure file register bank set to 0
000B   0821           00192                 movf    status_temp,w     ; retrieve copy of STATUS register
000C   0083           00193                 movwf   STATUS            ; restore pre-isr STATUS register contents
000D   0EA0           00194                 swapf   w_temp,f
000E   0E20           00195                 swapf   w_temp,w          ; restore pre-isr W register contents
000F   0009           00196                 retfie                    ; return from interrupt
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00197 
0010                  00198 main
                      00199 ; init code 
                      00200         ;configuration of the PWM module
0010   018B           00201         clrf    INTCON                  ; disable all intrs
0011   0197           00202         clrf    CCP1CON                 ; CCP1 Module is off
0012   019D           00203         clrf    CCP2CON                 ; CCP2 Module is off
0013   0181           00204         clrf    TMR0                    ; reset timer
0014   01B0           00205         clrf    pwmdesired              ; reset value of software PWM is 0
0015   01A4           00206         clrf    t_top_pwm
0016   01A6           00207         clrf    t_bot_pwm
0017   01A5           00208         clrf    c_top_pwm
0018   01A7           00209         clrf    c_bot_pwm
0019   01A8           00210         clrf    top_inited
001A   01A9           00211         clrf    bot_inited
001B   01AA           00212         clrf    feed_inited
001C   01AB           00213         clrf    sweep_inited
                      00214 ;       clrw
                      00215 ;       clrf    PORTC                   ; reset all output to 0 before port C
001D   3040           00216         movlw   BEEP_OFF                ; reset all output to 0 except BEEP_OFF before port C
001E   0087           00217         movwf   PORTC                   ; is changed from input to output 
                      00218                                         ; to suppress an uncontrolled
                      00219                                         ; spike
001F   0186           00220         clrf    PORTB                   ; turn off red led, green led, and feed led
0020   01A3           00221         clrf    pwr_on_code             ; reset type code
0021   301D           00222         movlw   PWMMAXVAL               ; set support register
0022   00B1           00223         movwf   pwmmax                  ;
                      00224         ; configuration of the PIC
0023   1683           00225         bsf     STATUS,RP0              ; register page 1
0024   303F           00226         movlw   TRISAVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0025   0085           00227         movwf   TRISA                   ; ...port A
0026   30F1           00228         movlw   TRISBVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0027   0086           00229         movwf   TRISB                   ; ...port B
0028   30A0           00230         movlw   TRISCVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0029   0087           00231         movwf   TRISC                   ; ...port C
002A   3002           00232         movlw   ADCON1VAL               ; set inputs of ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002B   009F           00233         movwf   ADCON1                  ; ...adc
002C   30C8           00234         movlw   OPTIONVAL               ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002D   0081           00235         movwf   OPTION_REG              ; ...PIC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002E   080E           00236         movf    PCON,w                  ; pick up NOT_POR and NOT_BOR
002F   3903           00237         andlw   3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0030   148E           00238         bsf     PCON,NOT_POR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0031   140E           00239         bsf     PCON,NOT_BOR
0032   1283           00240         bcf     STATUS,RP0              ; register page 0
0033   00A3           00241         movwf   pwr_on_code
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0034   3018           00242         movlw   0x18                    ; get NOT_TO and NOT_PD
0035   0503           00243         andwf   STATUS,w
0036   04A3           00244         iorwf   pwr_on_code,f                   ; or with NOT_POR and NOT_BOR
0037   0064           00245         clrwdt
                      00246 ;
                      00247 ; init variables
0038   01B4           00248         clrf    seconds
0039   01B6           00249         clrf    init_done               ; power on init not done
003A   01B7           00250         clrf    soft_pwm                ; software pwm module not enabled
003B   01C3           00251         clrf    led_bits
003C   30A8           00252         movlw   MSEC5_LSB               ; init  timer1 to count up to 5 msec
003D   008E           00253         movwf   TMR1L
003E   3061           00254         movlw   MSEC5_MSB
003F   008F           00255         movwf   TMR1H
0040   3001           00256         movlw   0x01                    ; enables TMR1, FOSC/4, 1:1 prescale
0041   0090           00257         movwf   T1CON   
0042   3057           00258         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
0043   00B5           00259         movwf   msec5
                      00260 
0044   01D6           00261         clrf    sweep_timer             ;MJZ ADDED THIS LINE
0045   01D7           00262         clrf    feed_rate_type  ;MJZ ADDED THIS LINE
                      00263 
                      00264 
                      00265 ; on power up
                      00266 ;
0046                  00267 at0sec
0046   2110           00268         call    sec0init
                      00269 ;       movlw   0xf8                    ; SIM ONLY
                      00270 ;       movwf   msec5                   ; SIM ONLY
                      00271 ; main idle loop
                      00272 ;
0047                  00273 idle
0047   0064           00274         clrwdt                          ; toggle watchdog
0048   1C0C           00275         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0049   2847           00276         goto    idle
004A   30A8           00277         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
004B   008E           00278         movwf   TMR1L
004C   3061           00279         movlw   MSEC5_MSB
004D   008F           00280         movwf   TMR1H
004E   100C           00281         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
                      00282 ;       call    chk_rbif                ; check if RB7:RB4 pins changed - motors error  ;MJZ COMMENTED T
                            HIS LINE
004F   23EE           00283         call    chk_rbif                ;MJZ ADDED THIS LINE, CHECK IF RB7:RB4 PINS CHANGED - MOTOR ERRO
                            RS OR POWER OFF
0050   257D           00284         call    chk_intf                ;MJZ ADDED THIS LINE, CHECK FOR BALL DROPPED
0051   252B           00285         call    chk_remote
0052   2555           00286         call    chk_2linesw             ;MJZ ADDED LINE, CHECK IF 2-LINE LIMIT SWITCH IS ON, NEEDS TO BE
                             CHECKED EVERY 5MS
                      00287                                                         ;TO ENSURE STOP POSITION ACCURACY & CONSISTANCY
0053   0FB5           00288         incfsz  msec5,f                 ; if msec5 overflowed,
0054   2864           00289         goto    not_second
                      00290 ;       movlw   0x55                    ; DEBUG
                      00291 ;       btfss   remote_toggle,REMOTE_BIT        ; DEBUG
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00292 ;       call    putchar                 ; DEBUG
                      00293 
Message[305]: Using default destination of 1 (file).
0055   03D6           00294         decf    sweep_timer                     ;MJZ ADDED THIS LINE, SWEEP TIMER COUNTDOWN SECONDS
                      00295 
0056   1845           00296         btfsc   power_level,0           ;MJZ ADDED THIS LINE
0057   258E           00297         call    toggle_green_led        ;MJZ ADDED THIS LINE, IF POWER_LEVEL=1 (OR 3), TOGGLE GREEN LED 
                            (POWER_LEVEL 3 NEVER GETS HERE)
0058   18C5           00298         btfsc   power_level,1           ;MJZ ADDED THIS LINE
0059   2591           00299         call    toggle_red_led          ;MJZ ADDED THIS LINE, IF POWER_LEVEL=2 (OR 3), TOGGLE RED LED (P
                            OWER_LEVEL 3 NEVER GETS HERE)
                      00300 
005A   144C           00301         bsf     rbif_bits,0                     ; start checking for sweep motor error again
005B   3057           00302         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
005C   00B5           00303         movwf   msec5
                      00304 ;       movlw   0xf8                    ; SIM ONLY
                      00305 ;       movwf   msec5                   ; SIM ONLY
005D   0B36           00306         decfsz  init_done,w             ;   and init not done
005E   286F           00307         goto    i_second                ;   do init stuff
005F   0AB4           00308         incf    seconds,f               ; msec5 overflowed, actually toggled every 1 seconds
0060   0834           00309         movf    seconds,w
0061   390F           00310         andlw   0x0f                    ; update battery led every 16 seconds
0062   1903           00311         btfsc   STATUS,Z
0063   2486           00312         call    update_bat_led
                      00313 
0064                  00314 not_second:
0064   3007           00315         movlw   7
0065   0535           00316         andwf   msec5,w
0066   0782           00317         addwf   PCL,f
0067   296C           00318         goto    tick0
0068   2979           00319         goto    tick1
0069   2987           00320         goto    tick2
006A   298C           00321         goto    tick3
006B   29A2           00322         goto    tick4
006C   29A8           00323         goto    tick5
006D   29AB           00324         goto    tick6
006E   29AE           00325         goto    tick7
                      00326 
006F                  00327 i_second:
006F   0A34           00328         incf    seconds,w               ; msec5 overflowed, actually toggled every 1.25 seconds
0070   00B4           00329         movwf   seconds
0071   0782           00330         addwf   PCL,f
0072   2846           00331         goto    at0sec                  ; 0 second - this won't happen
0073   28E3           00332         goto    at1sec                  ; 1 second
0074   28FA           00333         goto    at2sec                  ; 2 seconds
0075   28FA           00334         goto    at3sec                  ; 3 seconds
0076   28FB           00335         goto    at4sec
0077   28FC           00336         goto    at5sec
0078   2904           00337         goto    at6sec
0079   2905           00338         goto    at7sec
007A   2908           00339         goto    at8sec
007B   2909           00340         goto    at9sec
007C   2909           00341         goto    at10sec
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007D   2909           00342         goto    at11sec
007E   290A           00343         goto    at12sec
007F   290A           00344         goto    at13sec
0080   290B           00345         goto    at14sec
0081   290D           00346         goto    at15sec
                      00347 
                      00348 
                      00349 
0082   2847           00350         goto    idle
                      00351 ; end of main
                      00352 
                      00353 ;--- software PWM Generator
                      00354 ;
0083                  00355 PwmInt
0083   110B           00356         bcf     INTCON,T0IF             ; clear interrupt flag
0084   1807           00357         btfsc   PORTC,PWMOUTBIT         ; which edge is required?
0085   28B6           00358         goto    Lowpulse                ; -> goto falling edge
0086                  00359 Highpulse
0086   0930           00360         comf    pwmdesired,W            ; get desired PWM value
0087   00B2           00361         movwf   pwmhelp                 ; store val for the foll low pulse
0088   07B1           00362         addwf   pwmmax,F                ; calc number of inst's to skip
0089   1C03           00363         btfss   STATUS,C                ; which method to use?
008A   28AF           00364         goto    HighImpInt              ; -> using interrupt
008B                  00365 HighImpShrt
008B   0831           00366         movf    pwmmax,W                ; get number of inst's to skip
008C   0782           00367         addwf   PCL,F                   ; skip n instructions
008D   1407           00368         bsf     PORTC,PWMOUTBIT         ; rising edge, 28 cycles hi pulse
008E   1407           00369         bsf     PORTC,PWMOUTBIT         ; 27 cycles
008F   1407           00370         bsf     PORTC,PWMOUTBIT         ; 26 cycles
0090   1407           00371         bsf     PORTC,PWMOUTBIT         ; 25 cycles
0091   1407           00372         bsf     PORTC,PWMOUTBIT         ; 24 cycles
0092   1407           00373         bsf     PORTC,PWMOUTBIT         ; 23 cycles
0093   1407           00374         bsf     PORTC,PWMOUTBIT         ; 22 cycles
0094   1407           00375         bsf     PORTC,PWMOUTBIT         ; 21 cycles
0095   1407           00376         bsf     PORTC,PWMOUTBIT         ; 20 cycles
0096   1407           00377         bsf     PORTC,PWMOUTBIT         ; 19 cycles
0097   1407           00378         bsf     PORTC,PWMOUTBIT         ; 18 cycles
0098   1407           00379         bsf     PORTC,PWMOUTBIT         ; 17 cycles
0099   1407           00380         bsf     PORTC,PWMOUTBIT         ; 16 cycles
009A   1407           00381         bsf     PORTC,PWMOUTBIT         ; 15 cycles
009B   1407           00382         bsf     PORTC,PWMOUTBIT         ; 14 cycles
009C   1407           00383         bsf     PORTC,PWMOUTBIT         ; 13 cycles
009D   1407           00384         bsf     PORTC,PWMOUTBIT         ; 12 cycles
009E   1407           00385         bsf     PORTC,PWMOUTBIT         ; 11 cycles
009F   1407           00386         bsf     PORTC,PWMOUTBIT         ; 10 cycles
00A0   1407           00387         bsf     PORTC,PWMOUTBIT         ; 9 cycles
00A1   1407           00388         bsf     PORTC,PWMOUTBIT         ; 8 cycles
00A2   1407           00389         bsf     PORTC,PWMOUTBIT         ; 7 cycles
00A3   1407           00390         bsf     PORTC,PWMOUTBIT         ; 6 cycles
00A4   1407           00391         bsf     PORTC,PWMOUTBIT         ; 5 cycles
00A5   1407           00392         bsf     PORTC,PWMOUTBIT         ; 4 cycles
00A6   1407           00393         bsf     PORTC,PWMOUTBIT         ; 3 cycles
00A7   1407           00394         bsf     PORTC,PWMOUTBIT         ; 2 cycles
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A8   1407           00395         bsf     PORTC,PWMOUTBIT         ; 1 cycle
00A9   1007           00396         bcf     PORTC,PWMOUTBIT         ; fall edge, start of the following
                      00397                                         ; low pulse using the interrupt
00AA   0AAE           00398         incf    counter,F               ; trigger counter, cause there was
                      00399                                         ; a rising edge
00AB   0932           00400         comf    pwmhelp,W               ; get required low pulse length
00AC   3E1B           00401         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
                      00402                                         ; Edge was generated 5 cycles before
                      00403                                         ; usual point of time
00AD   0081           00404         movwf   TMR0                    ; put value into timer
00AE   28DF           00405         goto    LowImpInt2              ; low pulse using int is running
00AF                  00406 HighImpInt                              ; high pulse using interrupt
00AF   3E16           00407         addlw   PWMADJUSTVAL            ; calculate timer loading value
00B0   0081           00408         movwf   TMR0                    ; put value into timer
00B1                  00409 HighImpInt2
00B1   1407           00410         bsf     PORTC,PWMOUTBIT         ; generate rising edge
00B2   0AAE           00411         incf    counter,F               ; trigger counter, because there was a rising edge
00B3   301C           00412         movlw   PWMMAXVAL-1             ; "repair"...
00B4   00B1           00413         movwf   pwmmax                  ; ...support register
00B5   0008           00414         return                          ; return to main isr
                      00415 
                      00416 
00B6                  00417 Lowpulse
00B6   0932           00418         comf    pwmhelp,W               ; get required pulse length
00B7   07B1           00419         addwf   pwmmax,F                ; calc number of inst's to skip
00B8   1C03           00420         btfss   STATUS,C                ; which method is to use?
00B9   28DD           00421         goto    LowImpInt               ; ->using interrupt
00BA                  00422 LowImpShrt
00BA   0831           00423         movf    pwmmax,W                ; get number of inst's to skip
00BB   0782           00424         addwf   PCL,F                   ; skip n instructions
00BC   1007           00425         bcf     PORTC,PWMOUTBIT         ; falling edge, 27 cycles low pulse
00BD   1007           00426         bcf     PORTC,PWMOUTBIT         ; 26 cycles
00BE   1007           00427         bcf     PORTC,PWMOUTBIT         ; 25 cycles
00BF   1007           00428         bcf     PORTC,PWMOUTBIT         ; 24 cycles
00C0   1007           00429         bcf     PORTC,PWMOUTBIT         ; 23 cycles
00C1   1007           00430         bcf     PORTC,PWMOUTBIT         ; 22 cycles
00C2   1007           00431         bcf     PORTC,PWMOUTBIT         ; 21 cycles
00C3   1007           00432         bcf     PORTC,PWMOUTBIT         ; 20 cycles
00C4   1007           00433         bcf     PORTC,PWMOUTBIT         ; 19 cycles
00C5   1007           00434         bcf     PORTC,PWMOUTBIT         ; 18 cycles
00C6   1007           00435         bcf     PORTC,PWMOUTBIT         ; 17 cycles
00C7   1007           00436         bcf     PORTC,PWMOUTBIT         ; 16 cycles
00C8   1007           00437         bcf     PORTC,PWMOUTBIT         ; 15 cycles
00C9   1007           00438         bcf     PORTC,PWMOUTBIT         ; 14 cycles
00CA   1007           00439         bcf     PORTC,PWMOUTBIT         ; 13 cycles
00CB   1007           00440         bcf     PORTC,PWMOUTBIT         ; 12 cycles
00CC   1007           00441         bcf     PORTC,PWMOUTBIT         ; 11 cycles
00CD   1007           00442         bcf     PORTC,PWMOUTBIT         ; 10 cycles
00CE   1007           00443         bcf     PORTC,PWMOUTBIT         ; 9 cycles
00CF   1007           00444         bcf     PORTC,PWMOUTBIT         ; 8 cycles
00D0   1007           00445         bcf     PORTC,PWMOUTBIT         ; 7 cycles
00D1   1007           00446         bcf     PORTC,PWMOUTBIT         ; 6 cycles
00D2   1007           00447         bcf     PORTC,PWMOUTBIT         ; 5 cycles
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D3   1007           00448         bcf     PORTC,PWMOUTBIT         ; 4 cycles
00D4   1007           00449         bcf     PORTC,PWMOUTBIT         ; 3 cycles
00D5   1007           00450         bcf     PORTC,PWMOUTBIT         ; 2 cycles
00D6   1007           00451         bcf     PORTC,PWMOUTBIT         ; 1 cycles
00D7   1407           00452         bsf     PORTC,PWMOUTBIT         ; rising edge; start of the next
                      00453                                         ; high pulse using the interrupt
00D8   0930           00454         comf    pwmdesired,W            ; get desired PWM value
00D9   00B2           00455         movwf   pwmhelp                 ; store val for the next lo pulse
00DA   3E1B           00456         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
                      00457                                         ; Edge was gen'd 5 cycles before
                      00458                                         ; usual point of time.
00DB   0081           00459         movwf   TMR0                    ; put value into timer
00DC   28B1           00460         goto    HighImpInt2             ; high pulse using int is running
00DD                  00461 LowImpInt                               ; low pulse using interrupt
00DD   3E16           00462         addlw   PWMADJUSTVAL            ; calculate timer loading value
00DE   0081           00463         movwf   TMR0                    ; put value into timer
00DF                  00464 LowImpInt2
00DF   1007           00465         bcf     PORTC,PWMOUTBIT         ; generate falling edge
00E0   301D           00466         movlw   PWMMAXVAL               ; "repair" ...
00E1   00B1           00467         movwf   pwmmax                  ; ... support register
00E2   0008           00468         return                          ; return to main isr
                      00469 
                      00470 
                      00471 
                      00472 
                      00473 ; this is really part of main loop, moved here so PWNINT can reside below 0x100
                      00474 
                      00475 ; enable top motor 20KHz, 10% duty cycle
00E3                  00476 at1sec
                      00477 
00E3   0191           00478         clrf    TMR2                    ; clear timer2
00E4   0192           00479         clrf    T2CON                   ; hardware pwm prescaler is one, timer 2 off
                      00480 ;       movlw   0x02                    ; hardware pwm prescaler is 16, timer 2 off
                      00481 ;       movwf   T2CON
00E5   1683           00482         bsf     STATUS,RP0              ; register page 1
00E6   30FF           00483         movlw   0xff                    ; period is 50 us if prescaler is 1, 82 us if prescaler is 16
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E7   0092           00484         movwf   PR2                     ;
00E8   1283           00485         bcf     STATUS,RP0              ; register page 0
                      00486 ;       movlw   0x7f
00E9   3019           00487         movlw   0x19
00EA   00A4           00488         movwf   t_top_pwm
00EB   00A6           00489         movwf   t_bot_pwm
00EC   00A5           00490         movwf   c_top_pwm
00ED   00A7           00491         movwf   c_bot_pwm
                      00492 ;       movlw   0x7f                    ; 50% duty cycle
00EE   3019           00493         movlw   0x19                    ; 10% duty cycle
00EF   0095           00494         movwf   CCPR1L                  ;
00F0   009B           00495         movwf   CCPR2L
00F1   1683           00496         bsf     STATUS,RP0              ; bank1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   1107           00497         bcf     TRISC,PWM1              ; make pin for pwm1 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F3   1087           00498         bcf     TRISC,PWM2              ; make pin for pwm2 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   018C           00499         clrf    PIE1                    ; disable peripheral interrupts
00F5   1283           00500         bcf     STATUS,RP0              ; bank0
00F6   018C           00501         clrf    PIR1                    ; clear peripheral interrupts flags
00F7   300C           00502         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (top)
                      00503 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (top)
00F8   0097           00504         movwf   CCP1CON
                      00505 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (bottom)
                      00506 ;       movwf   CCP2CON
00F9   1512           00507         bsf     T2CON,TMR2ON            ; timer2 starts to increment
                      00508 
                      00509 ; fall through to atcom
                      00510 
00FA                  00511 at2sec
00FA                  00512 at3sec
                      00513 
00FA   290C           00514         goto    atcom
                      00515 
00FB                  00516 at4sec
                      00517 
                      00518 ;; Top motor duty cycle set to pot
                      00519 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00520 ; Bottom motor duty cycle set to pot
                      00521 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot
00FB   290C           00522         goto    atcom
                      00523 
00FC                  00524 at5sec
                      00525 
                      00526 ; Bottom motor 10% duty cycle
00FC   3019           00527         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on, now original 10% duty cycle 
                      00528                                                         ; got changed before we got here.
00FD   00A6           00529         movwf   t_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FE   00A7           00530         movwf   c_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FF   3019           00531         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
0100   009B           00532         movwf   CCPR2L                  ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
                      00533 
0101   300C           00534         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00535 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (bottom)
0102   009D           00536         movwf   CCP2CON
                      00537 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00538 ;       movwf   CCP1CON
0103   290C           00539         goto    atcom
                      00540 
0104                  00541 at6sec
                      00542         
0104   290C           00543         goto    atcom
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00544 
0105                  00545 at7sec
                      00546 
                      00547 ;; Top motor duty cycle set to pot, 06/15/05 MJZ change
0105   0AA8           00548         incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00549 
                      00550 ;; Bottom motor duty cycle set to pot,  ; 06/15/05 MJZ changes, set to pot sooner than original
0106   0AA9           00551         incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, see above line
                      00552 
0107   290C           00553         goto    atcom
                      00554 
                      00555 ; fall through to atcom
0108                  00556 at8sec
                      00557 ;; Bottom motor duty cycle set to pot
                      00558 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, move to "at7sec"
                      00559 ; Top motor duty cycle set to pot
                      00560 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot
0108   290C           00561         goto    atcom
                      00562 
0109                  00563 at9sec
0109                  00564 at10sec
0109                  00565 at11sec
0109   290C           00566         goto    atcom
010A                  00567 at12sec
                      00568 ; sweep motor control
                      00569 ;       incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00570 ;       bcf     rbif_bits,0             ;  don't check for sweep motor error
                      00571 ;       incf    init_done,f             ; set initialization done flag
                      00572 
                      00573 ; fall through to atcom
010A                  00574 at13sec
                      00575 ;       movf    feed_a2d,w
                      00576 ;       sublw   0x3f                    ; if input < 1.25V (no borrow), power feed motor to pot
                      00577 ;       btfsc   STATUS,C                ; else force to 1.25V for 1 sec, then set to pot
                      00578 ;       goto    under_1_25
                      00579 ;       movlw   0x3f
                      00580 ;       movwf   feed_a2d
                      00581 ;under_1_25
                      00582 ;       call    init_feed_pwm
010A   290C           00583         goto    atcom
                      00584 
010B                  00585 at14sec
                      00586 ;       movf    feed_a2d,w
                      00587 ;       sublw   0x7f                    ; if input < 2.5V (no borrow), power feed motor to pot
                      00588 ;       btfsc   STATUS,C                ; else force to 2.5V for 1 sec, then set to pot
                      00589 ;       goto    under_2_5
                      00590 ;       movlw   0x7f
                      00591 ;       movwf   feed_a2d
                      00592 ;under_2_5
                      00593 ;       call    init_feed_pwm
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010B   290C           00594         goto    atcom
                      00595 
                      00596 
                      00597 
010C                  00598 atcom:
010C   2847           00599         goto    idle
                      00600 
010D                  00601 at15sec:
                      00602 ; if feed motor a2d input > 1.0V, enable feed motor to pot
010D   0AAA           00603         incf    feed_inited,f           ; enable feed motor if input > 1.0V
010E   0AB6           00604         incf    init_done,f             ; set initialization done flag
010F   2847           00605         goto    idle                    ; goto main idle loop
                      00606 
0110                  00607 sec0init:
                      00608         ; init usart
0110   1683           00609         bsf     STATUS,RP0              ; goto bank 1
                      00610 ;       movlw   0xff                    ; 1200 baud
0111   3081           00611         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0112   0099           00612         movwf   SPBRG
0113   3020           00613         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0114   0098           00614         movwf   TXSTA                   ; asynchronous mode, low speed mode
0115   1283           00615         bcf     STATUS,RP0              ; goto bank 0
0116   3090           00616         movlw   0x90                    ; 8-bit receive, receiver enabled
0117   0098           00617         movwf   RCSTA                   ; serial port enabled
                      00618 
0118   2519           00619         call    usart_off               ; turn off usart, disable beep
                      00620 
                      00621 ;       movlw   0x0f                    ; change to 0x0d - don't check feed motor
0119   300D           00622         movlw   0x0d
011A   00CC           00623         movwf   rbif_bits               ; check all motor errors
011B   0181           00624         clrf    TMR0
011C   01B3           00625         clrf    a2d_chan
011D   228A           00626         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
011E   00B8           00627         movwf   spin_a2d                ; save value
011F   3C8F           00628         sublw   0x8f                    ; if spin_a2d < 143
0120   308F           00629         movlw   0x8f
0121   1803           00630         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0122   00B8           00631         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0123   0838           00632         movf    spin_a2d,w              ; 
0124   3E06           00633         addlw   6       
0125   30FA           00634         movlw   0xfa                    ; if spin_a2d > 250
0126   1803           00635         btfsc   STATUS,C                ; 
0127   00B8           00636         movwf   spin_a2d                ;  spin_a2d = 250
                      00637 
0128   3001           00638         movlw   1
0129   00B3           00639         movwf   a2d_chan
012A   228A           00640         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
012B   00B9           00641         movwf   spd_a2d
012C   3C8F           00642         sublw   0x8f                    ; if speed_a2d < 143
012D   308F           00643         movlw   0x8f
012E   1803           00644         btfsc   STATUS,C                ;  skip if borrow - speed_a2d > 143
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012F   00B9           00645         movwf   spd_a2d                 ;  if speed_a2d < 143, speed_a2d = 143
0130   0839           00646         movf    spd_a2d,w               ; 
0131   3E06           00647         addlw   6       
0132   30FA           00648         movlw   0xfa                    ; if spd_a2d > 250
0133   1803           00649         btfsc   STATUS,C                ; 
0134   00B9           00650         movwf   spd_a2d                 ;  spd_a2d = 250
                      00651 
0135   3002           00652         movlw   2
0136   00B3           00653         movwf   a2d_chan
0137   228A           00654         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00655 ;       movlw   0xff                    ; SIM - force battery ok
0138   00BA           00656         movwf   bat_a2d         
0139   3003           00657         movlw   3
013A   00B3           00658         movwf   a2d_chan
013B   228A           00659         call    acq_a2d                 ; acquire chan3 a2d - feed rate
013C   00BB           00660         movwf   feed_a2d
013D   3C14           00661         sublw   0x14                    ; 20 - feed_a2d
013E   1C03           00662         btfss   STATUS,C                ;  skip if no borrow - feed_a2d < 20
013F   2945           00663         goto    feed_ok
0140   083B           00664         movf    feed_a2d,w
0141   3C0F           00665         sublw   0x0f                    ; 15 - feed_a2d
0142   3014           00666         movlw   0x14
0143   1C03           00667         btfss   STATUS,C                ;  skip if no borrow - feed _a2d < 11
0144   00BB           00668         movwf   feed_a2d                ;  if 15 < feed_a2d < 20, speed_a2d = 20
0145                  00669 feed_ok
                      00670 
0145   3004           00671         movlw   4
0146   00B3           00672         movwf   a2d_chan
0147   228A           00673         call    acq_a2d                 ; acquire chan4 a2d - sweep enable
0148   00BC           00674         movwf   sweep_a2d
                      00675         
                      00676 ;       btfsc   PORTB,0                 ;MJZ COMMENTED THIS LINE
                      00677 ;       goto    power_is_off            ; if RB0 is set, power switch is off    ;MJZ COMMENTED THIS LINE
0149   1A06           00678         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
014A   2BB6           00679         goto    power_is_off    ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
                      00680 
014B   083A           00681         movf    bat_a2d,w               ; get battery level
                      00682 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - bat_a2d)
014C   3C84           00683         sublw   0x84                    ; at power on, battery must be at least 2.6V to power up motors
014D   1803           00684         btfsc   STATUS,C                ;    skip if borrow (> 2.6V)    ;MJZ DEBUG, COMMENTED THIS LINE
                      00685 ;       btfss   STATUS,C                ;MJZ DEBUG, ADDED THIS LINE FOR SIMULATION TO GET PAST NO BATTER
                            Y INPUT
014E   2C54           00686         goto    bat_dead                ;  battery exhausted, shut down all motors
014F   1607           00687         bsf     PORTC,ELEV_EN           ; else enable elevation motor
0150   0186           00688         clrf    PORTB                   ; on 1st power up, getting motor error
0151   018B           00689         clrf    INTCON                  ;  so make sure conditions are cleared
0152   01CD           00690         clrf    sweep_is_on             ; clear sweep motor on flag
0153   01D5           00691         clrf    linesw_toggle   ;MJZ CLEAR 2-LINE SWITCH TOGGLE BYTE
0154   2475           00692         call    init_bat_level
                      00693 ; sweep motor control
0155   0AAB           00694         incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00695 
0156   1623           00696         bsf     pwr_on_code,NOT_TO      ; ignore watchdog timeout reset
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0157   0823           00697         movf    pwr_on_code,w           ; change bits to code : 0 = pwr on reset, 
                      00698                                         ;                       1= BOR, 2=wdt, 3=reset
0158   00A2           00699         movwf   temp
0159   01A3           00700         clrf    pwr_on_code
015A   1CA2           00701         btfss   temp,NOT_POR
015B   2966           00702         goto    pwr_on_reset
015C   0AA3           00703         incf    pwr_on_code,f
015D   1C22           00704         btfss   temp,NOT_BOR
015E   2962           00705         goto    npwr_on_reset
015F   0AA3           00706         incf    pwr_on_code,f
0160   1A22           00707         btfsc   temp,NOT_TO
0161   0AA3           00708         incf    pwr_on_code,f
0162                  00709 npwr_on_reset:                          ; not power on reset (and not watchdog timeout)
0162   3006           00710         movlw   6
0163   00C2           00711         movwf   flash_code
0164   2442           00712         call    flash_error
0165   2962           00713         goto    npwr_on_reset
                      00714 
0166                  00715 pwr_on_reset:
                      00716 
0166   01D0           00717         clrf    remote_toggle           ; feed and sweep toggle are both off
0167   16D0           00718         bsf     remote_toggle,REMOTE_BIT        ; remote switch is off
0168   01D1           00719         clrf    remote_block            ; blocking of remote xmitter is off
0169   01D2           00720         clrf    FF_count                ; no FF's to send
016A   01D4           00721         clrf    beep_count
                      00722         
016B   0008           00723         return
                      00724 
016C                  00725 tick0:
016C   01B3           00726         clrf    a2d_chan
016D   228A           00727         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
016E   00B8           00728         movwf   spin_a2d                ; save value
016F   3C8F           00729         sublw   0x8f                    ; if spin_a2d < 143
0170   308F           00730         movlw   0x8f
0171   1803           00731         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0172   00B8           00732         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0173   0838           00733         movf    spin_a2d,w              ; 
0174   3E06           00734         addlw   6       
0175   30FA           00735         movlw   0xfa                    ; if spin_a2d > 250
0176   1803           00736         btfsc   STATUS,C                ; 
0177   00B8           00737         movwf   spin_a2d                ;  spin_a2d = 250
0178   2847           00738         goto    idle
                      00739 
0179                  00740 tick1:
0179   3001           00741         movlw   1
017A   00B3           00742         movwf   a2d_chan
017B   228A           00743         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
                      00744 ;       movlw   0xfa                    ; SIM - force speed max
017C   00B9           00745         movwf   spd_a2d
                      00746 ; 08/07/09 start
                      00747 ;       sublw   0x8f                    ; if spd_a2d < 143, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00748 ;       movlw   0x8f                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            pressureless balls
                      00749 ;       sublw   0x98                    ; if spd_a2d < 152, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00750 ;       movlw   0x98                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
017D   3C8F           00751         sublw   0x8f
017E   308F           00752         movlw   0x8f
                      00753 ; 08/07/09 end
017F   1803           00754         btfsc   STATUS,C                ;  skip if borrow - spd_a2d > 143
0180   00B9           00755         movwf   spd_a2d                 ;  if spd_a2d < 143, spd_a2d = 143
0181   0839           00756         movf    spd_a2d,w               ; 
                      00757 ; 08/07/09 start
0182   3E06           00758         addlw   6       
0183   30FA           00759         movlw   0xfa                    ; if spd_a2d > 250
0184   1803           00760         btfsc   STATUS,C                ; 
0185   00B9           00761         movwf   spd_a2d                 ;  spd_a2d = 250
                      00762 ;       addlw   0x20    
                      00763 ;       movlw   0xe0                    ; if spd_a2d > 224, approx 85% of original max of 250
                      00764 ;       btfsc   STATUS,C                ; 
                      00765 ;       movwf   spd_a2d                 ;  spd_a2d = 224
                      00766 ; 08/07/09 end
0186   2847           00767         goto    idle
                      00768 
0187                  00769 tick2:
0187   3002           00770         movlw   2
0188   00B3           00771         movwf   a2d_chan
0189   228A           00772         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00773 ;       movlw   0xff                    ; SIM - force battery ok
018A   00BA           00774         movwf   bat_a2d         
                      00775 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
                      00776 ;       btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V )
                      00777 ;       goto    bat_dead                ;  battery exhausted, shut down all motors
                      00778         ; update battery led here if battery level changed
                      00779 
018B   2847           00780         goto    idle
                      00781 
018C                  00782 tick3:
018C   3003           00783         movlw   3
018D   00B3           00784         movwf   a2d_chan
018E   228A           00785         call    acq_a2d                 ; acquire chan3 a2d - feed rate
                      00786 ;       movlw   0xff                    ; SIM - force feed ok
018F   00BB           00787         movwf   feed_a2d
0190   3C14           00788         sublw   0x14                    ; 20 - feed_a2d
0191   1C03           00789         btfss   STATUS,C                ;  skip if no borrow - feed_a2d < 20
                      00790 ;       goto    feed_ok1                ;MJZ COMMENTED THIS LINE
0192   2999           00791         goto    chk_feed_rate_type      ;MJZ ADDED LINE, IF > 20, CHECK IF MUST RESTRICT MAXIMUM FEED RA
                            TE FOR 2-LINE MODE
0193   083B           00792         movf    feed_a2d,w
0194   3C0F           00793         sublw   0x0f                    ; 15 - feed_a2d
0195   3014           00794         movlw   0x14
0196   1C03           00795         btfss   STATUS,C                ;  skip if no borrow - feed _a2d < 11
0197   00BB           00796         movwf   feed_a2d                ;  if 17 < feed_a2d < 20, speed_a2d = 20
0198   29A1           00797         goto    feed_ok1                ;MJZ ADDED LINE
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00798 ;feed_ok1                                       ;MJZ COMMENTED THIS LINE
                      00799 ;       goto    idle                    ;MJZ COMMENTED THIS LINE
0199                  00800 chk_feed_rate_type:
0199   1C57           00801         btfss   feed_rate_type,0        ; If set, must restrict max feed rate for 2-Line mode
019A   29A1           00802         goto    feed_ok1
019B   083B           00803         movf    feed_a2d,w
019C   3C61           00804         sublw   0x61                    ; Max feed rate for 2-Line mode. This value must result in
                      00805                                         ; 121/255 (47.5%) PWM duty cycle for the feed motor which is
                      00806                                         ; the value calculated and measured in CS019B05 firmware.
019D   1803           00807         btfsc   STATUS,C                ; Skip if borrow, if feed rate higher than 0x61
019E   29A1           00808         goto    feed_ok1                ; Ok if feed rate already less than 0x61
019F   3061           00809         movlw   0x61
01A0   00BB           00810         movwf   feed_a2d                ; Restrict feed rate to 0x61 max for 2-Line mode
01A1                  00811 feed_ok1:
01A1   2847           00812         goto idle
                      00813 
01A2                  00814 tick4:
01A2   3004           00815         movlw   4
01A3   00B3           00816         movwf   a2d_chan
01A4   228A           00817         call    acq_a2d                 ; acquire chan4 a2d - sweep enable
01A5   00BC           00818         movwf   sweep_a2d
01A6   2268           00819         call    update_remote           ; check if remote enable switch had changed
01A7   2847           00820         goto    idle
                      00821 
01A8                  00822 tick5:
01A8   22A9           00823         call    calc_bot_pwm
01A9   2333           00824         call    calc_top_pwm
01AA   2847           00825         goto    idle
                      00826 
01AB                  00827 tick6:
01AB   21B2           00828         call    update_top_pwm
                      00829 ;       call    update_top_pwm
                      00830 ;       call    update_bot_pwm
01AC   21CD           00831         call    update_bot_pwm
01AD   2847           00832         goto    idle
                      00833 
01AE                  00834 tick7:
01AE   21E8           00835         call    update_feed_pwm
01AF   2251           00836         call    update_sweep
                      00837 ;       call    update_bat_led
01B0   24A7           00838         call    record_bat_level
01B1   2847           00839         goto    idle
                      00840 
                      00841 
01B2                  00842 update_top_pwm:
01B2   0B28           00843         decfsz  top_inited,w            ; if TOP MOTOR PWM inited,
                      00844 ;       goto    upd_exit                ; 06/09/05 MJZ commented this line, see next line
01B3   2594           00845         call    top_not_inited  ; 06/09/05 MJZ added this line, at power-on, ramp up top serve motor reg
                            ardless of speed pot
01B4   0825           00846         movf    c_top_pwm,w             ;  load current top pwm value into W
01B5   0224           00847         subwf   t_top_pwm,w             ;  W = (target - current)
01B6   1903           00848         btfsc   STATUS,Z                ;  if current top pwm value equal target top pwm value
01B7   29CC           00849         goto    upd_exit                ;   done
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B8   1C03           00850         btfss   STATUS,C                ;  if current top pwm value < than target ( borrow cleared)
01B9   29C2           00851         goto    dec_top                 ;       (goto dec_top if borrow set)
01BA   39F8           00852         andlw   0xf8                    ;  if delta < 8
01BB   1D03           00853         btfss   STATUS,Z
01BC   29BF           00854         goto    inc_top_by_8
01BD   0A25           00855         incf    c_top_pwm,w             ;   incr top pwm value and save to W
01BE   29CA           00856         goto    set_top
01BF                  00857 inc_top_by_8:                           ; else incr top pwm value by 8
                      00858 ;       movlw   8
                      00859 ;       btfss   init_done,0             ;      if init_done flag is set
01BF   3004           00860         movlw   4                       ;      else inc by 4
01C0   0725           00861         addwf   c_top_pwm,w
01C1   29CA           00862         goto    set_top
01C2                  00863 dec_top:
01C2   3C00           00864         sublw   0                       ; figure out delta to decrement
01C3   39F8           00865         andlw   0xf8                    ; if delta < 8
01C4   1D03           00866         btfss   STATUS,Z
01C5   29C8           00867         goto    dec_top_by_8
01C6   0325           00868         decf    c_top_pwm,w             ;  dec top pwm value and save to W
01C7   29CA           00869         goto    set_top
01C8                  00870 dec_top_by_8
                      00871 ;       movlw   8
                      00872 ;       btfss   init_done,0             ; if init_done flag is not set
01C8   3004           00873         movlw   4                       ;      dec by 4
01C9   0225           00874         subwf   c_top_pwm,w             ; else dec top pwm value by 8
01CA                  00875 set_top:
01CA   00A5           00876         movwf   c_top_pwm               ;  save current top pwm value
01CB   0095           00877         movwf   CCPR1L                  ;  write new duty cycle value to PWM module 1
01CC                  00878 upd_exit:
01CC   0008           00879         return
                      00880 
01CD                  00881 update_bot_pwm:                         ; check if bottom pwm duty cycle need updating
01CD   0B29           00882         decfsz  bot_inited,w            ; if BOTTOM MOTOR PWM inited,
                      00883 ;       goto    update_done             ; 06/15/05 MJZ change, see next line
01CE   2597           00884         call    bot_not_inited  ; 06/15/05 MJZ change for ramping up bottom serve motor at power-on
01CF   0827           00885         movf    c_bot_pwm,w             ;  load current bottom pwm value into W
01D0   0226           00886         subwf   t_bot_pwm,w             ;  W = target - current
01D1   1903           00887         btfsc   STATUS,Z                ;  if current bottom pwm value = target bottom pwm value
01D2   29E7           00888         goto    update_done             ;   goto exit
01D3   1C03           00889         btfss   STATUS,C                ;  if current bottom pwm value < target ( no borrow)
01D4   29DD           00890         goto    dec_bot                 ; 
01D5   39F8           00891         andlw   0xf8                    ;  if delta < 8
01D6   1D03           00892         btfss   STATUS,Z
01D7   29DA           00893         goto    inc_bot_by_8
01D8   0A27           00894         incf    c_bot_pwm,w             ;   incr bottom pwm value and save to W
01D9   29E5           00895         goto    set_bot
01DA                  00896 inc_bot_by_8:
                      00897 ;       movlw   8                       ; else inc bot pwm value by 8
                      00898 ;       btfss   init_done,0             ;      if init_done flag is set
01DA   3004           00899         movlw   4                       ;      else inc by 4
01DB   0727           00900         addwf   c_bot_pwm,w
01DC   29E5           00901         goto    set_bot
                      00902 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01DD                  00903 dec_bot:
01DD   3C00           00904         sublw   0                       ; figure out delta to decr
01DE   39F8           00905         andlw   0xf8                    ; if delta < 8
01DF   1D03           00906         btfss   STATUS,Z
01E0   29E3           00907         goto    dec_bot_by_8
01E1   0327           00908         decf    c_bot_pwm,w             ;  dec bottom pwm value and save to W
01E2   29E5           00909         goto    set_bot
01E3                  00910 dec_bot_by_8
                      00911 ;       movlw   8                       ; else dec bot pwm value by 8
                      00912 ;       btfss   init_done,0             ;      if init_done flag is set
01E3   3004           00913         movlw   4                       ;      else dec by 4
01E4   0227           00914         subwf   c_bot_pwm,w
01E5                  00915 set_bot:
01E5   00A7           00916         movwf   c_bot_pwm               ;  save current bottom pwm value
01E6   009B           00917         movwf   CCPR2L                  ;  write new duty cycle value to PWM module 2
01E7                  00918 update_done:
01E7   0008           00919         return
                      00920 
                      00921 ; if soft_pwm == 0
                      00922 ;   if input >= 1.0 volt, enable software pwm
                      00923 ;   if input < 1.0 volt, do nothing
                      00924 ; if soft_pwm == 1
                      00925 ;   if input < 1.0 volt, soft_pwm = 0 and disable software pwm
                      00926 ;   if input > 1.0, adjust pwmdesired
                      00927 ; check a2d of feed control
01E8                  00928 update_feed_pwm:
01E8   0B2A           00929         decfsz  feed_inited,w
01E9   2A37           00930         goto    chk_feed_xit
01EA   1AD0           00931         btfsc   remote_toggle,REMOTE_BIT ; if remote switch is on
01EB   29EE           00932         goto    no_remote_feed
01EC   1C50           00933         btfss   remote_toggle,FEED_BIT  ;    and feed toggle is off
01ED   29F2           00934         goto    feed_off                ;        disable feed
01EE                  00935 no_remote_feed:
01EE   083B           00936         movf    feed_a2d,w
01EF   3C13           00937         sublw   0x13                    ; if input < 0.4V (no borrow)
01F0   1C03           00938         btfss   STATUS,C
01F1   29FB           00939         goto    over1v
01F2                  00940 feed_off:
01F2   0B37           00941         decfsz  soft_pwm,w              ;  and soft_pwm was on
01F3   2A37           00942         goto    chk_feed_xit
                      00943         ; disable software pwm
01F4   138B           00944         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
01F5   01B7           00945         clrf    soft_pwm
01F6   01B0           00946         clrf    pwmdesired
01F7   1007           00947         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
01F8   11C3           00948         bcf     led_bits,FEED_LED
01F9   1186           00949         bcf     PORTB,FEED_LED          ;  turn feed led off
01FA   2A37           00950         goto    chk_feed_xit
01FB                  00951 over1v
01FB   0B37           00952         decfsz  soft_pwm,w              ; if soft_pwm was off
01FC   29FE           00953         goto    enable_feed
01FD   2A07           00954         goto    update_feed
01FE                  00955 enable_feed:
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00956         ; enable software pwm
01FE   1586           00957         bsf     PORTB,FEED_LED          ; turn feed led on
01FF   15C3           00958         bsf     led_bits,FEED_LED
0200   0181           00959         clrf    TMR0                    ; reset timer 0
0201   30A0           00960         movlw   INTCONVAL               ; enable timer0 intr
0202   008B           00961         movwf   INTCON
0203   0AB7           00962         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
0204   3039           00963         movlw   0x39                    ; go straight to 22% duty cycle
0205   00BF           00964         movwf   delta_s
0206   2A35           00965         goto    set_pwm_value
                      00966 
0207                  00967 update_feed:                            ; check if feed motor pwm duty cycle need updating
                      00968 
0207   3007           00969         movlw   0x07                    ; if feed_a2d > 248
0208   073B           00970         addwf   feed_a2d,W              ;
0209   1C03           00971         btfss   STATUS,C                ; and
020A   2A12           00972         goto    calc_feed
020B   3020           00973         movlw   0x20                    ;  if pwmdesired > 223
020C   0730           00974         addwf   pwmdesired,W            ;
020D   1C03           00975         btfss   STATUS,C                ;  
020E   2A12           00976         goto    calc_feed
020F   0F30           00977         incfsz  pwmdesired,w
0210   00B0           00978         movwf   pwmdesired
0211   2A37           00979         goto    chk_feed_xit            ;  if > 233, step up by one to 255
                      00980         
0212                  00981 calc_feed:
0212   3014           00982         movlw   0x14                    ; calc delta c
0213   023B           00983         subwf   feed_a2d,w
0214   00BE           00984         movwf   delta_c                 ; delta_c = feed_a2d - 20
0215   3E39           00985         addlw   0x39                    ;  W = 57 + delta_c
0216   00BF           00986         movwf   delta_s                 ;    save in delta_s
0217   1003           00987         bcf     STATUS,C
0218   0CBE           00988         rrf     delta_c,F               ;  ( div by 2 )
0219   1003           00989         bcf     STATUS,C
021A   0CBE           00990         rrf     delta_c,F               ;  ( div by 4 )
021B   083E           00991         movf    delta_c,W
021C   02BF           00992         subwf   delta_s,F               ;         - delta_c / 4
021D   1003           00993         bcf     STATUS,C
021E   0CBE           00994         rrf     delta_c,F               ;  ( div by 8 )
021F   1003           00995         bcf     STATUS,C
0220   0CBE           00996         rrf     delta_c,F               ;  ( div by 16 )
0221   083E           00997         movf    delta_c,W
0222   07BF           00998         addwf   delta_s,F               ;         + delta_c / 16
0223   1003           00999         bcf     STATUS,C
0224   0CBE           01000         rrf     delta_c,F               ;  ( div by 32 )
0225   083E           01001         movf    delta_c,W
0226   073F           01002         addwf   delta_s,W               ;         + delta_c / 32
0227   1003           01003         bcf     STATUS,C
                      01004 
0228   00BF           01005         movwf   delta_s                 ; delta_s is now new feed pwm value
0229   0830           01006         movf    pwmdesired,w
022A   023F           01007         subwf   delta_s,w               ; W = new pwm value - pwmdesired
022B   1C03           01008         btfss   STATUS,C                ; skip if no borrow: new pwm value > pwmdesired
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

022C   2A35           01009         goto    set_pwm_value           ;    new pwm value is smaller, ok to ramp dowm immediately
022D   39FC           01010         andlw   0xfc                    ;
022E   1903           01011         btfsc   STATUS,Z                ; if delta < 4
022F   2A35           01012         goto    set_pwm_value           ;    set to new pwm value
0230   3003           01013         movlw   3                       ; else incr pwmdesired by 3
0231   1C36           01014         btfss   init_done,0             ;       if not init_done, incr by 2
0232   3002           01015         movlw   2
0233   07B0           01016         addwf   pwmdesired,f
0234   2A37           01017         goto    chk_feed_xit
                      01018         
0235                  01019 set_pwm_value
0235   083F           01020         movf    delta_s,w
0236   00B0           01021         movwf   pwmdesired              ; save current feed pwm value
0237                  01022 chk_feed_xit:
0237   0008           01023         return
                      01024 
                      01025 ; at 13 seconds, if pot > 25% duty cycle, init feed pwm to 25% duty cycle
                      01026 ; at 14 seconds, if pot > 50% duty cycle, init feed pwm to 50% duty cycle
0238                  01027 init_feed_pwm:                          ; this gets called before feed_inited is set
0238   083B           01028         movf    feed_a2d,w
0239   3C20           01029         sublw   0x20                    ; if input < 0.4V (no borrow)
023A   1C03           01030         btfss   STATUS,C
023B   2A45           01031         goto    over_pt4_v
023C   0B37           01032         decfsz  soft_pwm,w              ;  and soft_pwm was on
023D   2A50           01033         goto    init_feed_xit
                      01034         ; disable software pwm
023E   138B           01035         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
023F   01B7           01036         clrf    soft_pwm
0240   01B0           01037         clrf    pwmdesired
0241   1007           01038         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
0242   11C3           01039         bcf     led_bits,FEED_LED
0243   1186           01040         bcf     PORTB,FEED_LED          ;  turn feed led off
0244   2A50           01041         goto    init_feed_xit
0245                  01042 over_pt4_v
0245   0B37           01043         decfsz  soft_pwm,w              ; if soft_pwm was off
0246   2A48           01044         goto    init_enable_feed
0247   2A4E           01045         goto    init_update_feed
0248                  01046 init_enable_feed:
                      01047         ; enable software pwm
0248   1586           01048         bsf     PORTB,FEED_LED          ; turn feed led on
0249   15C3           01049         bsf     led_bits,FEED_LED
024A   0181           01050         clrf    TMR0                    ; reset timer 0
024B   30A0           01051         movlw   INTCONVAL               ; enable timer0 intr
024C   008B           01052         movwf   INTCON
024D   0AB7           01053         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
024E                  01054 init_update_feed:                               ; check if feed motor pwm duty cycle need updating
024E   083B           01055         movf    feed_a2d,w              ; *** go straight to feed_a2d value
024F   00B0           01056         movwf   pwmdesired              ; save current feed pwm value
0250                  01057 init_feed_xit:
0250   0008           01058         return
                      01059 
                      01060 
                      01061 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0251                  01062 update_sweep:
                      01063 ; turn on/off sweep motor based on a2d
0251   0B2B           01064         decfsz  sweep_inited,w          ; if sweep not inited exit
0252   2A64           01065         goto    sweep_exit
0253   1ED0           01066         btfss   remote_toggle,REMOTE_BIT; if remote not enable,
0254   2A65           01067         goto    sweep_remote
0255   083C           01068         movf    sweep_a2d,w
                      01069 ;       sublw   0x33                    ;  if sweep switch < 1.0V (no borrow)
0256   3C99           01070         sublw   0x99                    ;MJZ ADDED LINE, CHANGED TO < 3.0V TO TURN SWEEP ON REGARDLESS O
                            F WHICH RESISTOR DIVIDER CIRCUIT ACTIVATED
0257   1C03           01071         btfss   STATUS,C
0258   2A60           01072         goto    sweep_off
0259                  01073 sweep_on
0259   184D           01074         btfsc   sweep_is_on,0           ;   if motor already enabled, exit
025A   2A64           01075         goto    sweep_exit
025B   2575           01076         call    linesw_toggle_init      ;MJZ ADDED LINE, IF SWEEP MOTOR WAS JUST ENABLED, INIT LINESW_TO
                            GGLE TO MATCH 2-LINE SWITCH VALUE
025C   1587           01077         bsf     PORTC,SWEEP_EN          ;    enable sweep motor
025D   104C           01078         bcf     rbif_bits,0             ;    don't check for sweep motor error for 1 second     
025E   0ACD           01079         incf    sweep_is_on,f
025F   2A64           01080         goto    sweep_exit1
0260                  01081 sweep_off
0260   1C4D           01082         btfss   sweep_is_on,0
0261   2A64           01083         goto    sweep_exit
0262   1187           01084         bcf     PORTC,SWEEP_EN          ; else disable sweep motor
0263   01CD           01085         clrf    sweep_is_on
0264                  01086 sweep_exit1:
                      01087 ;       btfss   remote_toggle,REMOTE_BIT; if remote not enable,
                      01088 ;       goto    sweep_exit
                      01089 ;       movf    pwr_on_code,W           ;       if timeout or brown out
                      01090 ;       btfsc   STATUS,Z
                      01091 ;       goto    sweep_exit
                      01092 ;       movwf   flash_code              ;               flash the reset type code 2 time
                      01093 ;       call    flash_error
                      01094 ;       movf    pwr_on_code,W
                      01095 ;       movwf   flash_code
                      01096 ;       call    flash_error
                      01097 ;       bcf     led_bits,GREEN_LED
0264                  01098 sweep_exit:
0264   0008           01099         return
                      01100 
0265                  01101 sweep_remote:                           ; remote switch on
0265   1CD0           01102         btfss   remote_toggle,SWEEP_BIT ;  set SWEEP output based on SWEEP_BIT
0266   2A60           01103         goto    sweep_off
0267   2A59           01104         goto    sweep_on
                      01105 
                      01106 ; check if remote enable switch had changed
0268                  01107 update_remote:
0268   0B36           01108         decfsz  init_done,W             ; if init not done, don't bother
0269   2A86           01109         goto    update_rmxit
026A   0850           01110         movf    remote_toggle,W         ; pick up remote_toggle byte
026B   3920           01111         andlw   REMOTE_ON
026C   0607           01112         xorwf   PORTC,W                 ; exclusive or with PORTC
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

026D   3920           01113         andlw   REMOTE_ON               ; did REMOTE_ON change value
026E   1903           01114         btfsc   STATUS,Z                ; if no change, exit
026F   2A86           01115         goto    update_rmxit
                      01116 ;       movlw   0x20
                      01117 ;       movwf   remote_block            ; flush usart
0270   3020           01118         movlw   REMOTE_ON
0271   06D0           01119         xorwf   remote_toggle,F
0272   1AD0           01120         btfsc   remote_toggle,REMOTE_BIT ; if remote switch just turned on,
0273   2A87           01121         goto    remote_off
                      01122 
                      01123 ;       call    usart_enable
0274   1683           01124         bsf     STATUS,RP0              ; goto bank 1
0275   3081           01125         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0276   0099           01126         movwf   SPBRG
0277   3020           01127         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0278   0098           01128         movwf   TXSTA                   ; asynchronous mode, low speed mode
0279   1283           01129         bcf     STATUS,RP0              ; goto bank 0
027A   3090           01130         movlw   0x90                    ; 8-bit receive, receiver enabled
027B   0098           01131         movwf   RCSTA                   ; serial port enabled
027C   081A           01132         movf    RCREG,W                 ; flush input data
027D   081A           01133         movf    RCREG,W                 ; flush input data
                      01134 
                      01135 ;       movlw   REMOTE_ON
                      01136 ;       iorlw   FEED_TOGGLE
                      01137 ;       movwf   remote_toggle           ; then set remote and feed toggles
027E   1450           01138         bsf     remote_toggle,FEED_BIT  ;   set feed toggle
027F   184D           01139         btfsc   sweep_is_on,0           ;      if sweep is on
0280   14D0           01140         bsf     remote_toggle,SWEEP_BIT ;         set sweep bit
0281   084D           01141         movf    sweep_is_on,W           ; copy sweep_is_on flag to last_sweep
0282   00D3           01142         movwf   last_sweep
0283   304B           01143         movlw   BLOCK_CNT-8             ; short beep
0284   00D1           01144         movwf   remote_block
0285   2513           01145         call    usart_disable
0286                  01146 update_rmxit:
0286   0008           01147         return
0287                  01148 remote_off:
                      01149 ;       call    usart_off
0287   10D0           01150         bcf     remote_toggle,SWEEP_BIT ; turn off sweep_toggle
0288   2D19           01151         goto    usart_off
0289   0008           01152         return
                      01153 ;
                      01154 ; acquire reading on analog channel
                      01155 ; enters: (a2d_chan) = chanel number
                      01156 ; exits: W = result
028A                  01157 acq_a2d
028A   0EB3           01158         swapf   a2d_chan,F              ; move channel number
028B   1003           01159         bcf     STATUS,C                ;  clear carry bit before rotate
028C   0C33           01160         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
028D   3881           01161         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
028E   009F           01162         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
                      01163                                         ;;acquisition delay - incr channel number for next op
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

028F   0EB3           01164         swapf   a2d_chan,F              ; restore channel number
0290   0AB3           01165         incf    a2d_chan,F              ; incr channel number
0291   3005           01166         movlw   5                       ; mod 5 - only channels 0-4 valid
0292   0233           01167         subwf   a2d_chan,W
0293   1903           01168         btfsc   STATUS,Z
0294   00B3           01169         movwf   a2d_chan                ;      wrap to 0 if next chan is 5
                      01170 
0295   3018           01171         movlw   0x18                    ; need 19.6us acquisition time
0296   00C8           01172         movwf   delay
0297                  01173 delaylp:
0297   0BC8           01174         decfsz  delay,f
0298   2A97           01175         goto    delaylp
0299                  01176 WaitNoInt
0299   0801           01177         movf    TMR0,W                  ; waiting till enough time
029A   3CD0           01178         sublw   0d0h                    ; for one conversion before start
029B   1C03           01179         btfss   STATUS,C                ; of the next timer interrupt
029C   2A99           01180         goto    WaitNoInt               ; (Conv can be disturbed by an intr)
029D   151F           01181         bsf     ADCON0,GO               ; start ADC
029E                  01182 WaitAdc
029E   191F           01183         btfsc   ADCON0,GO               ; waiting until ACDC...
029F   2A9E           01184         goto    WaitAdc                 ; ... is ready
                      01185 ; result is waiting in ADRES, but first select next channel and start acquisition
02A0   0EB3           01186         swapf   a2d_chan,F              ; restore channel number
02A1   1003           01187         bcf     STATUS,C                ;  clear carry bit before rotate
02A2   0C33           01188         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
02A3   3881           01189         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
02A4   009F           01190         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
02A5   0EB3           01191         swapf   a2d_chan,F              ; restore channel number
                      01192 
02A6   081E           01193         movf    ADRES,W                 ; put result into W-reg
02A7   0064           01194         clrwdt                          ; clear watch dog timer
02A8   0008           01195         return
                      01196 
                      01197 ; calculate desired bottom pwm
02A9                  01198 calc_bot_pwm
                      01199 ; first calculate speed based on no spin
                      01200 ; 08/07/09 start
                      01201 ;       movlw   0x8f
02A9   308F           01202         movlw   0x8f                    ; minimum speed pot read allowed
                      01203 ; 08/07/09 end
02AA   0239           01204         subwf   spd_a2d,w
02AB   00BF           01205         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01206 ; 08/07/09 start
                      01207 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01208 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
02AC   3E4A           01209         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 72/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01210 ; 08/07/09 end
02AD   00BD           01211         movwf   calc_pwm
02AE   1003           01212         bcf     STATUS,C
02AF   0CBF           01213         rrf     delta_s,F               ; (div by 2)
                      01214 ; 08/07/09 start
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01215 ;       movf    delta_s,w
                      01216 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01217 ; 08/07/09 end
02B0   1003           01218         bcf     STATUS,C
02B1   0CBF           01219         rrf     delta_s,f               ; (div by 4)
02B2   083F           01220         movf    delta_s,w
02B3   07BD           01221         addwf   calc_pwm,F              ;               + delta_s / 4
02B4   1003           01222         bcf     STATUS,C
02B5   0CBF           01223         rrf     delta_s,F               ; (div by 8)
                      01224 ; 08/07/09 start
02B6   083F           01225         movf    delta_s,w
02B7   07BD           01226         addwf   calc_pwm,F              ;               + delta_s / 8
                      01227 ; 08/07/09 end
02B8   1003           01228         bcf     STATUS,C
02B9   0CBF           01229         rrf     delta_s,F               ; (div by 16)
                      01230 ; 08/07/09 start
02BA   02BD           01231         subwf   calc_pwm,f              ;               - delta_s / 16
                      01232 ; 08/07/09 end
                      01233 ;       bcf     STATUS,C
                      01234 ;       rrf     delta_s,W               ; (div by 32)
                      01235 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01236 ; 08/07/09 end
                      01237 ; now adjust based on spin
02BB   0838           01238         movf    spin_a2d,w
02BC   3CBA           01239         sublw   0xba                    ; 186 - spin_a2d
02BD   1903           01240         btfsc   STATUS,Z                ; if 186 <= spin_a2d <= 191, then no spin
02BE   2B2B           01241         goto    no_spin1
02BF   1803           01242         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
02C0   2AC5           01243         goto    adjust_backspin1
02C1   3E05           01244         addlw   5                       ;
02C2   1803           01245         btfsc   STATUS,C                ; if spin_a2d is 187,188,189,190 or 191, then no spin
02C3   2B2B           01246         goto    no_spin1
02C4   2B03           01247         goto    adjust_topspin1
02C5                  01248 adjust_backspin1:                       ; if spin_a2d < 186 then we have back spin
02C5   30C5           01249         movlw   0xc5
02C6   0239           01250         subwf   spd_a2d,W               ; speed_a2d - 197
02C7   1803           01251         btfsc   STATUS,C                ; skip if borrow (slow speed)
02C8   2AE1           01252         goto    high_spd1
02C9   308F           01253         movlw   0x8f                    ; slow speed
02CA   0239           01254         subwf   spd_a2d,w
02CB   00BF           01255         movwf   delta_s                 ; delta_s = speed_a2d - 143
02CC   00C9           01256         movwf   mult1                   ; mult1 =       delta_s
02CD   1003           01257         bcf     STATUS,C
02CE   0CBF           01258         rrf     delta_s,f               ; (div by 2)
02CF   1003           01259         bcf     STATUS,C
02D0   0CBF           01260         rrf     delta_s,f               ; (div by 4)
02D1   083F           01261         movf    delta_s,w
02D2   07C9           01262         addwf   mult1,f                 ;               + delta_s / 4
02D3   1003           01263         bcf     STATUS,C
02D4   0CBF           01264         rrf     delta_s,f               ; (div by 8)
02D5   1003           01265         bcf     STATUS,C
02D6   0CBF           01266         rrf     delta_s,f               ; (div by 16)
02D7   083F           01267         movf    delta_s,w
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D8   02C9           01268         subwf   mult1,f                 ;               - delta_s / 16
02D9   1003           01269         bcf     STATUS,C
02DA   0C3F           01270         rrf     delta_s,w               ; (div by 32)
02DB   07C9           01271         addwf   mult1,f                 ;               + delta_s / 32
02DC   300B           01272         movlw   0x0b
02DD   00CA           01273         movwf   mult2
02DE   24DD           01274         call    mult_sub                ; W = 11 * mult1 / 64
02DF   00C9           01275         movwf   mult1                   ; mult1 is maxspin for this speed
02E0   2AF9           01276         goto    adjust_bs1
02E1                  01277 high_spd1:
02E1   30C5           01278         movlw   0xc5
02E2   0239           01279         subwf   spd_a2d,W               ; speed_a2d - 197
02E3   00BF           01280         movwf   delta_s                 ; delta_s = speed_a2d - 197
02E4   00C9           01281         movwf   mult1
02E5   1003           01282         bcf     STATUS,C
02E6   0CBF           01283         rrf     delta_s,f               ; (div by 2)
02E7   1003           01284         bcf     STATUS,C
02E8   0CBF           01285         rrf     delta_s,f               ; (div by 4)
02E9   083F           01286         movf    delta_s,w
02EA   07C9           01287         addwf   mult1,f                 ;               + delta_s / 4
02EB   1003           01288         bcf     STATUS,C
02EC   0CBF           01289         rrf     delta_s,f               ; (div by 8)
02ED   1003           01290         bcf     STATUS,C
02EE   0CBF           01291         rrf     delta_s,f               ; (div by 16)
02EF   083F           01292         movf    delta_s,w
02F0   02C9           01293         subwf   mult1,f                 ;               - delta_s / 16
02F1   1003           01294         bcf     STATUS,C
02F2   0C3F           01295         rrf     delta_s,w               ; (div by 32)
02F3   07C9           01296         addwf   mult1,f                 ;               + delta_s / 32
02F4   300B           01297         movlw   0x0b
02F5   00CA           01298         movwf   mult2
02F6   24DD           01299         call    mult_sub                ; W = 11 * mult1 / 64
02F7   3C0B           01300         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
02F8   00C9           01301         movwf   mult1                   ; mul1 is maxspin for this speed
02F9                  01302 adjust_bs1:
02F9   0838           01303         movf    spin_a2d,w
02FA   3CBA           01304         sublw   0xba                    ; 186 - spin_a2d
02FB   00BF           01305         movwf   delta_s                 ; amount of back spin desired (delta back_spin)
02FC   00CA           01306         movwf   mult2                   ; max delta spin = delta_s
02FD   1003           01307         bcf     STATUS,C
02FE   0C3F           01308         rrf     delta_s,w               ; (div by 2)
02FF   07CA           01309         addwf   mult2,f                 ;               + delta_s / 2
0300   24DD           01310         call    mult_sub                ; W = maxspin * (delta back_spin) / 64
0301   07BD           01311         addwf   calc_pwm,f              ; calc_pwm = calc_pwm + maxspin * (delta back_spin) / 64
0302   2B2B           01312         goto    no_spin1
                      01313 
0303                  01314 adjust_topspin1:
0303   30BF           01315         movlw   0xbf                    ; mult1 = spin_a2d - 191
0304   0238           01316         subwf   spin_a2d,w
0305   00C9           01317         movwf   mult1                   ; max top spin = delta_spin
0306   00BF           01318         movwf   delta_s
0307   1003           01319         bcf     STATUS,C
0308   0CBF           01320         rrf     delta_s,f               ; (div by 2)
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0309   1003           01321         bcf     STATUS,C
030A   0CBF           01322         rrf     delta_s,f               ; (div by 4)
030B   1003           01323         bcf     STATUS,C
030C   0CBF           01324         rrf     delta_s,f               ; (div by 8)
030D   083F           01325         movf    delta_s,w
030E   07C9           01326         addwf   mult1,f                 ;               + delta_spin / 8 
030F   1003           01327         bcf     STATUS,C
0310   0CBF           01328         rrf     delta_s,f               ; (div by 16)
0311   083F           01329         movf    delta_s,w
0312   02C9           01330         subwf   mult1,f                 ;               - delta_spin / 16
0313   1003           01331         bcf     STATUS,C
0314   0C3F           01332         rrf     delta_s,w               ; (div by 32)
0315   07C9           01333         addwf   mult1,f                 ;               + delta_spin / 32
                      01334 
0316   30C5           01335         movlw   0xc5
0317   0239           01336         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
0318   1C03           01337         btfss   STATUS,C                ; skip if no borrow (fast speed)
0319   2B26           01338         goto    slow_spd
                      01339                                         ; fast speed:
031A   00BF           01340         movwf   delta_s                 ; maxspin = delta_speed / 2
031B   1003           01341         bcf     STATUS,C
031C   0CBF           01342         rrf     delta_s,f               ; (div by 2)
031D   083F           01343         movf    delta_s,w
031E   00CA           01344         movwf   mult2
031F   1003           01345         bcf     STATUS,C
0320   0CBF           01346         rrf     delta_s,F               ; (div by 4)
0321   1003           01347         bcf     STATUS,C
0322   0C3F           01348         rrf     delta_s,W               ; (div by 8)
0323   024A           01349         subwf   mult2,W                 ;           - delta_speed / 8
0324   3E29           01350         addlw   0x29                    ;           + 41
0325   2B27           01351         goto    ts_com1
                      01352 
0326                  01353 slow_spd
0326   3029           01354         movlw   0x29                    ; slow speed: maxspin = 41
0327                  01355 ts_com1
0327   023D           01356         subwf   calc_pwm,w
0328   00CA           01357         movwf   mult2                   ; mult2 = calc_pwm - maxspin
0329   24DD           01358         call    mult_sub                ; W = (max top spin) * (calc_pwm - maxspin) / 64
032A   02BD           01359         subwf   calc_pwm,f              ; calc_pwm = calc_pwm - (196 - spin_a2d) * (calc_pwm - maxspin) 
                            / 64
032B                  01360 no_spin1
                      01361 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01362 ;       sublw   0xf3                    ; DEBUG
                      01363 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01364 ;       goto    force255                ; DEBUG
032B   083D           01365         movf    calc_pwm,w
032C   00A6           01366         movwf   t_bot_pwm
032D   3C1F           01367         sublw   0x1f                    ; 41 - t_bot_pwm
032E   1C03           01368         btfss   STATUS,C                ; skip if no borrow
032F   0008           01369         return
0330   301F           01370         movlw   0x1f
0331   00A6           01371         movwf   t_bot_pwm
0332   0008           01372         return                          ;  make at least 41
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01373 ;force255                               ; DEBUG
                      01374 ;       movlw   0xff                    ; DEBUG
                      01375 ;       movwf   t_bot_pwm               ; DEBUG
                      01376 ;       return                          ; DEBUG
                      01377 
                      01378 ; calculate desired top pwm
0333                  01379 calc_top_pwm
                      01380 ; first calculate speed based on no spin
                      01381 ; 08/07/09 start
                      01382 ;       movlw   0x8f
0333   308F           01383         movlw   0x8f                    ; minimum speed pot read allowed
                      01384 ; 08/07/09 end
0334   0239           01385         subwf   spd_a2d,w
0335   00BF           01386         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01387 ; 08/07/09 start
                      01388 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01389 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
0336   3E4A           01390         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 74/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01391 ; 08/07/09 end
0337   00BD           01392         movwf   calc_pwm
0338   1003           01393         bcf     STATUS,C
0339   0CBF           01394         rrf     delta_s,F               ; (div by 2)
                      01395 ; 08/07/09 start
                      01396 ;       movf    delta_s,w
                      01397 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01398 ; 08/07/09 end
033A   1003           01399         bcf     STATUS,C
033B   0CBF           01400         rrf     delta_s,f               ; (div by 4)
033C   083F           01401         movf    delta_s,w
033D   07BD           01402         addwf   calc_pwm,F              ;               + delta_s / 4
033E   1003           01403         bcf     STATUS,C
033F   0CBF           01404         rrf     delta_s,F               ; (div by 8)
                      01405 ; 08/07/09 start
0340   083F           01406         movf    delta_s,w
0341   07BD           01407         addwf   calc_pwm,F              ;               + delta_s / 8
                      01408 ; 08/07/09 end
0342   1003           01409         bcf     STATUS,C
0343   0CBF           01410         rrf     delta_s,F               ; (div by 16)
                      01411 ; 08/07/09 start
0344   02BD           01412         subwf   calc_pwm,f              ;               - delta_s / 16
                      01413 ; 08/07/09 end
                      01414 ;       bcf     STATUS,C
                      01415 ;       rrf     delta_s,W               ; (div by 32)
                      01416 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01417 ; 08/07/09 end
                      01418 ; now adjust based on spin
0345   0838           01419         movf    spin_a2d,w
0346   3CBA           01420         sublw   0xba                    ; 186 - spin_a2d
0347   1903           01421         btfsc   STATUS,Z                ; if spin_a2d is 186, then no spin
0348   2BB3           01422         goto    no_spin
0349   1803           01423         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

034A   2B98           01424         goto    adjust_backspin
034B   3E05           01425         addlw   5                       ;
034C   1803           01426         btfsc   STATUS,C                ; if spin_a2d is 187-191, then no spin
034D   2BB3           01427         goto    no_spin
034E                  01428 adjust_topspin:                         ; if spin_a2d > 197 then we have top spin
034E   30C5           01429         movlw   0xc5
034F   0239           01430         subwf   spd_a2d,W               ; speed_a2d - 197
0350   1803           01431         btfsc   STATUS,C                ; skip if borrow (slow speed)
0351   2B6A           01432         goto    high_spd
0352   308F           01433         movlw   0x8f                    ; slow speed
0353   0239           01434         subwf   spd_a2d,w
0354   00BF           01435         movwf   delta_s                 ; delta_s = speed_a2d - 143
0355   00C9           01436         movwf   mult1                   ; mult1 =       delta_s
0356   1003           01437         bcf     STATUS,C
0357   0CBF           01438         rrf     delta_s,f               ; (div by 2)
0358   1003           01439         bcf     STATUS,C
0359   0CBF           01440         rrf     delta_s,f               ; (div by 4)
035A   083F           01441         movf    delta_s,w
035B   07C9           01442         addwf   mult1,f                 ;               + delta_s / 4
035C   1003           01443         bcf     STATUS,C
035D   0CBF           01444         rrf     delta_s,f               ; (div by 8)
035E   1003           01445         bcf     STATUS,C
035F   0CBF           01446         rrf     delta_s,f               ; (div by 16)
0360   083F           01447         movf    delta_s,w
0361   02C9           01448         subwf   mult1,f                 ;               - delta_s / 16
0362   1003           01449         bcf     STATUS,C
0363   0C3F           01450         rrf     delta_s,w               ; (div by 32)
0364   07C9           01451         addwf   mult1,f                 ;               + delta_s / 32
0365   300B           01452         movlw   0x0b
0366   00CA           01453         movwf   mult2
0367   24DD           01454         call    mult_sub                ; W = 11 * mult1 / 64
0368   00C9           01455         movwf   mult1                   ; mult1 is maxspin for this speed
0369   2B82           01456         goto    adjust_ts
036A                  01457 high_spd:
036A   30C5           01458         movlw   0xc5
036B   0239           01459         subwf   spd_a2d,W               ; speed_a2d - 197
036C   00BF           01460         movwf   delta_s                 ; delta_s = speed_a2d - 197
036D   00C9           01461         movwf   mult1
036E   1003           01462         bcf     STATUS,C
036F   0CBF           01463         rrf     delta_s,f               ; (div by 2)
0370   1003           01464         bcf     STATUS,C
0371   0CBF           01465         rrf     delta_s,f               ; (div by 4)
0372   083F           01466         movf    delta_s,w
0373   07C9           01467         addwf   mult1,f                 ;               + delta_s / 4
0374   1003           01468         bcf     STATUS,C
0375   0CBF           01469         rrf     delta_s,f               ; (div by 8)
0376   1003           01470         bcf     STATUS,C
0377   0CBF           01471         rrf     delta_s,f               ; (div by 16)
0378   083F           01472         movf    delta_s,w
0379   02C9           01473         subwf   mult1,f                 ;               - delta_s / 16
037A   1003           01474         bcf     STATUS,C
037B   0C3F           01475         rrf     delta_s,w               ; (div by 32)
037C   07C9           01476         addwf   mult1,f                 ;               + delta_s / 32
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

037D   300B           01477         movlw   0x0b
037E   00CA           01478         movwf   mult2
037F   24DD           01479         call    mult_sub                ; W = 11 * mult1 / 64
0380   3C0B           01480         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
0381   00C9           01481         movwf   mult1                   ; mul1 is maxspin for this speed
0382                  01482 adjust_ts:
0382   30BF           01483         movlw   0xbf                    ; spin_a2d - 191
0383   0238           01484         subwf   spin_a2d,w
0384   00BF           01485         movwf   delta_s                 ; amount of top spin desired (delta top_spin)
0385   00CA           01486         movwf   mult2                   ; max delta spin = delts_s
0386   1003           01487         bcf     STATUS,C
0387   0CBF           01488         rrf     delta_s,f               ; (div by 2)
0388   1003           01489         bcf     STATUS,C
0389   0CBF           01490         rrf     delta_s,f               ; (div by 4)
038A   1003           01491         bcf     STATUS,C
038B   0CBF           01492         rrf     delta_s,f               ; (div by 8)
038C   083F           01493         movf    delta_s,w
038D   07CA           01494         addwf   mult2,f                 ;               + delta_s / 8
038E   1003           01495         bcf     STATUS,C
038F   0CBF           01496         rrf     delta_s,f               ; (div by 16)
0390   083F           01497         movf    delta_s,w
0391   02CA           01498         subwf   mult2,f                 ;               - delta_s / 16
0392   1003           01499         bcf     STATUS,C
0393   0C3F           01500         rrf     delta_s,w               ; (div by 32)
0394   07CA           01501         addwf   mult2,f                 ;               + delta_s / 32
0395   24DD           01502         call    mult_sub                ; W = maxspin * (delta top_spin) / 64
0396   07BD           01503         addwf   calc_pwm,f
0397   2BB3           01504         goto    no_spin
                      01505 
0398                  01506 adjust_backspin:
0398   0838           01507         movf    spin_a2d,w
0399   3CBA           01508         sublw   0xba                    ; mult1 = 186 - spin_a2d
039A   00C9           01509         movwf   mult1
039B   1003           01510         bcf     STATUS,C                ; max backspin = (186 - spin_a2d) * 3 / 2
039C   0C49           01511         rrf     mult1,w
039D   07C9           01512         addwf   mult1,f
                      01513 
039E   30C5           01514         movlw   0xc5
039F   0239           01515         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
03A0   1C03           01516         btfss   STATUS,C                ; skip if no borrow (fast speed)
03A1   2BAE           01517         goto    slow_spd1
                      01518                                         ; fast speed:
03A2   00BF           01519         movwf   delta_s                 ; maxspin =
03A3   1003           01520         bcf     STATUS,C
03A4   0CBF           01521         rrf     delta_s,f               ; (div by 2)
03A5   083F           01522         movf    delta_s,w               ;           delta_speed / 2
03A6   00CA           01523         movwf   mult2
03A7   1003           01524         bcf     STATUS,C
03A8   0CBF           01525         rrf     delta_s,f               ; (div by 4)
03A9   1003           01526         bcf     STATUS,C                
03AA   0C3F           01527         rrf     delta_s,w               ; (div by 8)
03AB   024A           01528         subwf   mult2,w                 ;           - delta_speed / 8
03AC   3E29           01529         addlw   0x29                    ;           + 41
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AD   2BAF           01530         goto    bs_com
                      01531 
03AE                  01532 slow_spd1
03AE   3029           01533         movlw   0x29
03AF                  01534 bs_com
03AF   023D           01535         subwf   calc_pwm,w
03B0   00CA           01536         movwf   mult2                   ; mult2 = calc_pwm - maxspin
03B1   24DD           01537         call    mult_sub                ; W = (max back spin) * (calc_pwm - maxspin) / 64
03B2   02BD           01538         subwf   calc_pwm,f              ; calc_pwm -= W
03B3                  01539 no_spin
                      01540 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01541 ;       sublw   0xf3                    ; DEBUG
                      01542 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01543 ;       goto    force255_1              ; DEBUG
03B3   083D           01544         movf    calc_pwm,w
03B4   00A4           01545         movwf   t_top_pwm
03B5   0008           01546         return
                      01547 ;force255_1                             ; DEBUG
                      01548 ;       movwf   0xff                    ; DEBUG
                      01549 ;       movwf   t_top_pwm               ; DEBUG
                      01550 ;       return                          ; DEBUG
                      01551 
03B6                  01552 power_is_off:
                      01553 ; here at power on if detected the power switch is off
                      01554 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01555 ;       clrwdt                          ;  let wdt reset processor
                      01556 
03B6   0186           01557         clrf    PORTB                   ; turn off all LED
03B7   083A           01558         movf    bat_a2d,w               ; get battery level
03B8   3C99           01559         sublw   99h                     ; battery input at least 3.0V? (battery at least 13.2V)
03B9   1803           01560         btfsc   STATUS,C                ;    skip if no borrow (> 3.0V)
03BA   2BD8           01561         goto    charg_lt_3_0            ; charging, below 3.0V
03BB   1903           01562         btfsc   STATUS,Z
03BC   2BD8           01563         goto    charg_lt_3_0
03BD   083A           01564         movf    bat_a2d,w
                      01565 ;       sublw   0a3h                    ; battery input at least 3.2V? (battery at least 14.1V), MJZ COM
                            MENTED THIS LINE
03BE   3C9F           01566         sublw   09fh                    ;MJZ ADDED THIS LINE, battery input at least 3.1V? (battery at l
                            east 13.7V)
03BF   1803           01567         btfsc   STATUS,C                ;    skip if no borrow (> 3.2V)
03C0   2BCF           01568         goto    charg_lt_3_2            ; charging, below 3.2V
03C1   1903           01569         btfsc   STATUS,Z
03C2   2BCF           01570         goto    charg_lt_3_2
03C3   083A           01571         movf    bat_a2d,w
                      01572 ;       sublw   0a8h                    ; battery input at least 3.3V? (battery at least 14.5V), MJZ COM
                            MENTED THIS LINE
03C4   3CA3           01573         sublw   0a3h                    ;MJZ ADDED THIS LINE, battery input at least 3.2V? (battery at l
                            east 14.1V)
03C5   1803           01574         btfsc   STATUS,C                ;    skip if no borrow (> 3.3V)
03C6   2BCE           01575         goto    charg_lt_3_3
03C7   1903           01576         btfsc   STATUS,Z
03C8   2BCE           01577         goto    charg_lt_3_3
                      01578                                         ; we are here because we are charging and power > 3.3V
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03C9   1506           01579         bsf     PORTB,GREEN_LED         ;   green on and red off
03CA                  01580 wait_reset_lp:
03CA   0064           01581         clrwdt
                      01582 ;       btfss   PORTB,0         ; if RB0/INT bit is not set, power had been turned back on, MJZ COMMENTE
                            D THIS LINE
03CB   1E06           01583         btfss   PORTB,4         ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03CC   1486           01584         bsf     PORTB,RED_LED           ;  set red led
03CD   2BCA           01585         goto    wait_reset_lp           ; loop forever until charging power removed and system reset
                      01586                                         ; 
                      01587                                         ; 
                      01588 
03CE                  01589 charg_lt_3_3:                           ; charging, 3.2V < power level < 3.3V
03CE   2BD0           01590         goto    flash_grn               ; we want red off and flashing green
03CF                  01591 charg_lt_3_2:                           ; charging, 3.0V < power level < 3.2V
                      01592 ;       bsf     PORTB,RED_LED           ; we want red on and flashing green, MJZ COMMENTED THIS LINE
03CF   2BD4           01593         goto    flash_red               ;MJZ ADDED THIS LINE, we want flashing red and green off
03D0                  01594 flash_grn:
03D0   1506           01595         bsf     PORTB,GREEN_LED         ; turn on green led
03D1   3004           01596         movlw   GREEN_LED_ON
03D2   00CA           01597         movwf   mult2                   ; bits to toggle
03D3   2BDB           01598         goto    flash_com
                      01599 
03D4                  01600 flash_red:                                      ;MJZ ADDED THIS LINE
03D4   1486           01601         bsf PORTB,RED_LED               ;MJZ ADDED THIS LINE, turn on red led
03D5   3002           01602         movlw   RED_LED_ON              ;MJZ ADDED THIS LINE
03D6   00CA           01603         movwf   mult2                   ;MJZ ADDED THIS LINE
03D7   2BDB           01604         goto    flash_com               ;MJZ ADDED THIS LINE
                      01605 
03D8                  01606 charg_lt_3_0:                           ; charging, power level <= 3.0V
                      01607 ;       bsf     PORTB,GREEN_LED         ; turn on green led, MJZ COMMENTED THIS LINE
                      01608 ;       movlw   GREEN_LED_ON|RED_LED_ON ; toggle both red and green, only 1 on at a time, MJZ COMMENTED 
                            THIS LINE
                      01609 ;       movwf   mult2                   ;MJZ COMMENTED THIS LINE
                      01610 
03D8   1486           01611         bsf     PORTB,RED_LED           ;MJZ ADDED THIS LINE, we want red on and green off
03D9   3000           01612         movlw   0                               ;MJZ ADDED THIS LINE
03DA   00CA           01613         movwf   mult2                   ;MJZ ADDED THIS LINE
                      01614 
                      01615 
                      01616 
03DB                  01617 flash_com:
03DB   3040           01618         movlw   0x40
03DC   00C9           01619         movwf   mult1
03DD                  01620 fgrn_loop:
03DD   3004           01621         movlw   PAUSE_TIME
03DE   245E           01622         call    wait
03DF   3004           01623         movlw   PAUSE_TIME
03E0   245E           01624         call    wait
03E1   3004           01625         movlw   PAUSE_TIME
03E2   245E           01626         call    wait
03E3   084A           01627         movf    mult2,w                 ; get bits to toggle
03E4   0686           01628         xorwf   PORTB,F                 ; toggle leds
03E5   0BC9           01629         decfsz  mult1,f
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03E6   2BDD           01630         goto    fgrn_loop
                      01631 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on      
                            ;MJZ COMMENTED THIS LINE
03E7   1A06           01632         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03E8   2C03           01633         goto    pwr_off_lp              ;  let wdt reset the system
03E9   3002           01634         movlw   2
03EA   00B3           01635         movwf   a2d_chan                ; get battery level again
03EB   228A           01636         call    acq_a2d
03EC   00BA           01637         movwf   bat_a2d         
03ED   2BB6           01638         goto    power_is_off
                      01639 
                      01640 
                      01641 ; check if RB7:RB4 pins had changed state
03EE                  01642 chk_rbif:
                      01643 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set, check if power switch is turned off
                      01644 ;       btfss   PORTB,0                 ; if power switch is turned off ;MJZ COMMENTED THIS LINE
03EE   1E06           01645         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03EF   2C04           01646         goto    chk_rbif3
                      01647 ;       btfss   PORTB,0                 ; check power switch again      ;MJZ COMMENTED THIS LINE
03F0   1E06           01648         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03F1   2C04           01649         goto    chk_rbif3
03F2   018B           01650         clrf    INTCON                  ; disable all intrs
03F3   0197           01651         clrf    CCP1CON                 ; CCP1 Module is off
03F4   019D           01652         clrf    CCP2CON                 ; CCP2 Module is off
                      01653 ;       clrf    PORTC                   ; disable feed motor pwm
03F5   3040           01654         movlw   BEEP_OFF                ; beep is off
03F6   0087           01655         movwf   PORTC                   ; disable feed motor pwm
                      01656                                         ; disable bottom serve motor pwm
                      01657                                         ; disable top serve motor pwm
                      01658                                         ; sweep motor disabled
                      01659                                         ; elevation motor disabled
03F7   0186           01660         clrf    PORTB                   ; turn off all LED
03F8   0064           01661         clrwdt
03F9   1506           01662         bsf     PORTB,GREEN_LED
                      01663 ;       movlw   0x40
03FA   3080           01664         movlw   0x80
03FB   00C9           01665         movwf   mult1
03FC                  01666 pwr_off_loop:
03FC   3004           01667         movlw   PAUSE_TIME
03FD   245E           01668         call    wait
03FE   3006           01669         movlw   6                       ; red led on + green led on
03FF   0686           01670         xorwf   PORTB,F                 ; toggle red and green led, only 1 on
0400   0BC9           01671         decfsz  mult1,f
0401   2BFC           01672         goto    pwr_off_loop
                      01673 
0402   0186           01674         clrf    PORTB                   ; turn off all leds
0403                  01675 pwr_off_lp:
                      01676 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01677 ;       clrwdt                          ;  let wdt reset processor
0403   2C03           01678         goto    pwr_off_lp
                      01679 
0404                  01680 chk_rbif3:
                      01681 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set,       ;MJZ COMMENTED THIS LINE
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0404   2C15           01682         goto    chk_rbif1
                      01683 
                      01684 
                      01685 
                      01686 ;MJZ ADDED LINE, PREVIOUS VERSION HAD POWER SWITCH ON RB0/INT0.
                      01687 ;MJZ ADDED LINE, CHK_RBIF2 WOULD HAVE BEEN RUN ONLY IF A POWER OFF ON RB0/INT0 SET INTF, BUT
                      01688 ;MJZ ADDED LINE, WHEN RB0 WAS READ, THE POWER OFF CONDITION HAD ALREADY GONE AWAY, I.E. A SPURIOUS SIGNA
                            L SET INTF.
                      01689 ;MJZ ADDED LINE, THE INTF WAS CHECKED FOR IN CHK_RBIF3, SO TO BE SAFE THAT LINE IS NOW COMMENTED SO CHK_
                            RBIF2 WOULD NEVER RUN.
                      01690 ;MJZ ADDED LINE, POWER OFF IS NOW DETECTED ON RB4 WHICH USED TO BE SWEEP MOTOR ERROR DETECTION.
                      01691 ;MJZ ADDED LINE, SWEEP MOTOR ERROR USED TO BE ON RB4, BUT NONE OF THAT LOGIC IS TAKEN OUT, BECAUSE THE P
                            OWER OFF DETECTION CODE
                      01692 ;MJZ ADDED LINE, IS EXECUTED BEFORE MOTOR ERROR CODE, SO IF RB4 IS SET, A POWER OFF IS DETECTED.
                      01693 ;MJZ ADDED LINE, BALL DROP IS NOW DETECTED ON RB0/INT0.
                      01694 
                      01695 
                      01696 
0405                  01697 chk_rbif2:
0405   30F9           01698         movlw   0xf9
0406   0586           01699         andwf   PORTB,F                 ; clear red and green led
0407   3004           01700         movlw   PAUSE_TIME
0408   245E           01701         call    wait
0409   1506           01702         bsf     PORTB,GREEN_LED
040A   3004           01703         movlw   PAUSE_TIME
040B   245E           01704         call    wait
040C   3006           01705         movlw   6
040D   0686           01706         xorwf   PORTB,F
040E   3004           01707         movlw   PAUSE_TIME
040F   245E           01708         call    wait
0410   3006           01709         movlw   6
0411   0686           01710         xorwf   PORTB,F
0412   30F9           01711         movlw   0xf9
0413   0586           01712         andwf   PORTB,F
0414   05C3           01713         andwf   led_bits,F
                      01714 ;       bcf     INTCON,INTF                     ; MJZ commented this line, INTF now used for ball drop d
                            etection.
0415                  01715 chk_rbif1:
0415   1C0B           01716         btfss   INTCON,RBIF             ; if RBIF is clear, return
0416   0008           01717         return
0417   0E06           01718         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
0418   100B           01719         bcf     INTCON,RBIF             ;  clear RBIF bit in INTCON
                      01720 ;       andlw   0x0f                    ;  clear upper bits
0419   054C           01721         andwf   rbif_bits,w             ;  and with mask
041A   1903           01722         btfsc   STATUS,Z                ;  if zero, return
041B   0008           01723         return
041C   3006           01724         movlw   6                       ; wait 10us
041D   00C4           01725         movwf   rbif_wait
041E                  01726 rbif_lp
041E   0E06           01727         swapf   PORTB,w                 ; double checking, get RB7:RB4 in lower bits
                      01728 ;       andlw   0x0f                    ;  clear upper bits
041F   054C           01729         andwf   rbif_bits,w             ;  and with mask
0420   1903           01730         btfsc   STATUS,Z                ;  if zero, return
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0421   0008           01731         return
0422   0BC4           01732         decfsz  rbif_wait,f
0423   2C1E           01733         goto    rbif_lp
0424   0E06           01734         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
                      01735 ;       andlw   0x0f                    ;  clear upper bits
0425   054C           01736         andwf   rbif_bits,w             ; and with mask
0426   1903           01737         btfsc   STATUS,Z                ;  if zero, return
0427   0008           01738         return
0428   00C1           01739         movwf   err_no                  ; save as error number
                      01740 ; motor error, disable all motors, flash error code
                      01741 ;
0429                  01742 motor_error
                      01743         ; disable all motors
0429   0064           01744         clrwdt
042A   018B           01745         clrf    INTCON                  ; disable all intrs
042B   0197           01746         clrf    CCP1CON                 ; CCP1 Module is off
042C   019D           01747         clrf    CCP2CON                 ; CCP2 Module is off
                      01748 ;       clrf    PORTC                   ; disable feed motor pwm
042D   3040           01749         movlw   BEEP_OFF                ; disable feed motor pwm
042E   0087           01750         movwf   PORTC                   ; disable bottom serve motor pwm
                      01751                                         ; disable top serve motor pwm
                      01752                                         ; sweep motor disabled
                      01753                                         ; eleveation motor disabled
042F   0186           01754         clrf    PORTB                   ; turn off all LED
0430                  01755 moterr_lp
0430   3002           01756         movlw   2
0431   00C2           01757         movwf   flash_code
0432   0841           01758         movf    err_no,w                ; get motor error bits
0433   18C1           01759         btfsc   err_no,1                ; feed motor error
0434   2442           01760         call    flash_error             ;  flash 2
0435   3003           01761         movlw   3
0436   00C2           01762         movwf   flash_code
0437   19C1           01763         btfsc   err_no,3                ; top serve motor error
0438   2442           01764         call    flash_error             ;  flash 3
0439   3004           01765         movlw   4
043A   00C2           01766         movwf   flash_code
043B   1941           01767         btfsc   err_no,2                ; bottom serve motor error
043C   2442           01768         call    flash_error             ;  flash 4
043D   3005           01769         movlw   5
043E   00C2           01770         movwf   flash_code
                      01771 ;       btfsc   err_no,0                ; feed motor error      ;MJZ COMMENTED THIS LINE, SHOULD BE SWEE
                            P MOTOR ERROR
043F   1841           01772         btfsc   err_no,0                ; MJZ ADDED THIS LINE, SWEEP MOTOR ERROR
0440   2442           01773         call    flash_error             ;  flash 5
0441   2C30           01774         goto    moterr_lp
                      01775 
0442                  01776 flash_error:
                      01777 ;       movwf   flash_code              ; for err_no times,
0442   1106           01778         bcf     PORTB,GREEN_LED         ;   turn off green led
0443   3030           01779         movlw   FLASH_TIME
0444   245E           01780         call    wait
0445                  01781 flash_greenled
0445   1506           01782         bsf     PORTB,GREEN_LED         ;   turn on green led
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0446   3030           01783         movlw   FLASH_TIME
0447   245E           01784         call    wait
0448   1106           01785         bcf     PORTB,GREEN_LED         ;   turn off green led
0449   3030           01786         movlw   FLASH_TIME
044A   245E           01787         call    wait
044B   0BC2           01788         decfsz  flash_code,f
044C   2C45           01789         goto    flash_greenled
                      01790 
044D   3004           01791         movlw   PAUSE_TIME
044E   00C2           01792         movwf   flash_code
044F                  01793 pause
044F   3030           01794         movlw   FLASH_TIME              ; now pause
0450   245E           01795         call    wait
0451   0BC2           01796         decfsz  flash_code,f
0452   2C4F           01797         goto    pause
0453   0008           01798         return
                      01799 
                      01800 
                      01801 ; battery below 2.4V - disable all motors, LEDs green off and red flashing
0454                  01802 bat_dead
                      01803         ; disable all motors
0454   0064           01804         clrwdt
0455   018B           01805         clrf    INTCON                  ; disable all intrs
0456   0197           01806         clrf    CCP1CON                 ; CCP1 Module is off
0457   019D           01807         clrf    CCP2CON                 ; CCP2 Module is off
                      01808 ;       clrf    PORTC                   ; disable feed motor pwm
0458   3040           01809         movlw   BEEP_OFF                ; disable feed motor pwm
0459   0087           01810         movwf   PORTC                   ; disable bottom serve motor pwm
                      01811                                         ; disable top serve motor pwm
                      01812                                         ; sweep motor disabled
                      01813                                         ; elevation motor disabled
045A   0186           01814         clrf    PORTB                   ; turn off all LED
                      01815 
                      01816 ;flash_redled                           ;MJZ COMMENTED THIS LINE
                      01817 ;       movlw   RED_LED_ON              ;MJZ COMMENTED THIS LINE
                      01818 ;       xorwf   PORTB,f                 ; toggle red LED, MJZ COMMENTED THIS LINE
                      01819 ;       movlw   FLASH_TIME              ;MJZ COMMENTED THIS LINE
                      01820 ;       call    wait                    ;MJZ COMMENTED THIS LINE
                      01821 ;       goto    flash_redled    ;MJZ COMMENTED THIS LINE
                      01822 
                      01823 
045B                  01824 bat_dead_loop                           ;MJZ ADDED THIS LINE
045B   1486           01825         bsf             PORTB,RED_LED   ;MJZ ADDED THIS LINE, TURN ON RED LED
045C   0064           01826         clrwdt
045D   2C5B           01827         goto    bat_dead_loop   ;MJZ ADDED THIS LINE
                      01828 
                      01829         
                      01830 
                      01831 ; wait (W) number of timer1 overflows
                      01832 ; if (W) = 255, wait time is about 1.2 seconds
045E                  01833 wait
045E   00C0           01834         movwf   wait_cnt
045F                  01835 waitlp
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045F   0064           01836         clrwdt
0460   1C0C           01837         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0461   2C5F           01838         goto    waitlp
0462   30A8           01839         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
0463   008E           01840         movwf   TMR1L
0464   3061           01841         movlw   MSEC5_MSB
0465   008F           01842         movwf   TMR1H
0466   100C           01843         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
0467   0BC0           01844         decfsz  wait_cnt,f              ;  decrement wait_cnt
0468   2C5F           01845         goto    waitlp
0469   0008           01846         return
                      01847 
                      01848 ; wait (W) number of timer1 overflows withou clearing watch dog timer
                      01849 ; if (W) = 255, wait time is about 1.2 seconds
046A                  01850 wait_no_clrwdt
046A   00C0           01851         movwf   wait_cnt
046B                  01852 waitlp1
046B   1C0C           01853         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
046C   2C6B           01854         goto    waitlp1
046D   30A8           01855         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
046E   008E           01856         movwf   TMR1L
046F   3061           01857         movlw   MSEC5_MSB
0470   008F           01858         movwf   TMR1H
0471   100C           01859         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
0472   0BC0           01860         decfsz  wait_cnt,f              ;  decrement wait_cnt
0473   2C6B           01861         goto    waitlp1
0474   0008           01862         return
                      01863 
                      01864 ; initialize battery level on power up  
0475                  01865 init_bat_level:
0475   01C5           01866         clrf    power_level
0476   083A           01867         movf    bat_a2d,w
0477   3C84           01868         sublw   0x84                    ; 0x84 - bat_a2d
0478   1C03           01869         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
0479   2C84           01870         goto    init_pl_com                     ; if borrow, over 2.6V: power_level_tmp = 0
047A   0AC5           01871         incf    power_level,f
047B   083A           01872         movf    bat_a2d,w
047C   3C80           01873         sublw   0x80                    ; 0x80 - bat_a2d
047D   1C03           01874         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
047E   2C84           01875         goto    init_pl_com             ; if borrow, over 2.5V: power_level_tmp = 1
                      01876 ; less than 2.5V, about 10 mins left
047F   0AC5           01877         incf    power_level,f
0480   083A           01878         movf    bat_a2d,w
0481   3C7A           01879         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
0482   1803           01880         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
0483   0AC5           01881         incf    power_level,f   ;       if borrow, less then 2.4V: power_level_tmp = 3
0484                  01882 init_pl_com:
0484   0845           01883         movf    power_level,w
0485   00C6           01884         movwf   power_level_r
                      01885 ; fall through to set battery leds
                      01886 
                      01887 
                      01888 ; update battery leds. Called every 16 seconds. Take the lowest value from the last 16 second period
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0486                  01889 update_bat_led:
0486   0846           01890         movf    power_level_r,w
0487   00C5           01891         movwf   power_level
0488   3903           01892         andlw   0x03
0489   1903           01893         btfsc   STATUS,Z                ; power level 0: > 2.6V
048A   2C9B           01894         goto    over2_6v
048B   0BC5           01895         decfsz  power_level,f           ;
048C   2C8E           01896         goto    under2_5v
048D   2C98           01897         goto    over2_5v                ; power level 1: > 2.5V
                      01898 
                      01899 
048E                  01900 under2_5v
048E   0BC5           01901         decfsz  power_level,f
048F   2C54           01902         goto    bat_dead                        ; power level 3: < 2.4V ;MJZ DEBUG, COMMENTED THIS LINE
                      01903 ;       goto    over2_6v                        ;MJZ DEBUG, ADDED THIS LINE
                      01904 
                      01905 ;between_2.4v_2.5v                              ; less than 2.5V, about 10 mins left (GREEN OFF RED ON),
                             MJZ COMMENTED THIS LINE
                      01906 ;       btfss   led_bits,GREEN_LED      ; if green led on, turn it off, MJZ COMMENTED THIS LINE
                      01907 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      01908 ;       bcf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      01909 ;       bcf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
0490                  01910 between_2.4v_2.5v:                              ;MJZ ADDED THIS LINE, BETWEEN 2.4V & 2.5V, GREEN OFF, RE
                            D ON(FLASHING)
0490   1106           01911         bcf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE
0491   1486           01912         bsf             PORTB,RED_LED           ;MJZ ADDED THIS LINE
0492   2CA2           01913         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      01914 
                      01915 
0493                  01916 grn_off:
0493   18C3           01917         btfsc   led_bits,RED_LED        ; if red led off, turn it on
0494   2CA2           01918         goto    bat_led_xit
0495   14C3           01919         bsf     led_bits,RED_LED
0496   1486           01920         bsf     PORTB,RED_LED
0497   2CA2           01921         goto    bat_led_xit
                      01922 
                      01923 
                      01924 
                      01925 ;over2_5v:                                              ; between 2.5v and 2.7V - 1/3 capacity (GREEN ON
                             RED ON), MJZ COMMENTED THIS LINE
                      01926 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      01927 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      01928 ;       bsf             led_bits,GREEN_LED      ;MJZ COMMENTED THIS LINE
                      01929 ;       bsf             PORTB,GREEN_LED         ;MJZ COMMENTED THIS LINE
                      01930 ;       goto    grn_off                         ; goto turn red led on if necessary, MJZ COMMENTED THIS 
                            LINE
0498                  01931 over2_5v:                                               ;MJZ ADDED THIS LINE, BETWEEN 2.5V & 2.7V - 1/3 
                            CAPACITY (GREEN ON(FLASHING), RED OFF)
0498   1086           01932         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
0499   1506           01933         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
049A   2CA2           01934         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      01935 
                      01936 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01937 ;over2_6v:                                              ; greater than 2.6V, battery good       (GREEN O
                            N RED OFF), MJZ COMMENTED THIS LINE
                      01938 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      01939 ;       goto    grn_on
                      01940 ;       bsf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      01941 ;       bsf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
049B                  01942 over2_6v:                                               ;MJZ ADDED THIS LINE, GREATER THAN 2.6V, BATTERY
                             GOOD (GREEN ON, RED OFF)
049B   1086           01943         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
049C   1506           01944         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
049D   2CA2           01945         goto    bat_led_xit                     ;MJZ ADDED THIS LINE    
                      01946 
                      01947 
049E                  01948 grn_on:
049E   1CC3           01949         btfss   led_bits,RED_LED        ; if red led on, turn it off
049F   2CA2           01950         goto    bat_led_xit
04A0   10C3           01951         bcf     led_bits,RED_LED
04A1   1086           01952         bcf     PORTB,RED_LED
                      01953 
04A2                  01954 bat_led_xit:
04A2   0846           01955         movf    power_level_r,w
04A3   00C5           01956         movwf   power_level
04A4   3003           01957         movlw   3
04A5   00C6           01958         movwf   power_level_r
04A6   0008           01959         return  
                      01960 
                      01961 
04A7                  01962 record_bat_level:
                      01963 ; within a 16second time period, record the lowest power level
04A7   01C7           01964         clrf    power_level_tmp
04A8   083A           01965         movf    bat_a2d,w
04A9   3C84           01966         sublw   0x84                    ; 0x84 - bat_a2d
04AA   1C03           01967         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
04AB   2CB6           01968         goto    pl_com                  ; if borrow, over 2.6V: power_level_tmp = 0
04AC   0AC7           01969         incf    power_level_tmp,f
04AD   083A           01970         movf    bat_a2d,w
04AE   3C80           01971         sublw   0x80                    ; 0x80 - bat_a2d
04AF   1C03           01972         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
04B0   2CB6           01973         goto    pl_com                  ; if borrow, over 2.5V: power_level_tmp = 1
                      01974 ; less than 2.5V, about 10 mins left
04B1   0AC7           01975         incf    power_level_tmp,f
04B2   083A           01976         movf    bat_a2d,w
04B3   3C7A           01977         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
04B4   1803           01978         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
04B5   0AC7           01979         incf    power_level_tmp,f       ;       if borrow, less then 2.4V: power_level_tmp = 3
04B6                  01980 pl_com:
04B6   0846           01981         movf    power_level_r,w         ; power_level_r - power_level_tmp
04B7   0247           01982         subwf   power_level_tmp,w
04B8   1803           01983         btfsc   STATUS,C                ; if borrow => power_level_tmp < power_level_r
04B9   2CBC           01984         goto    no_bat_adjust
04BA   0847           01985         movf    power_level_tmp,w       ;   power_level_r = new power level
04BB   00C6           01986         movwf   power_level_r
04BC                  01987 no_bat_adjust:
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BC   0008           01988         return  
                      01989 
04BD                  01990 debug_led:
04BD   083B           01991         movf    feed_a2d,w
04BE   00C2           01992         movwf   flash_code
04BF   0CC2           01993         rrf     flash_code,F
04C0   0CC2           01994         rrf     flash_code,F
04C1   0CC2           01995         rrf     flash_code,F
04C2   0CC2           01996         rrf     flash_code,F
04C3   0CC2           01997         rrf     flash_code,F
04C4   0C42           01998         rrf     flash_code,W
04C5   3903           01999         andlw   3
04C6   3E01           02000         addlw   1
04C7   00C2           02001         movwf   flash_code
04C8   2442           02002         call    flash_error
04C9   083B           02003         movf    feed_a2d,w
04CA   00C2           02004         movwf   flash_code
04CB   0CC2           02005         rrf     flash_code,F
04CC   0CC2           02006         rrf     flash_code,F
04CD   0C42           02007         rrf     flash_code,W
04CE   3907           02008         andlw   7
04CF   3E01           02009         addlw   1
04D0   00C2           02010         movwf   flash_code
04D1   2442           02011         call    flash_error
04D2   083B           02012         movf    feed_a2d,w
04D3   3907           02013         andlw   7
04D4   3E01           02014         addlw   1
04D5   00C2           02015         movwf   flash_code
04D6   2442           02016         call    flash_error
                      02017 
04D7   3003           02018         movlw   3
04D8   00B3           02019         movwf   a2d_chan
04D9   228A           02020         call    acq_a2d                 ; acquire chan3 a2d - feed rate
04DA   00BB           02021         movwf   feed_a2d
04DB   0064           02022         clrwdt
04DC   2CBD           02023         goto    debug_led
                      02024 
                      02025 ; special 16 bit multiply routine
                      02026 ;  temp:mult2 = mult2 x mult1
                      02027 ; returns temp:mult2 / 64
                      02028 ; returnw r2:r1 = mult2 x mult1
                      02029 ;
04DD                  02030 mult_sub:
04DD   0849           02031         movf    mult1,W                 ; if either mult1 or mult2 is 0
04DE   1903           02032         btfsc   STATUS,Z
04DF   2CF3           02033         goto    mult_ret_0              ; returns 0
04E0   084A           02034         movf    mult2,W                 ; if either mult1 or mult2 is 0
04E1   1903           02035         btfsc   STATUS,Z
04E2   2CF3           02036         goto    mult_ret_0              ; returns 0
04E3   01CA           02037         clrf    mult2
04E4   01A2           02038         clrf    temp
04E5                  02039 mult_lp:
04E5   07CA           02040         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04E6   1803           02041         btfsc   STATUS,C
04E7   0AA2           02042         incf    temp,f
04E8   0BC9           02043         decfsz  mult1,F
04E9   2CE5           02044         goto    mult_lp
04EA   084A           02045         movf    mult2,w
04EB   00CE           02046         movwf   r1
04EC   0822           02047         movf    temp,w
04ED   00CF           02048         movwf   r2
04EE   0DCA           02049         rlf     mult2,f                 ; div result by 64
04EF   0DA2           02050         rlf     temp,f
04F0   0DCA           02051         rlf     mult2,f
04F1   0D22           02052         rlf     temp,w
04F2   0008           02053         return
                      02054 
04F3                  02055 mult_ret_0
04F3   3400           02056         retlw   0
                      02057 
                      02058 
                      02059 
                      02060 ; special 16 bit multiply routine
                      02061 ;  temp:mult2 = mult2 x mult1
                      02062 ; returns (temp:mult2 + 63) / 64
                      02063 ;
04F4                  02064 mult_sub1:
04F4   0849           02065         movf    mult1,W                 ; if either mult1 or mult2 is 0
04F5   1903           02066         btfsc   STATUS,Z
04F6   2CF3           02067         goto    mult_ret_0              ; returns 0
04F7   084A           02068         movf    mult2,W                 ; if either mult1 or mult2 is 0
04F8   1903           02069         btfsc   STATUS,Z
04F9   2CF3           02070         goto    mult_ret_0              ; returns 0
04FA   01CA           02071         clrf    mult2
04FB   01A2           02072         clrf    temp
04FC                  02073 mult_lp1:
04FC   07CA           02074         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
04FD   1803           02075         btfsc   STATUS,C
04FE   0AA2           02076         incf    temp,f
04FF   0BC9           02077         decfsz  mult1,F
0500   2CFC           02078         goto    mult_lp1
0501   303F           02079         movlw   0x3f
0502   07CA           02080         addwf   mult2,f                 
0503   1803           02081         btfsc   STATUS,C
0504   0AA2           02082         incf    temp,f                  ; temp:mult2 += 63
0505   0DCA           02083         rlf     mult2,f                 ; div result by 64
0506   0DA2           02084         rlf     temp,f
0507   0DCA           02085         rlf     mult2,f
0508   0D22           02086         rlf     temp,w
0509   0008           02087         return
                      02088 
                      02089 ; enable usart
050A                  02090 usart_enable:
                      02091         ; init usart
050A   1683           02092         bsf     STATUS,RP0              ; goto bank 1
                      02093 ;       movlw   0xff                    ; 1200 baud
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

050B   3081           02094         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
050C   0099           02095         movwf   SPBRG
050D   3020           02096         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
050E   0098           02097         movwf   TXSTA                   ; asynchronous mode, low speed mode
050F   1283           02098         bcf     STATUS,RP0              ; goto bank 0
0510   3090           02099         movlw   0x90                    ; 8-bit receive, receiver enabled
0511   0098           02100         movwf   RCSTA                   ; serial port enabled
0512   0008           02101         return
                      02102 
                      02103 ; disable usart
0513                  02104 usart_disable
0513   1683           02105         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0514   0198           02106         clrf    TXSTA                   ; disable transmitter
0515   1283           02107         bcf     STATUS,RP0              ; goto bank 0
0516   0198           02108         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02109 ;       bsf     PORTC,6                 ; beep is 30 ff's
0517   1307           02110         bcf     PORTC,6                 ; beep is 30 00's
0518   0008           02111         return
                      02112 
                      02113 ; disable usart with no beep
0519                  02114 usart_off
0519   1683           02115         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
051A   0198           02116         clrf    TXSTA                   ; disable transmitter
051B   1283           02117         bcf     STATUS,RP0              ; goto bank 0
051C   0198           02118         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02119 ;       bcf     PORTC,6                 ; no beep - beep is 30 ff's
051D   1707           02120         bsf     PORTC,6                 ; no beep - beep is 30 00's
051E   0008           02121         return
                      02122 
                      02123 ; if there is data in RCREG, return in W (returned as 0x30 + data)
051F                  02124 getchar:
051F   0103           02125         clrw
0520   1E8C           02126         btfss   PIR1,RCIF               ; if not input data, return 0 in W
0521   0008           02127         return
0522   081A           02128         movf    RCREG,W                 ; else read input data
0523   3E30           02129         addlw   0x30
0524   0008           02130         return
                      02131 
                      02132 ; get transmits status, 0 = not ok to send, 1 = ok to send
0525                  02133 xmit_status:
0525   0103           02134         clrw
0526   1A0C           02135         btfsc   PIR1,TXIF               ; if xmit not empty, skip
0527   3001           02136         movlw   1
0528   0008           02137         return
                      02138 
                      02139 ; send data in (W) to usart
0529                  02140 putchar:
0529   0099           02141         movwf   TXREG                   ; write data to usart
052A   0008           02142         return
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02143 
                      02144 ; called every 5 msec to handle anything related to the remote control
052B                  02145 chk_remote:
052B   1AD0           02146         btfsc remote_toggle,REMOTE_BIT  ; if remote not enabled, exit
052C   0008           02147         return
052D   0851           02148         movf    remote_block,W          ; if remote blocking,
052E   1903           02149         btfsc   STATUS,Z                ;
052F   2D39           02150         goto    no_blocking
0530   3C42           02151         sublw   0x42                    ;  if 100msec had elapsed,
0531   1903           02152         btfsc   STATUS,Z                ;
                      02153 ;       bcf     PORTC,6                 ;   turn off beep - beep is 30 ff's
0532   1707           02154         bsf     PORTC,6                 ;   turn off beep - beep is 30 00's
0533   0BD1           02155         decfsz  remote_block,F          ;  if last block,
0534   0008           02156         return
0535   250A           02157         call    usart_enable            ;   re-enable usart
0536   251F           02158         call    getchar                 ;   flush
0537   251F           02159         call    getchar                 ;    input fifo
0538   0008           02160         return
                      02161 
0539                  02162 no_blocking:
0539   251F           02163         call    getchar
053A   39FF           02164         andlw   0xff                    ; if no input, exit
053B   1903           02165         btfsc   STATUS,Z
053C   0008           02166         return
053D   3C38           02167         sublw   0x38    
053E   1903           02168         btfsc   STATUS,Z                ; got 8 from transmitter - toggle sweep function
053F   2D4B           02169         goto    sweep_toggled
0540   3C06           02170         sublw   0x06
0541   1903           02171         btfsc   STATUS,Z                ; got 2 from transmiiter - toggle feed functions
0542   2D50           02172         goto    feed_toggled
0543   30A0           02173         movlw   0xa0
0544   00D1           02174         movwf   remote_block
                      02175 ;no long beep   call    usart_disable
0545   2519           02176         call    usart_off               ; no long beep
0546   0008           02177         return
                      02178 
0547                  02179 set_remote_block
0547   3053           02180         movlw   BLOCK_CNT
0548   00D1           02181         movwf   remote_block
0549   2513           02182         call    usart_disable
054A   0008           02183         return
                      02184 
054B                  02185 sweep_toggled:
054B   301E           02186         movlw   0x1e                    ; set up to send 30 FF's
054C   00D2           02187         movwf   FF_count
054D   3002           02188         movlw   SWEEP_TOGGLE
054E   06D0           02189         xorwf   remote_toggle,F
                      02190 ;       movlw   8                       ; DEBUG
                      02191 ;       movwf   beep_count              ; DEBUG
054F   2D47           02192         goto    set_remote_block
                      02193 
0550                  02194 feed_toggled:
0550   301E           02195         movlw   0x1e                    ; set up to send 30 FF's
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0551   00D2           02196         movwf   FF_count
0552   3001           02197         movlw   FEED_TOGGLE
0553   06D0           02198         xorwf   remote_toggle,F
                      02199 ;       movlw   2                       ; DEBUG
                      02200 ;       movwf   beep_count              ; DEBUG
0554   2D47           02201         goto    set_remote_block
                      02202 
                      02203 
                      02204 
                      02205 ; Current sweep/2-line switch configuration.
                      02206 ; Sweep Enable SPST (On/Off) rocker, Sweep On / Sweep Off, input ot uC.
                      02207 ; Sweep Mode SPDT (On/Off/On) rocker, Narrow 2-line / Continuous Sweep / Wide 2-line, either On position
                             allows respective 2-line
                      02208 ; limit switch to be input to the uC.
                      02209 ; Sweep Enable switch  must be on for sweep motor to turn on in any sweep mode.
                      02210 ; Continuous sweep is when Sweep Mode Switch is off (center position), not allowing any 2-line limit swi
                            tch detection.
                      02211 ; Narrow or Wide 2-Line mode is when Sweep Mode Switch is on in either direction allowing either narrow 
                            or wide limit
                      02212 ; switch detection.
                      02213 ; If sweep is on in continuous mode and then it is switched to any 2-line mode, a ball could be released
                             before the sweep stops at 
                      02214 ; a 2-line limit switch, because we do not know we are in 2-line mode until the first 2-line limit switc
                            h is detected.
                      02215 ; When a 2-line limit switch is detected (change of state), the feed motor speed is restricted so ball f
                            eed rate is slower than
                      02216 ; side to side sweep.
                      02217 
                      02218 
0555                  02219 chk_2linesw:                                    ; called every 5ms
0555   1C4D           02220         btfss   sweep_is_on,0           ; If sweep motor on flag is on, I.E. sweep switch or remote turn
                            ed sweep on
0556   2D88           02221         goto    normal_feed_rate        ; If sweep motor on flag is off, set feed rate to normal.
                      02222 
0557   1E05           02223         btfss   PORTA,LINESWBIT
0558   258B           02224         call    restrict_feed_rate
                      02225 
                      02226 ; THE FOLLOWING TWO LINES CORRECTED THE PROBLEM IF IN 2-LINE MODE AND 2-LINE LIMIT SWITCH ON (MACHINE ST
                            OPPED
                      02227 ; AT 2-LINE), WHEN 2-LINE ROCKER WAS TURNED OFF, SWEEP MOTOR WOULD NOT START BACK UP UNTIL SWEEP SWITCH 
                            WAS TOGGLED
                      02228 
0559   1A05           02229         btfsc   PORTA,LINESWBIT         ; IF 2-LINE LIMIT SWITCH IS OFF...
055A   1587           02230         bsf             PORTC,SWEEP_EN          ; TURN ON SWEEP MOTOR
                      02231 
                      02232         
                      02233 
055B   0855           02234         movf    linesw_toggle,W         ; GET 2-LINE LIMIT SWITCH TOGGLE FLAG BYTE
055C   3910           02235         andlw   0x10                            ; BIT 4 IS THE ACTUAL FLAG, GET RID OF OTHER BITS (THERE
                             SHOULDN'T BE ANY)
055D   0605           02236         xorwf   PORTA,W                         ; COMPARE TO PORTA
055E   3910           02237         andlw   0x10                            ; GET RID OF EXTRA BITS AGAIN
055F   1903           02238         btfsc   STATUS,Z                        ; DID 2-LINE LIMIT SWITCH CHANGE STATE?
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0560   2D62           02239         goto    linesw_no_change        ;
0561   2D6B           02240         goto    linesw_change           ;
0562                  02241 linesw_no_change:                               ; IF 2-LINE LIMIT SWITCH DID NOT CHANGE STATE
0562   1E05           02242         btfss   PORTA,LINESWBIT         ; If 2-Line limit switch is on, don't do anything, otherwise sta
                            rt sweep timer.
0563   0008           02243         return
0564   3000           02244         movlw   0                                       ;
0565   0656           02245         xorwf   sweep_timer,W           ; IF SWEEP TIMER IS 0, 6 SECONDS SINCE LAST LINE SWITCH CLOSURE 
                            DETECTED
0566   1D03           02246         btfss   STATUS,Z                        ; THEN ASSUME NOT 2-LINE MODE AND SET FEED RATE BACK TO 
                            NORMAL ALGORITHM
0567   0008           02247         return                                          ; IF TIMER NOT EXPIRED, HAVEN'T WAITED LONG ENOU
                            GH
0568   3000           02248         movlw   0x00                            ; 0=NORMAL FEED RATE ALGORITHM
0569   00D7           02249         movwf   feed_rate_type          ; SET FEED RATE TO NORMAL ALGORITHM
056A   0008           02250         return                                          ;
056B                  02251 linesw_change:                                  ; IF 2-LINE SWITCH DID CHANGE STATE
                      02252 ;       movlw   0x01                            ; 1=RESTRICTED FEED RATE FOR 2-LINE MODE
                      02253 ;       movwf   feed_rate_type          ; SET FEED RATE TO RESTRICTED FOR 2-LINE MODE
056B   3006           02254         movlw   0x06                            ; 8 SECONDS
056C   00D6           02255         movwf   sweep_timer                     ; START TIMER AT 6 SECONDS (REALLY x SEC, BECAUSE OF MIS
                            CALCULATION WITH 5MS TIMER)
056D   3010           02256         movlw   0x10                            ;
056E   06D5           02257         xorwf   linesw_toggle,F         ; IF CHANGE (TOGGLE), PUT NEW VALUE IN LINESW_TOGGLE
                      02258 ;       btfss   PORTA,LINESWBIT         ; CHECK FOR 2-LINE LIMIT SWITCH ON (LOW)
                      02259 ;       bcf             PORTC,SWEEP_EN          ; IF 2-LINE LIMIT SWITCH IS ON, TURN OFF SWEEP MOTOR, TH
                            EN LEAVE ROUTINE
                      02260 ;       return                                          ; IF 2-LINE LIMIT SWITCH IS OFF, LEAVE ROUTINE
056F   1A05           02261         btfsc   PORTA,LINESWBIT
0570   0008           02262         return
0571   3001           02263         movlw   0x01
0572   00D7           02264         movwf   feed_rate_type
0573   1187           02265         bcf             PORTC,SWEEP_EN
0574   0008           02266         return
0575                  02267 linesw_toggle_init:                             ; WHEN SWEEP IS JUST TURNED ON, MUST MATCH LINESW_TOGGLE
                             VALUE TO 2-LINE SWITCH VALUE
0575   1A05           02268         btfsc   PORTA,4                         ;
0576   2D78           02269         goto    linesw_toggle_set       ;
0577   2D7B           02270         goto    linesw_toggle_clr       ;
0578                  02271 linesw_toggle_set:                              ;
0578   3010           02272         movlw   0x10                            ;
0579   00D5           02273         movwf   linesw_toggle           ;
057A   0008           02274         return                                          ;       
057B                  02275 linesw_toggle_clr:                              ;
057B   01D5           02276         clrf    linesw_toggle           ;
057C   0008           02277         return                                          ;
                      02278 
                      02279 ; IF THERE WAS A LINESW_TOGGLE CHANGE AND 2-LINE LIMIT SWITCH IS NOW OFF (SWEEPING), START TIMER AT 0 (C
                            LEAR), IF NOT
                      02280 ; ANOTHER TOGGLE WITHIN APPROX. 6 SECONDS, THEN 2-LINE MODE IS NOW OFF AND USE NORMAL FEED RATE ALGORITH
                            M.
                      02281 ;
                      02282 
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

057D                  02283 chk_intf:                                               ; CALLED EVERY 5MS
057D   1C4D           02284         btfss   sweep_is_on,0           ; IF SWEEP MOTOR ON FLAG IS ON
057E   0008           02285         return                                          ;
                      02286 ;       btfsc   INTCON,INTF                     ; CHECK FOR RB0/INT FLAG SET
                      02287 ;       btfsc   PORTB,0                         ; Flag was set, now double check ball detect switch inpu
                            t still on.
                      02288 ;       return                                          ;
                      02289 ;       goto    ball_dropped            ; Double checked that ball was dropped.
057F   1C8B           02290         btfss   INTCON,INTF                     ; If RBO/INT flag set, double check switch is still on (
                            debounce/noise filter).
0580   0008           02291         return                                          ; If RBO/INT flag not set, return.
0581   1C06           02292         btfss   PORTB,0                         ; If ball detect switch is still on, then ball was dropp
                            ed.
0582   2D85           02293         goto    ball_dropped            ;
0583   108B           02294         bcf             INTCON,INTF                     ; If ball detect switch is no longer on, it was 
                            a spurious detection, clear INTF and return.
0584   0008           02295         return
0585                  02296 ball_dropped:                                   ;
0585   1587           02297         bsf             PORTC,SWEEP_EN          ; ...THEN TURN ON SWEEP MOTOR
0586   108B           02298         bcf             INTCON,INTF                     ;
0587   0008           02299         return                                          ;
0588                  02300 normal_feed_rate
0588   3000           02301         movlw   0x00                            ; 0=Normal feed rate algorithm
0589   00D7           02302         movwf   feed_rate_type          ; If sweep motor on flag is not on, set feed rate to normal.
058A   0008           02303         return                                          ;
058B                  02304 restrict_feed_rate
058B   3001           02305         movlw   0x01
058C   00D7           02306         movwf   feed_rate_type
058D   0008           02307         return
                      02308 
                      02309 ; WHEN 2-LINE MODE (LINE LIMIT SWITCH) IS DETECTED, MUST REDUCE MAXIMUM BALL FEED RATE SO THAT TIME BETW
                            EEN
                      02310 ; BALLS FED IS LONGER THAN TIME TO SWEEP SIDE TO SIDE (APPROX. 5 SECONDS), I.E. LIMIT FEED MOTOR SPEED.
                      02311 ; WHEN 2-LINE MODE IS NOT DETECTED FOR LONGER THAN A SIDE TO SIDE SWEEP, MUST GO BACK TO NORMAL FEED RAT
                            E ALGORITHM.
                      02312 
                      02313 
                      02314 
058E                  02315 toggle_green_led:
058E   3004           02316         movlw   GREEN_LED_ON    ; value to turn on green LED
058F   0686           02317         xorwf   PORTB,f                 ; toggle green LED
0590   0008           02318         return
                      02319 
0591                  02320 toggle_red_led:
0591   3002           02321         movlw   RED_LED_ON              ; value to turn on red LED
0592   0686           02322         xorwf   PORTB,f                 ; toggle red LED
0593   0008           02323         return
                      02324 
                      02325 ; The following lines were a part of the fix for the ball jam problem at power-on.
                      02326 ; If the machine was powered on and a ball that was already in the chute got jammed in the server wheels
                            , the machine
                      02327 ; would not shut down with an overcurrent error if the speed pot was set fairly low.
                      02328 ; The top serve motor is the first to turn on and would cause the jam.
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02329 ; The jammed top server motor would just continue to draw excessive current until it's free-wheeling dio
                            de would heat up and fail.
                      02330 ; The changes dated 06/09/05 make the top serve motor spin up quickly at power-on, regardless of the pot
                             setting.
                      02331 ; Then if a ball gets jammed at power-on, enough current is present to trip the overcurrent circuit.
0594                  02332 top_not_inited:                         ; 06/09/05 MJZ added this line
0594   308F           02333         movlw   0x8f                    ; 06/09/05 MJZ added this line
0595   00A4           02334         movwf   t_top_pwm               ; 06/09/05 MJZ added this line
0596   0008           02335         return                                  ; 06/09/05 MJZ added this line
                      02336 
                      02337 ; The following lines and all lines dated 06/15/05 are changes that, at power-on, ramp up the bottom ser
                            ve motor to fairly 
                      02338 ; fast speed, regardless of the pot setting, before it is allowed to be set to the pot. When the changes
                            , 06/09/05, were added
                      02339 ; to ramp up the top serve motor at power-on, the top serve motor, if the speed pot was set low, would s
                            low down before the 
                      02340 ; bottom serve motor would start spinning. The bottom serve motor would pull a ball, that was already in
                             the chute, into the
                      02341 ; wheels and the serve motors would jam on the ball without overcurrent detection, because both motors a
                            re drawing too little
                      02342 ; current. Now the bottom serve motor will draw enough current at the ball jam time to trip the overcurr
                            ent detection circuit.
0597                  02343 bot_not_inited:                         ; 06/15/05 MJZ added this line
0597   308F           02344         movlw   0x8f                    ; 06/15/05 MJZ added this line
0598   00A6           02345         movwf   t_bot_pwm               ; 06/15/05 MJZ added this line
0599   0008           02346         return                                  ; 06/15/05 MJZ added this line
                      02347 
                      02348 
                      02349         END                       ; directive 'end of program'
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

ADCON0                            0000001F
ADCON0VAL                         00000081
ADCON1                            0000009F
ADCON1VAL                         00000002
ADCS0                             00000006
ADCS1                             00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRES                             0000001E
BATTERY                           00000002
BEEP_OFF                          00000040
BF                                00000000
BLOCK_CNT                         00000053
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
ELEV_EN                           00000004
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

F                                 00000001
FEEDBIT                           00000003
FEED_BIT                          00000000
FEED_LED                          00000003
FEED_TOGGLE                       00000001
FERR                              00000002
FF_count                          00000052
FLASH_TIME                        00000030
FSR                               00000004
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
GREEN_LED                         00000002
GREEN_LED_ON                      00000004
HighImpInt                        000000AF
HighImpInt2                       000000B1
HighImpShrt                       0000008B
Highpulse                         00000086
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTCONVAL                         000000A0
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
LINESWBIT                         00000004
LowImpInt                         000000DD
LowImpInt2                        000000DF
LowImpShrt                        000000BA
Lowpulse                          000000B6
MSEC5_LSB                         000000A8
MSEC5_MSB                         00000061
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTIONVAL                         000000C8
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

OPTION_REG                        00000081
P                                 00000004
PAUSE_TIME                        00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PMADR                             0000010D
PMADRH                            0000010F
PMCON1                            0000018C
PMDATA                            0000010C
PMDATH                            0000010E
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PWM1                              00000002
PWM2                              00000001
PWMADJUSTVAL                      00000016
PWMMAXVAL                         0000001D
PWMOUTBIT                         00000000
PwmInt                            00000083
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RED_LED                           00000001
RED_LED_ON                        00000002
REMOTE_BIT                        00000005
REMOTE_ON                         00000020
RP0                               00000005
RP1                               00000006
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SMP                               00000007
SPBRG                             00000099
SPDBIT                            00000001
SPEN                              00000007
SPINPBIT                          00000000
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SWEEPEN                           00000004
SWEEP_BIT                         00000001
SWEEP_EN                          00000003
SWEEP_TOGGLE                      00000002
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TICK_CNT                          00000057
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISAVAL                          0000003F
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISBVAL                          000000F1
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

TRISC7                            00000007
TRISCVAL                          000000A0
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WaitAdc                           0000029E
WaitNoInt                         00000299
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CP_ALL                           00003FEF
_CP_OFF                           00003FFF
_CP_ON                            00003FEF
_DEVID1                           00002006
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_RC                          00003FFF
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F73                           00000001
a2d_chan                          00000033
acq_a2d                           0000028A
adjust_backspin                   00000398
adjust_backspin1                  000002C5
adjust_bs1                        000002F9
adjust_topspin                    0000034E
adjust_topspin1                   00000303
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

adjust_ts                         00000382
at0sec                            00000046
at10sec                           00000109
at11sec                           00000109
at12sec                           0000010A
at13sec                           0000010A
at14sec                           0000010B
at15sec                           0000010D
at1sec                            000000E3
at2sec                            000000FA
at3sec                            000000FA
at4sec                            000000FB
at5sec                            000000FC
at6sec                            00000104
at7sec                            00000105
at8sec                            00000108
at9sec                            00000109
atcom                             0000010C
ball_dropped                      00000585
bat_a2d                           0000003A
bat_dead                          00000454
bat_dead_loop                     0000045B
bat_led_xit                       000004A2
beep_count                        00000054
between_2.4v_2.5v                 00000490
bot_inited                        00000029
bot_not_inited                    00000597
bs_com                            000003AF
c_bot_pwm                         00000027
c_top_pwm                         00000025
calc_bot_pwm                      000002A9
calc_feed                         00000212
calc_pwm                          0000003D
calc_top_pwm                      00000333
charg_lt_3_0                      000003D8
charg_lt_3_2                      000003CF
charg_lt_3_3                      000003CE
chk_2linesw                       00000555
chk_feed_rate_type                00000199
chk_feed_xit                      00000237
chk_intf                          0000057D
chk_rbif                          000003EE
chk_rbif1                         00000415
chk_rbif2                         00000405
chk_rbif3                         00000404
chk_remote                        0000052B
counter                           0000002E
counter2                          0000002F
debug_led                         000004BD
dec_bot                           000001DD
dec_bot_by_8                      000001E3
dec_top                           000001C2
dec_top_by_8                      000001C8
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

delay                             00000048
delaylp                           00000297
delta_c                           0000003E
delta_s                           0000003F
enable_feed                       000001FE
err_no                            00000041
feed_a2d                          0000003B
feed_inited                       0000002A
feed_off                          000001F2
feed_ok                           00000145
feed_ok1                          000001A1
feed_rate_type                    00000057
feed_toggled                      00000550
fgrn_loop                         000003DD
flash_code                        00000042
flash_com                         000003DB
flash_error                       00000442
flash_greenled                    00000445
flash_grn                         000003D0
flash_red                         000003D4
getchar                           0000051F
grn_off                           00000493
grn_on                            0000049E
high_spd                          0000036A
high_spd1                         000002E1
i_second                          0000006F
idle                              00000047
inc_bot_by_8                      000001DA
inc_top_by_8                      000001BF
init_bat_level                    00000475
init_done                         00000036
init_enable_feed                  00000248
init_feed_pwm                     00000238
init_feed_xit                     00000250
init_pl_com                       00000484
init_update_feed                  0000024E
last_sweep                        00000053
led_bits                          00000043
linesw_change                     0000056B
linesw_no_change                  00000562
linesw_toggle                     00000055
linesw_toggle_clr                 0000057B
linesw_toggle_init                00000575
linesw_toggle_set                 00000578
main                              00000010
moterr_lp                         00000430
motor_error                       00000429
msec5                             00000035
mult1                             00000049
mult2                             0000004A
mult3                             0000004B
mult_lp                           000004E5
mult_lp1                          000004FC
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

mult_ret_0                        000004F3
mult_sub                          000004DD
mult_sub1                         000004F4
no_bat_adjust                     000004BC
no_blocking                       00000539
no_remote_feed                    000001EE
no_spin                           000003B3
no_spin1                          0000032B
normal_feed_rate                  00000588
not_second                        00000064
npwr_on_reset                     00000162
over1v                            000001FB
over2_5v                          00000498
over2_6v                          0000049B
over_pt4_v                        00000245
pause                             0000044F
pl_com                            000004B6
power_is_off                      000003B6
power_level                       00000045
power_level_r                     00000046
power_level_tmp                   00000047
putchar                           00000529
pwmdesired                        00000030
pwmhelp                           00000032
pwmmax                            00000031
pwr_off_loop                      000003FC
pwr_off_lp                        00000403
pwr_on_code                       00000023
pwr_on_reset                      00000166
r1                                0000004E
r2                                0000004F
rbif_bits                         0000004C
rbif_lp                           0000041E
rbif_wait                         00000044
record_bat_level                  000004A7
remote_block                      00000051
remote_off                        00000287
remote_toggle                     00000050
restrict_feed_rate                0000058B
sec0init                          00000110
seconds                           00000034
set_bot                           000001E5
set_pwm_value                     00000235
set_remote_block                  00000547
set_top                           000001CA
slow_spd                          00000326
slow_spd1                         000003AE
soft_pwm                          00000037
spd_a2d                           00000039
spin_a2d                          00000038
stacks                            0000002D
stackw                            0000002C
status_temp                       00000021
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

sweep_a2d                         0000003C
sweep_exit                        00000264
sweep_exit1                       00000264
sweep_inited                      0000002B
sweep_is_on                       0000004D
sweep_off                         00000260
sweep_on                          00000259
sweep_remote                      00000265
sweep_timer                       00000056
sweep_toggled                     0000054B
t_bot_pwm                         00000026
t_top_pwm                         00000024
temp                              00000022
tick0                             0000016C
tick1                             00000179
tick2                             00000187
tick3                             0000018C
tick4                             000001A2
tick5                             000001A8
tick6                             000001AB
tick7                             000001AE
toggle_green_led                  0000058E
toggle_red_led                    00000591
top_inited                        00000028
top_not_inited                    00000594
ts_com1                           00000327
under2_5v                         0000048E
upd_exit                          000001CC
update_bat_led                    00000486
update_bot_pwm                    000001CD
update_done                       000001E7
update_feed                       00000207
update_feed_pwm                   000001E8
update_remote                     00000268
update_rmxit                      00000286
update_sweep                      00000251
update_top_pwm                    000001B2
usart_disable                     00000513
usart_enable                      0000050A
usart_off                         00000519
w_temp                            00000020
wait                              0000045E
wait_cnt                          00000040
wait_no_clrwdt                    0000046A
wait_reset_lp                     000003CA
waitlp                            0000045F
waitlp1                           0000046B
xmit_status                       00000525
MPASM 5.87                CS019-TWOWHEEL.ASM   9-19-2025  16:19:43         PAGE 58


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XX--XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXX------ ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1432
Program Memory Words Free:  2664


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    21 reported,     0 suppressed

