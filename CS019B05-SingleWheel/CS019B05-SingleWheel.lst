MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; CS019B05, 08/07/09, changing code to slow down new serve motors from Hillhouse products.
                      00002 
                      00003         list      p=16f73            ; list directive to define processor
                      00004         #include <p16f73.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F73 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00455         LIST
                      00005 
                      00006 ;       __CONFIG   _CP_OFF & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
2007   3FE6           00007         __CONFIG   _CP_ALL & _WDT_ON & _BODEN_ON & _PWRTE_ON & _HS_OSC
                      00008 
                      00009 ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00010 ; The lables following the directive are located in the respective .inc file.
                      00011 ; See respective data sheet for additional information on configuration word.
                      00012 
                      00013 ;*********************************************************************
                      00014 ; Definitions
                      00015 ;*********************************************************************
                      00016 ;
  000000A8            00017 MSEC5_LSB       equ     0xa8    
                      00018 ;NORMAL 
  00000061            00019 MSEC5_MSB       equ     0x61
                      00020 
                      00021 ;SIM MSEC5_MSB  equ     0xfe
                      00022 
                      00023 ; msec5 init value to count up to 1 second
                      00024 ; 200 5msec ticks (255 - 200)
                      00025 ;TICK_CNT       equ     0x37
  00000057            00026 TICK_CNT        equ     0x57
                      00027 ; remote block init value to count down to 1/2 second
  00000053            00028 BLOCK_CNT       equ     0x53
                      00029 ; I/O, Interrupt and Option Definitions
                      00030 ;
                      00031 ;OPTIONVAL      equ     88h             ;10001000b: portB no pull-up, tmr0 int
  000000C8            00032 OPTIONVAL       equ     0c8h            ;11001000b: portB no pull-up,  RB0/INT rising edge, tmr0 int
                      00033 ;OPTIONVAL      equ     088h            ;11001000b: portB no pull-up,  RB0/INT falling edge, tmr0 int
  000000A0            00034 INTCONVAL       equ     0a0h            ; set GIE, TOIE
                      00035 
                      00036                                         ; port A:
  00000000            00037 SPINPBIT        equ     00h             ; analog input for ball spin     a/d channel 0
  00000001            00038 SPDBIT          equ     01h             ; analog input for ball speed    a/d channel 1
  00000002            00039 BATTERY         equ     02h             ; analog input for battery level a/d channel 2
  00000003            00040 FEEDBIT         equ     03h             ; analog input for feed rate     a/d channel 3
  00000004            00041 SWEEPEN         equ     04h             ; analog input for sweep enable switch a/d channel 4 (PORTA bit 
                            5)
  0000003F            00042 TRISAVAL        equ     3fh             ;00111111b: A0 - A5 as input
  00000002            00043 ADCON1VAL       equ     2               ; RA0,1,2,3,5 are analog        ;MJZ DEBUG, COMMENTED THIS LINE
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044 ;ADCON1VAL      equ     6               ;MJZ DEBUG, ADDED THIS LINE, CHANGED ALL ANALOG INPUTS TO DIGITA
                            L INPUTS
  00000081            00045 ADCON0VAL       equ     081h            ;10000001b: fosc/32, channel 0
  00000004            00046 LINESWBIT       equ 04h                 ;MJZ ADDED LINE, 2-LINE LIMIT SWITCH INPUT BIT, LOW=SWITCH ON, H
                            IGH=SWITCH OFF
                      00047 
                      00048                                         ; port B:
  000000F1            00049 TRISBVAL        equ     0f1h            ;11110001b: B1,B2,B3 as output
  00000001            00050 RED_LED         equ     1               ;  bit 1 controls red led
  00000002            00051 GREEN_LED       equ     2               ;  bit 2 controls green led
  00000003            00052 FEED_LED        equ     3               ;  bit 3 controls feed led
  00000002            00053 RED_LED_ON      equ     2               ;  value to turn on red led
  00000004            00054 GREEN_LED_ON    equ     4               ;  value to turn on green led
                      00055 
                      00056                                         ; port C:
  00000000            00057 PWMOUTBIT       equ     00h             ; software PWM output for feed motor
  00000003            00058 SWEEP_EN        equ     03h             ; sweep motor enable (digital out)
  00000004            00059 ELEV_EN         equ     04h             ; elevation motor enable (digital out)
  00000040            00060 BEEP_OFF        equ     0x40            ; bit 6 on disables beep
  000000A0            00061 TRISCVAL        equ     0a0h            ;10100000b: C7,C5 as input
  00000002            00062 PWM1            equ     2
  00000001            00063 PWM2            equ     1
                      00064 
  00000030            00065 FLASH_TIME      equ     30h
  00000004            00066 PAUSE_TIME      equ     4
                      00067 
                      00068 ;***** VARIABLE DEFINITIONS
  00000020            00069 w_temp          equ     0x20            ; variable used for context saving 
  00000021            00070 status_temp     equ     0x21            ; variable used for context saving
  00000022            00071 temp            equ     0x22
  00000023            00072 pwr_on_code     EQU     0x23
  00000024            00073 t_top_pwm       equ     0x24            ; target value for top PWM
  00000025            00074 c_top_pwm       equ     0x25            ; current value for top PWM
  00000026            00075 t_bot_pwm       equ     0x26            ; target value for bot PWM
  00000027            00076 c_bot_pwm       equ     0x27            ; current value for bot PWM
  00000028            00077 top_inited      equ     0x28            ; top motor init done
  00000029            00078 bot_inited      equ     0x29            ; bottom motor init done
  0000002A            00079 feed_inited     equ     0x2a            ; feed motor init done
  0000002B            00080 sweep_inited    equ     0x2b            ; sweep motor init done
                      00081 
  0000002C            00082 stackw          equ     0x2c            ; stack to push/pop the W-register
  0000002D            00083 stacks          equ     0x2d            ; stack to push/pop the STATUS-reg
  0000002E            00084 counter         equ     0x2e            ; counter: input frequency
                      00085                                         ;   f1 = crystalfreq. / 4 / 255
  0000002F            00086 counter2        equ     0x2f            ; counter2: input frequency
                      00087                                         ;   f2 = f1 / 128
  00000030            00088 pwmdesired      equ     0x30            ; target PWM of feed motor value 0..255
  00000031            00089 pwmmax          equ     0x31            ; register to support generation PWM
  00000032            00090 pwmhelp         equ     0x32            ; used as temp storage of pwmdesired
                      00091 
  00000033            00092 a2d_chan        equ     0x33            ; next channel to acquire a2d
                      00093 
  00000034            00094 seconds         equ     0x34            ; seconds since poweron
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000035            00095 msec5           equ     0x35            ; number of 5msec intrs
  00000036            00096 init_done       equ     0x36            ; power up initialization done
  00000037            00097 soft_pwm        equ     0x37            ; software PWM module enabled
                      00098 
  00000038            00099 spin_a2d        equ     0x38            ; a2d value from a2d chan 0
  00000039            00100 spd_a2d         equ     0x39            ; a2d value from a2d chan 1
  0000003A            00101 bat_a2d         equ     0x3a            ; a2d value from a2d chan 2
  0000003B            00102 feed_a2d        equ     0x3b            ; a2d value from a2d chan 3
  0000003C            00103 sweep_a2d       equ     0x3c            ; a2d value from a2d chan 4
                      00104 
  0000003D            00105 calc_pwm        equ     0x3d            ; temporarily variable for calculating PWM
  0000003E            00106 delta_c         equ     0x3e            ; temp var
  0000003F            00107 delta_s         equ     0x3f            ; temp var
                      00108 
  00000040            00109 wait_cnt        equ     0x40            ; counter for wait routine
                      00110 ;err_no         equ     0x41            ; motor error number    ;MJZ COMMENTED THIS LINE
                      00111                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00112                                         ;              4= bottom serve err, 5= sweep motor error
  00000041            00113 err_no          equ     0x41            ; motor error number    ;MJZ ADDED THIS LINE
                      00114                                         ; 0= no error, 2= feed motor error, 3= top serve motor error
                      00115                                         ;              4= bottom serve err, 5= POWER OFF ERROR
  00000042            00116 flash_code      equ     0x42            ; local variable used by motor_err()
  00000043            00117 led_bits        equ     0x43            ; memory copy of LED bits on PORTB
  00000044            00118 rbif_wait       equ     0x44            ; delay for rechecking rbif
                      00119 
  00000045            00120 power_level     equ     0x45            ; power level for set led: 0 is > 2.6v, 1 is > 2.5V, 2 is > 2.4v
                            , 3 is < 2.4v
  00000046            00121 power_level_r   equ     0x46            ; lowest power level for this 16 second period
  00000047            00122 power_level_tmp equ     0x47            ; temp var 
  00000048            00123 delay           equ     0x48            ; delay var
                      00124 
  00000049            00125 mult1           equ     0x49            ; temp var for mult_sub routine
  0000004A            00126 mult2           equ     0x4a            ; temp var for mult_sub routine
  0000004B            00127 mult3           equ     0x4b            ; temp var for mult_sub routine
  0000004C            00128 rbif_bits       equ     0x4c            ; bit mask for checking motor errors
  0000004D            00129 sweep_is_on     equ     0x4d            ; sweep motor on flag
  0000004E            00130 r1              equ     0x4e            ; result of mult1 x mult2
  0000004F            00131 r2              equ     0x4f            ; result of mult1 x mult2
                      00132 
  00000050            00133 remote_toggle   equ     0x50            ; toggle bits for remote control
  00000000            00134 FEED_BIT        equ     0
  00000001            00135 SWEEP_BIT       equ     1
  00000005            00136 REMOTE_BIT      equ     5
  00000001            00137 FEED_TOGGLE     equ     0x01            ; bit 0:  0 = feed off, 1 = feed on
  00000002            00138 SWEEP_TOGGLE    equ     0x02            ; bit 1:  0 = sweep off, 1 = sweep on
  00000020            00139 REMOTE_ON       equ     0x20            ; bit 5:  0 = remote disabled, 1= enabled
  00000051            00140 remote_block    equ     0x51            ; time to block remote transmission input
  00000052            00141 FF_count        equ     0x52            ; remaining FF's to send for beep
  00000053            00142 last_sweep      equ     0x53            ;
  00000054            00143 beep_count      equ     0x54            ; DEBUG
                      00144 
                      00145 
                      00146 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000055            00147 linesw_toggle   equ 0x55        ;MJZ ADDED THIS LINE, BIT 4 IS 2-LINE SWITCH TOGGLE BIT
  00000056            00148 sweep_timer             equ 0x56        ;MJZ ADDED THIS LINE, REACHES 0 MEANS NO 2-LINE SWITCH DETECTED 
                            BETWEEN SIDE TO SIDE SWEEPS
  00000057            00149 feed_rate_type  equ 0x57        ;MJZ ADDED THIS LINE, BIT 0=0 FOR NORMAL FEED RATE ALGORITHM, 
                      00150                                                         ;MJZ ADDED THIS LINE, BIT 0=1 FOR RESTRICTED MAX
                             RATE IN 2-LINE MODE
                      00151 
                      00152 
                      00153 
                      00154 ;----------------------------------------------------------------------
                      00155 ; PWM-module constant
  00000016            00156 PWMADJUSTVAL    equ     .22
                      00157         ; correction number, defined by the following factors:
                      00158         ; time from timer interrupt to executing PC 004 + 3 cycles
                      00159         ; computing time from PC=004 to required edge   +18 cycles
                      00160         ; lost timer cycles due to writing the time     + 2 cycles
                      00161         ; cal desired PWM value to timer loading value  + 2 cycles
                      00162         ; time from timer loading to gen required edge  - 1 cycle
                      00163         ; valid value for hardware (unknown diff to the data sheet)
                      00164         ; 3+18+2+2-1=22
                      00165         ; value value for PICSIM version 5.11 (error of PICSIM):
                      00166         ; 0+18+2+2-1=21
  0000001D            00167 PWMMAXVAL       equ     .29
                      00168         ; loading value for pwmmax
                      00169         ; If n is the maximum length of a high pulse, which has to be
                      00170         ; generated by the skipping method, then is PWMMAXVAL = n+1.
                      00171         ; The max length of a low pulse using the skip method is n-1.
                      00172 
                      00173 
                      00174 
                      00175 ;**********************************************************************
0000                  00176                 ORG     0x000             ; processor reset vector
0000   018A           00177                 clrf    PCLATH            ; ensure page bits are cleared
0001   2810           00178                 goto    main              ; go to beginning of program
                      00179 
                      00180 
0004                  00181                 ORG     0x004             ; interrupt vector location
0004   00A0           00182                 movwf   w_temp            ; save off current W register contents
0005   0803           00183                 movf    STATUS,w          ; move status register into W register
0006   1283           00184                 bcf     STATUS,RP0        ; ensure file register bank set to 0
0007   00A1           00185                 movwf   status_temp       ; save off contents of STATUS register
                      00186 
                      00187 ; isr code can go here or be located as a call subroutine elsewhere
0008   190B           00188                 btfsc   INTCON,T0IF      ; check for timer0 interrupt
0009   2083           00189                 call    PwmInt
                      00190 
000A   1283           00191                 bcf     STATUS,RP0        ; ensure file register bank set to 0
000B   0821           00192                 movf    status_temp,w     ; retrieve copy of STATUS register
000C   0083           00193                 movwf   STATUS            ; restore pre-isr STATUS register contents
000D   0EA0           00194                 swapf   w_temp,f
000E   0E20           00195                 swapf   w_temp,w          ; restore pre-isr W register contents
000F   0009           00196                 retfie                    ; return from interrupt
                      00197 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010                  00198 main
                      00199 ; init code 
                      00200         ;configuration of the PWM module
0010   018B           00201         clrf    INTCON                  ; disable all intrs
0011   0197           00202         clrf    CCP1CON                 ; CCP1 Module is off
0012   019D           00203         clrf    CCP2CON                 ; CCP2 Module is off
0013   0181           00204         clrf    TMR0                    ; reset timer
0014   01B0           00205         clrf    pwmdesired              ; reset value of software PWM is 0
0015   01A4           00206         clrf    t_top_pwm
0016   01A6           00207         clrf    t_bot_pwm
0017   01A5           00208         clrf    c_top_pwm
0018   01A7           00209         clrf    c_bot_pwm
0019   01A8           00210         clrf    top_inited
001A   01A9           00211         clrf    bot_inited
001B   01AA           00212         clrf    feed_inited
001C   01AB           00213         clrf    sweep_inited
                      00214 ;       clrw
                      00215 ;       clrf    PORTC                   ; reset all output to 0 before port C
001D   3040           00216         movlw   BEEP_OFF                ; reset all output to 0 except BEEP_OFF before port C
001E   0087           00217         movwf   PORTC                   ; is changed from input to output 
                      00218                                         ; to suppress an uncontrolled
                      00219                                         ; spike
001F   0186           00220         clrf    PORTB                   ; turn off red led, green led, and feed led
0020   01A3           00221         clrf    pwr_on_code             ; reset type code
0021   301D           00222         movlw   PWMMAXVAL               ; set support register
0022   00B1           00223         movwf   pwmmax                  ;
                      00224         ; configuration of the PIC
0023   1683           00225         bsf     STATUS,RP0              ; register page 1
0024   303F           00226         movlw   TRISAVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0025   0085           00227         movwf   TRISA                   ; ...port A
0026   30F1           00228         movlw   TRISBVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0027   0086           00229         movwf   TRISB                   ; ...port B
0028   30A0           00230         movlw   TRISCVAL                ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0029   0087           00231         movwf   TRISC                   ; ...port C
002A   3002           00232         movlw   ADCON1VAL               ; set inputs of ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002B   009F           00233         movwf   ADCON1                  ; ...adc
002C   30C8           00234         movlw   OPTIONVAL               ; configure ...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002D   0081           00235         movwf   OPTION_REG              ; ...PIC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002E   080E           00236         movf    PCON,w                  ; pick up NOT_POR and NOT_BOR
002F   3903           00237         andlw   3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0030   148E           00238         bsf     PCON,NOT_POR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0031   140E           00239         bsf     PCON,NOT_BOR
0032   1283           00240         bcf     STATUS,RP0              ; register page 0
0033   00A3           00241         movwf   pwr_on_code
0034   3018           00242         movlw   0x18                    ; get NOT_TO and NOT_PD
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0035   0503           00243         andwf   STATUS,w
0036   04A3           00244         iorwf   pwr_on_code,f                   ; or with NOT_POR and NOT_BOR
0037   0064           00245         clrwdt
                      00246 ;
                      00247 ; init variables
0038   01B4           00248         clrf    seconds
0039   01B6           00249         clrf    init_done               ; power on init not done
003A   01B7           00250         clrf    soft_pwm                ; software pwm module not enabled
003B   01C3           00251         clrf    led_bits
003C   30A8           00252         movlw   MSEC5_LSB               ; init  timer1 to count up to 5 msec
003D   008E           00253         movwf   TMR1L
003E   3061           00254         movlw   MSEC5_MSB
003F   008F           00255         movwf   TMR1H
0040   3001           00256         movlw   0x01                    ; enables TMR1, FOSC/4, 1:1 prescale
0041   0090           00257         movwf   T1CON   
0042   3057           00258         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
0043   00B5           00259         movwf   msec5
                      00260 
0044   01D6           00261         clrf    sweep_timer             ;MJZ ADDED THIS LINE
0045   01D7           00262         clrf    feed_rate_type  ;MJZ ADDED THIS LINE
                      00263 
                      00264 
                      00265 ; on power up
                      00266 ;
0046                  00267 at0sec
0046   2110           00268         call    sec0init
                      00269 ;       movlw   0xf8                    ; SIM ONLY
                      00270 ;       movwf   msec5                   ; SIM ONLY
                      00271 ; main idle loop
                      00272 ;
0047                  00273 idle
0047   0064           00274         clrwdt                          ; toggle watchdog
0048   1C0C           00275         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0049   2847           00276         goto    idle
004A   30A8           00277         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
004B   008E           00278         movwf   TMR1L
004C   3061           00279         movlw   MSEC5_MSB
004D   008F           00280         movwf   TMR1H
004E   100C           00281         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
                      00282 ;       call    chk_rbif                ; check if RB7:RB4 pins changed - motors error  ;MJZ COMMENTED T
                            HIS LINE
004F   23EE           00283         call    chk_rbif                ;MJZ ADDED THIS LINE, CHECK IF RB7:RB4 PINS CHANGED - MOTOR ERRO
                            RS OR POWER OFF
0050   257D           00284         call    chk_intf                ;MJZ ADDED THIS LINE, CHECK FOR BALL DROPPED
0051   252B           00285         call    chk_remote
0052   2555           00286         call    chk_2linesw             ;MJZ ADDED LINE, CHECK IF 2-LINE LIMIT SWITCH IS ON, NEEDS TO BE
                             CHECKED EVERY 5MS
                      00287                                                         ;TO ENSURE STOP POSITION ACCURACY & CONSISTANCY
0053   0FB5           00288         incfsz  msec5,f                 ; if msec5 overflowed,
0054   2864           00289         goto    not_second
                      00290 ;       movlw   0x55                    ; DEBUG
                      00291 ;       btfss   remote_toggle,REMOTE_BIT        ; DEBUG
                      00292 ;       call    putchar                 ; DEBUG
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00293 
Message[305]: Using default destination of 1 (file).
0055   03D6           00294         decf    sweep_timer                     ;MJZ ADDED THIS LINE, SWEEP TIMER COUNTDOWN SECONDS
                      00295 
0056   1845           00296         btfsc   power_level,0           ;MJZ ADDED THIS LINE
0057   258E           00297         call    toggle_green_led        ;MJZ ADDED THIS LINE, IF POWER_LEVEL=1 (OR 3), TOGGLE GREEN LED 
                            (POWER_LEVEL 3 NEVER GETS HERE)
0058   18C5           00298         btfsc   power_level,1           ;MJZ ADDED THIS LINE
0059   2591           00299         call    toggle_red_led          ;MJZ ADDED THIS LINE, IF POWER_LEVEL=2 (OR 3), TOGGLE RED LED (P
                            OWER_LEVEL 3 NEVER GETS HERE)
                      00300 
005A   144C           00301         bsf     rbif_bits,0                     ; start checking for sweep motor error again
005B   3057           00302         movlw   TICK_CNT                ; init msec5 so it will roll over after 1 second
005C   00B5           00303         movwf   msec5
                      00304 ;       movlw   0xf8                    ; SIM ONLY
                      00305 ;       movwf   msec5                   ; SIM ONLY
005D   0B36           00306         decfsz  init_done,w             ;   and init not done
005E   286F           00307         goto    i_second                ;   do init stuff
005F   0AB4           00308         incf    seconds,f               ; msec5 overflowed, actually toggled every 1 seconds
0060   0834           00309         movf    seconds,w
0061   390F           00310         andlw   0x0f                    ; update battery led every 16 seconds
0062   1903           00311         btfsc   STATUS,Z
0063   2486           00312         call    update_bat_led
                      00313 
0064                  00314 not_second:
0064   3007           00315         movlw   7
0065   0535           00316         andwf   msec5,w
0066   0782           00317         addwf   PCL,f
0067   296C           00318         goto    tick0
0068   2979           00319         goto    tick1
0069   2987           00320         goto    tick2
006A   298C           00321         goto    tick3
006B   29A2           00322         goto    tick4
006C   29A8           00323         goto    tick5
006D   29AB           00324         goto    tick6
006E   29AE           00325         goto    tick7
                      00326 
006F                  00327 i_second:
006F   0A34           00328         incf    seconds,w               ; msec5 overflowed, actually toggled every 1.25 seconds
0070   00B4           00329         movwf   seconds
0071   0782           00330         addwf   PCL,f
0072   2846           00331         goto    at0sec                  ; 0 second - this won't happen
0073   28E3           00332         goto    at1sec                  ; 1 second
0074   28FA           00333         goto    at2sec                  ; 2 seconds
0075   28FA           00334         goto    at3sec                  ; 3 seconds
0076   28FB           00335         goto    at4sec
0077   28FC           00336         goto    at5sec
0078   2904           00337         goto    at6sec
0079   2905           00338         goto    at7sec
007A   2908           00339         goto    at8sec
007B   2909           00340         goto    at9sec
007C   2909           00341         goto    at10sec
007D   2909           00342         goto    at11sec
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007E   290A           00343         goto    at12sec
007F   290A           00344         goto    at13sec
0080   290B           00345         goto    at14sec
0081   290D           00346         goto    at15sec
                      00347 
                      00348 
                      00349 
0082   2847           00350         goto    idle
                      00351 ; end of main
                      00352 
                      00353 ;--- software PWM Generator
                      00354 ;
0083                  00355 PwmInt
0083   110B           00356         bcf     INTCON,T0IF             ; clear interrupt flag
0084   1807           00357         btfsc   PORTC,PWMOUTBIT         ; which edge is required?
0085   28B6           00358         goto    Lowpulse                ; -> goto falling edge
0086                  00359 Highpulse
0086   0930           00360         comf    pwmdesired,W            ; get desired PWM value
0087   00B2           00361         movwf   pwmhelp                 ; store val for the foll low pulse
0088   07B1           00362         addwf   pwmmax,F                ; calc number of inst's to skip
0089   1C03           00363         btfss   STATUS,C                ; which method to use?
008A   28AF           00364         goto    HighImpInt              ; -> using interrupt
008B                  00365 HighImpShrt
008B   0831           00366         movf    pwmmax,W                ; get number of inst's to skip
008C   0782           00367         addwf   PCL,F                   ; skip n instructions
008D   1407           00368         bsf     PORTC,PWMOUTBIT         ; rising edge, 28 cycles hi pulse
008E   1407           00369         bsf     PORTC,PWMOUTBIT         ; 27 cycles
008F   1407           00370         bsf     PORTC,PWMOUTBIT         ; 26 cycles
0090   1407           00371         bsf     PORTC,PWMOUTBIT         ; 25 cycles
0091   1407           00372         bsf     PORTC,PWMOUTBIT         ; 24 cycles
0092   1407           00373         bsf     PORTC,PWMOUTBIT         ; 23 cycles
0093   1407           00374         bsf     PORTC,PWMOUTBIT         ; 22 cycles
0094   1407           00375         bsf     PORTC,PWMOUTBIT         ; 21 cycles
0095   1407           00376         bsf     PORTC,PWMOUTBIT         ; 20 cycles
0096   1407           00377         bsf     PORTC,PWMOUTBIT         ; 19 cycles
0097   1407           00378         bsf     PORTC,PWMOUTBIT         ; 18 cycles
0098   1407           00379         bsf     PORTC,PWMOUTBIT         ; 17 cycles
0099   1407           00380         bsf     PORTC,PWMOUTBIT         ; 16 cycles
009A   1407           00381         bsf     PORTC,PWMOUTBIT         ; 15 cycles
009B   1407           00382         bsf     PORTC,PWMOUTBIT         ; 14 cycles
009C   1407           00383         bsf     PORTC,PWMOUTBIT         ; 13 cycles
009D   1407           00384         bsf     PORTC,PWMOUTBIT         ; 12 cycles
009E   1407           00385         bsf     PORTC,PWMOUTBIT         ; 11 cycles
009F   1407           00386         bsf     PORTC,PWMOUTBIT         ; 10 cycles
00A0   1407           00387         bsf     PORTC,PWMOUTBIT         ; 9 cycles
00A1   1407           00388         bsf     PORTC,PWMOUTBIT         ; 8 cycles
00A2   1407           00389         bsf     PORTC,PWMOUTBIT         ; 7 cycles
00A3   1407           00390         bsf     PORTC,PWMOUTBIT         ; 6 cycles
00A4   1407           00391         bsf     PORTC,PWMOUTBIT         ; 5 cycles
00A5   1407           00392         bsf     PORTC,PWMOUTBIT         ; 4 cycles
00A6   1407           00393         bsf     PORTC,PWMOUTBIT         ; 3 cycles
00A7   1407           00394         bsf     PORTC,PWMOUTBIT         ; 2 cycles
00A8   1407           00395         bsf     PORTC,PWMOUTBIT         ; 1 cycle
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A9   1007           00396         bcf     PORTC,PWMOUTBIT         ; fall edge, start of the following
                      00397                                         ; low pulse using the interrupt
00AA   0AAE           00398         incf    counter,F               ; trigger counter, cause there was
                      00399                                         ; a rising edge
00AB   0932           00400         comf    pwmhelp,W               ; get required low pulse length
00AC   3E1B           00401         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
                      00402                                         ; Edge was generated 5 cycles before
                      00403                                         ; usual point of time
00AD   0081           00404         movwf   TMR0                    ; put value into timer
00AE   28DF           00405         goto    LowImpInt2              ; low pulse using int is running
00AF                  00406 HighImpInt                              ; high pulse using interrupt
00AF   3E16           00407         addlw   PWMADJUSTVAL            ; calculate timer loading value
00B0   0081           00408         movwf   TMR0                    ; put value into timer
00B1                  00409 HighImpInt2
00B1   1407           00410         bsf     PORTC,PWMOUTBIT         ; generate rising edge
00B2   0AAE           00411         incf    counter,F               ; trigger counter, because there was a rising edge
00B3   301C           00412         movlw   PWMMAXVAL-1             ; "repair"...
00B4   00B1           00413         movwf   pwmmax                  ; ...support register
00B5   0008           00414         return                          ; return to main isr
                      00415 
                      00416 
00B6                  00417 Lowpulse
00B6   0932           00418         comf    pwmhelp,W               ; get required pulse length
00B7   07B1           00419         addwf   pwmmax,F                ; calc number of inst's to skip
00B8   1C03           00420         btfss   STATUS,C                ; which method is to use?
00B9   28DD           00421         goto    LowImpInt               ; ->using interrupt
00BA                  00422 LowImpShrt
00BA   0831           00423         movf    pwmmax,W                ; get number of inst's to skip
00BB   0782           00424         addwf   PCL,F                   ; skip n instructions
00BC   1007           00425         bcf     PORTC,PWMOUTBIT         ; falling edge, 27 cycles low pulse
00BD   1007           00426         bcf     PORTC,PWMOUTBIT         ; 26 cycles
00BE   1007           00427         bcf     PORTC,PWMOUTBIT         ; 25 cycles
00BF   1007           00428         bcf     PORTC,PWMOUTBIT         ; 24 cycles
00C0   1007           00429         bcf     PORTC,PWMOUTBIT         ; 23 cycles
00C1   1007           00430         bcf     PORTC,PWMOUTBIT         ; 22 cycles
00C2   1007           00431         bcf     PORTC,PWMOUTBIT         ; 21 cycles
00C3   1007           00432         bcf     PORTC,PWMOUTBIT         ; 20 cycles
00C4   1007           00433         bcf     PORTC,PWMOUTBIT         ; 19 cycles
00C5   1007           00434         bcf     PORTC,PWMOUTBIT         ; 18 cycles
00C6   1007           00435         bcf     PORTC,PWMOUTBIT         ; 17 cycles
00C7   1007           00436         bcf     PORTC,PWMOUTBIT         ; 16 cycles
00C8   1007           00437         bcf     PORTC,PWMOUTBIT         ; 15 cycles
00C9   1007           00438         bcf     PORTC,PWMOUTBIT         ; 14 cycles
00CA   1007           00439         bcf     PORTC,PWMOUTBIT         ; 13 cycles
00CB   1007           00440         bcf     PORTC,PWMOUTBIT         ; 12 cycles
00CC   1007           00441         bcf     PORTC,PWMOUTBIT         ; 11 cycles
00CD   1007           00442         bcf     PORTC,PWMOUTBIT         ; 10 cycles
00CE   1007           00443         bcf     PORTC,PWMOUTBIT         ; 9 cycles
00CF   1007           00444         bcf     PORTC,PWMOUTBIT         ; 8 cycles
00D0   1007           00445         bcf     PORTC,PWMOUTBIT         ; 7 cycles
00D1   1007           00446         bcf     PORTC,PWMOUTBIT         ; 6 cycles
00D2   1007           00447         bcf     PORTC,PWMOUTBIT         ; 5 cycles
00D3   1007           00448         bcf     PORTC,PWMOUTBIT         ; 4 cycles
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D4   1007           00449         bcf     PORTC,PWMOUTBIT         ; 3 cycles
00D5   1007           00450         bcf     PORTC,PWMOUTBIT         ; 2 cycles
00D6   1007           00451         bcf     PORTC,PWMOUTBIT         ; 1 cycles
00D7   1407           00452         bsf     PORTC,PWMOUTBIT         ; rising edge; start of the next
                      00453                                         ; high pulse using the interrupt
00D8   0930           00454         comf    pwmdesired,W            ; get desired PWM value
00D9   00B2           00455         movwf   pwmhelp                 ; store val for the next lo pulse
00DA   3E1B           00456         addlw   PWMADJUSTVAL+5          ; calculate timer loading value
                      00457                                         ; Edge was gen'd 5 cycles before
                      00458                                         ; usual point of time.
00DB   0081           00459         movwf   TMR0                    ; put value into timer
00DC   28B1           00460         goto    HighImpInt2             ; high pulse using int is running
00DD                  00461 LowImpInt                               ; low pulse using interrupt
00DD   3E16           00462         addlw   PWMADJUSTVAL            ; calculate timer loading value
00DE   0081           00463         movwf   TMR0                    ; put value into timer
00DF                  00464 LowImpInt2
00DF   1007           00465         bcf     PORTC,PWMOUTBIT         ; generate falling edge
00E0   301D           00466         movlw   PWMMAXVAL               ; "repair" ...
00E1   00B1           00467         movwf   pwmmax                  ; ... support register
00E2   0008           00468         return                          ; return to main isr
                      00469 
                      00470 
                      00471 
                      00472 
                      00473 ; this is really part of main loop, moved here so PWNINT can reside below 0x100
                      00474 
                      00475 ; enable top motor 20KHz, 10% duty cycle
00E3                  00476 at1sec
                      00477 
00E3   0191           00478         clrf    TMR2                    ; clear timer2
00E4   0192           00479         clrf    T2CON                   ; hardware pwm prescaler is one, timer 2 off
                      00480 ;       movlw   0x02                    ; hardware pwm prescaler is 16, timer 2 off
                      00481 ;       movwf   T2CON
00E5   1683           00482         bsf     STATUS,RP0              ; register page 1
00E6   30FF           00483         movlw   0xff                    ; period is 50 us if prescaler is 1, 82 us if prescaler is 16
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E7   0092           00484         movwf   PR2                     ;
00E8   1283           00485         bcf     STATUS,RP0              ; register page 0
                      00486 ;       movlw   0x7f
00E9   3019           00487         movlw   0x19
00EA   00A4           00488         movwf   t_top_pwm
00EB   00A6           00489         movwf   t_bot_pwm
00EC   00A5           00490         movwf   c_top_pwm
00ED   00A7           00491         movwf   c_bot_pwm
                      00492 ;       movlw   0x7f                    ; 50% duty cycle
00EE   3019           00493         movlw   0x19                    ; 10% duty cycle
00EF   0095           00494         movwf   CCPR1L                  ;
00F0   009B           00495         movwf   CCPR2L
00F1   1683           00496         bsf     STATUS,RP0              ; bank1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   1107           00497         bcf     TRISC,PWM1              ; make pin for pwm1 output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F3   1087           00498         bcf     TRISC,PWM2              ; make pin for pwm2 output
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   018C           00499         clrf    PIE1                    ; disable peripheral interrupts
00F5   1283           00500         bcf     STATUS,RP0              ; bank0
00F6   018C           00501         clrf    PIR1                    ; clear peripheral interrupts flags
00F7   300C           00502         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (top)
                      00503 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (top)
00F8   0097           00504         movwf   CCP1CON
                      00505 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0 (bottom)
                      00506 ;       movwf   CCP2CON
00F9   1512           00507         bsf     T2CON,TMR2ON            ; timer2 starts to increment
                      00508 
                      00509 ; fall through to atcom
                      00510 
00FA                  00511 at2sec
00FA                  00512 at3sec
                      00513 
00FA   290C           00514         goto    atcom
                      00515 
00FB                  00516 at4sec
                      00517 
                      00518 ;; Top motor duty cycle set to pot
                      00519 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00520 ; Bottom motor duty cycle set to pot
                      00521 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot
00FB   290C           00522         goto    atcom
                      00523 
00FC                  00524 at5sec
                      00525 
                      00526 ; Bottom motor 10% duty cycle
00FC   3019           00527         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on, now original 10% duty cycle 
                      00528                                                         ; got changed before we got here.
00FD   00A6           00529         movwf   t_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FE   00A7           00530         movwf   c_bot_pwm               ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
00FF   3019           00531         movlw   0x19                    ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
0100   009B           00532         movwf   CCPR2L                  ; 06/15/05 MJZ change for ramping up bottom serve motor at power
                            -on
                      00533 
0101   300C           00534         movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00535 ;       movlw   0x3c                    ; DEBUG PWM mode, 2LSBs of duty cycle = 11b (bottom)
0102   009D           00536         movwf   CCP2CON
                      00537 ;       movlw   0x0c                    ; PWM mode, 2LSBs of duty cycle = 0
                      00538 ;       movwf   CCP1CON
0103   290C           00539         goto    atcom
                      00540 
0104                  00541 at6sec
                      00542         
0104   290C           00543         goto    atcom
                      00544 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0105                  00545 at7sec
                      00546 
                      00547 ;; Top motor duty cycle set to pot, 06/15/05 MJZ change
0105   0AA8           00548         incf    top_inited,f            ; set flag to allow top PWM to adjust to pot, 06/15/05 MJZ chang
                            e
                      00549 
                      00550 ;; Bottom motor duty cycle set to pot,  ; 06/15/05 MJZ changes, set to pot sooner than original
0106   0AA9           00551         incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, see above line
                      00552 
0107   290C           00553         goto    atcom
                      00554 
                      00555 ; fall through to atcom
0108                  00556 at8sec
                      00557 ;; Bottom motor duty cycle set to pot
                      00558 ;       incf    bot_inited,f            ; set flag to allow bottom PWM to adjust to pot, 06/15/05 MJZ ch
                            ange, move to "at7sec"
                      00559 ; Top motor duty cycle set to pot
                      00560 ;       incf    top_inited,f            ; set flag to allow top PWM to adjust to pot
0108   290C           00561         goto    atcom
                      00562 
0109                  00563 at9sec
0109                  00564 at10sec
0109                  00565 at11sec
0109   290C           00566         goto    atcom
010A                  00567 at12sec
                      00568 ; sweep motor control
                      00569 ;       incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00570 ;       bcf     rbif_bits,0             ;  don't check for sweep motor error
                      00571 ;       incf    init_done,f             ; set initialization done flag
                      00572 
                      00573 ; fall through to atcom
010A                  00574 at13sec
                      00575 ;       movf    feed_a2d,w
                      00576 ;       sublw   0x3f                    ; if input < 1.25V (no borrow), power feed motor to pot
                      00577 ;       btfsc   STATUS,C                ; else force to 1.25V for 1 sec, then set to pot
                      00578 ;       goto    under_1_25
                      00579 ;       movlw   0x3f
                      00580 ;       movwf   feed_a2d
                      00581 ;under_1_25
                      00582 ;       call    init_feed_pwm
010A   290C           00583         goto    atcom
                      00584 
010B                  00585 at14sec
                      00586 ;       movf    feed_a2d,w
                      00587 ;       sublw   0x7f                    ; if input < 2.5V (no borrow), power feed motor to pot
                      00588 ;       btfsc   STATUS,C                ; else force to 2.5V for 1 sec, then set to pot
                      00589 ;       goto    under_2_5
                      00590 ;       movlw   0x7f
                      00591 ;       movwf   feed_a2d
                      00592 ;under_2_5
                      00593 ;       call    init_feed_pwm
010B   290C           00594         goto    atcom
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00595 
                      00596 
                      00597 
010C                  00598 atcom:
010C   2847           00599         goto    idle
                      00600 
010D                  00601 at15sec:
                      00602 ; if feed motor a2d input > 1.0V, enable feed motor to pot
010D   0AAA           00603         incf    feed_inited,f           ; enable feed motor if input > 1.0V
010E   0AB6           00604         incf    init_done,f             ; set initialization done flag
010F   2847           00605         goto    idle                    ; goto main idle loop
                      00606 
0110                  00607 sec0init:
                      00608         ; init usart
0110   1683           00609         bsf     STATUS,RP0              ; goto bank 1
                      00610 ;       movlw   0xff                    ; 1200 baud
0111   3081           00611         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0112   0099           00612         movwf   SPBRG
0113   3020           00613         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0114   0098           00614         movwf   TXSTA                   ; asynchronous mode, low speed mode
0115   1283           00615         bcf     STATUS,RP0              ; goto bank 0
0116   3090           00616         movlw   0x90                    ; 8-bit receive, receiver enabled
0117   0098           00617         movwf   RCSTA                   ; serial port enabled
                      00618 
0118   2519           00619         call    usart_off               ; turn off usart, disable beep
                      00620 
                      00621 ;       movlw   0x0f                    ; change to 0x0d - don't check feed motor
0119   300D           00622         movlw   0x0d
011A   00CC           00623         movwf   rbif_bits               ; check all motor errors
011B   0181           00624         clrf    TMR0
011C   01B3           00625         clrf    a2d_chan
011D   228A           00626         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
011E   00B8           00627         movwf   spin_a2d                ; save value
011F   3C8F           00628         sublw   0x8f                    ; if spin_a2d < 143
0120   308F           00629         movlw   0x8f
0121   1803           00630         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0122   00B8           00631         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0123   0838           00632         movf    spin_a2d,w              ; 
0124   3E06           00633         addlw   6       
0125   30FA           00634         movlw   0xfa                    ; if spin_a2d > 250
0126   1803           00635         btfsc   STATUS,C                ; 
0127   00B8           00636         movwf   spin_a2d                ;  spin_a2d = 250
                      00637 
0128   3001           00638         movlw   1
0129   00B3           00639         movwf   a2d_chan
012A   228A           00640         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
012B   00B9           00641         movwf   spd_a2d
012C   3C8F           00642         sublw   0x8f                    ; if speed_a2d < 143
012D   308F           00643         movlw   0x8f
012E   1803           00644         btfsc   STATUS,C                ;  skip if borrow - speed_a2d > 143
012F   00B9           00645         movwf   spd_a2d                 ;  if speed_a2d < 143, speed_a2d = 143
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0130   0839           00646         movf    spd_a2d,w               ; 
0131   3E06           00647         addlw   6       
0132   30FA           00648         movlw   0xfa                    ; if spd_a2d > 250
0133   1803           00649         btfsc   STATUS,C                ; 
0134   00B9           00650         movwf   spd_a2d                 ;  spd_a2d = 250
                      00651 
0135   3002           00652         movlw   2
0136   00B3           00653         movwf   a2d_chan
0137   228A           00654         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00655 ;       movlw   0xff                    ; SIM - force battery ok
0138   00BA           00656         movwf   bat_a2d         
0139   3003           00657         movlw   3
013A   00B3           00658         movwf   a2d_chan
013B   228A           00659         call    acq_a2d                 ; acquire chan3 a2d - feed rate
013C   00BB           00660         movwf   feed_a2d
013D   3C14           00661         sublw   0x14                    ; 20 - feed_a2d
013E   1C03           00662         btfss   STATUS,C                ;  skip if no borrow - feed_a2d < 20
013F   2945           00663         goto    feed_ok
0140   083B           00664         movf    feed_a2d,w
0141   3C0F           00665         sublw   0x0f                    ; 15 - feed_a2d
0142   3014           00666         movlw   0x14
0143   1C03           00667         btfss   STATUS,C                ;  skip if no borrow - feed _a2d < 11
0144   00BB           00668         movwf   feed_a2d                ;  if 15 < feed_a2d < 20, speed_a2d = 20
0145                  00669 feed_ok
                      00670 
0145   3004           00671         movlw   4
0146   00B3           00672         movwf   a2d_chan
0147   228A           00673         call    acq_a2d                 ; acquire chan4 a2d - sweep enable
0148   00BC           00674         movwf   sweep_a2d
                      00675         
                      00676 ;       btfsc   PORTB,0                 ;MJZ COMMENTED THIS LINE
                      00677 ;       goto    power_is_off            ; if RB0 is set, power switch is off    ;MJZ COMMENTED THIS LINE
0149   1A06           00678         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
014A   2BB6           00679         goto    power_is_off    ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
                      00680 
014B   083A           00681         movf    bat_a2d,w               ; get battery level
                      00682 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - bat_a2d)
014C   3C84           00683         sublw   0x84                    ; at power on, battery must be at least 2.6V to power up motors
014D   1803           00684         btfsc   STATUS,C                ;    skip if borrow (> 2.6V)    ;MJZ DEBUG, COMMENTED THIS LINE
                      00685 ;       btfss   STATUS,C                ;MJZ DEBUG, ADDED THIS LINE FOR SIMULATION TO GET PAST NO BATTER
                            Y INPUT
014E   2C54           00686         goto    bat_dead                ;  battery exhausted, shut down all motors
014F   1607           00687         bsf     PORTC,ELEV_EN           ; else enable elevation motor
0150   0186           00688         clrf    PORTB                   ; on 1st power up, getting motor error
0151   018B           00689         clrf    INTCON                  ;  so make sure conditions are cleared
0152   01CD           00690         clrf    sweep_is_on             ; clear sweep motor on flag
0153   01D5           00691         clrf    linesw_toggle   ;MJZ CLEAR 2-LINE SWITCH TOGGLE BYTE
0154   2475           00692         call    init_bat_level
                      00693 ; sweep motor control
0155   0AAB           00694         incf    sweep_inited,f          ; set flag to allow sweep motor control
                      00695 
0156   1623           00696         bsf     pwr_on_code,NOT_TO      ; ignore watchdog timeout reset
0157   0823           00697         movf    pwr_on_code,w           ; change bits to code : 0 = pwr on reset, 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00698                                         ;                       1= BOR, 2=wdt, 3=reset
0158   00A2           00699         movwf   temp
0159   01A3           00700         clrf    pwr_on_code
015A   1CA2           00701         btfss   temp,NOT_POR
015B   2966           00702         goto    pwr_on_reset
015C   0AA3           00703         incf    pwr_on_code,f
015D   1C22           00704         btfss   temp,NOT_BOR
015E   2962           00705         goto    npwr_on_reset
015F   0AA3           00706         incf    pwr_on_code,f
0160   1A22           00707         btfsc   temp,NOT_TO
0161   0AA3           00708         incf    pwr_on_code,f
0162                  00709 npwr_on_reset:                          ; not power on reset (and not watchdog timeout)
0162   3006           00710         movlw   6
0163   00C2           00711         movwf   flash_code
0164   2442           00712         call    flash_error
0165   2962           00713         goto    npwr_on_reset
                      00714 
0166                  00715 pwr_on_reset:
                      00716 
0166   01D0           00717         clrf    remote_toggle           ; feed and sweep toggle are both off
0167   16D0           00718         bsf     remote_toggle,REMOTE_BIT        ; remote switch is off
0168   01D1           00719         clrf    remote_block            ; blocking of remote xmitter is off
0169   01D2           00720         clrf    FF_count                ; no FF's to send
016A   01D4           00721         clrf    beep_count
                      00722         
016B   0008           00723         return
                      00724 
016C                  00725 tick0:
016C   01B3           00726         clrf    a2d_chan
016D   228A           00727         call    acq_a2d                 ; acquire chan0 a2d - BALL SPIN
016E   00B8           00728         movwf   spin_a2d                ; save value
016F   3C8F           00729         sublw   0x8f                    ; if spin_a2d < 143
0170   308F           00730         movlw   0x8f
0171   1803           00731         btfsc   STATUS,C                ;  skip if borrow - spin_a2d > 143
0172   00B8           00732         movwf   spin_a2d                ;  if spin_a2d < 143, spin_a2d = 143
0173   0838           00733         movf    spin_a2d,w              ; 
0174   3E06           00734         addlw   6       
0175   30FA           00735         movlw   0xfa                    ; if spin_a2d > 250
0176   1803           00736         btfsc   STATUS,C                ; 
0177   00B8           00737         movwf   spin_a2d                ;  spin_a2d = 250
0178   2847           00738         goto    idle
                      00739 
0179                  00740 tick1:
0179   3001           00741         movlw   1
017A   00B3           00742         movwf   a2d_chan
017B   228A           00743         call    acq_a2d                 ; acquire chan1 a2d - SPEED 
                      00744 ;       movlw   0xfa                    ; SIM - force speed max
017C   00B9           00745         movwf   spd_a2d
                      00746 ; 08/07/09 start
                      00747 ;       sublw   0x8f                    ; if spd_a2d < 143, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00748 ;       movlw   0x8f                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00749 ;       sublw   0x98                    ; if spd_a2d < 152, 06/20/05 MJZ change to increase minimum serv
                            e motor speed for pressureless balls
                      00750 ;       movlw   0x98                    ; 06/20/05 MJZ change to increase minimum serve motor speed for 
                            pressureless balls
017D   3C8F           00751         sublw   0x8f
017E   308F           00752         movlw   0x8f
                      00753 ; 08/07/09 end
017F   1803           00754         btfsc   STATUS,C                ;  skip if borrow - spd_a2d > 143
0180   00B9           00755         movwf   spd_a2d                 ;  if spd_a2d < 143, spd_a2d = 143
0181   0839           00756         movf    spd_a2d,w               ; 
                      00757 ; 08/07/09 start
0182   3E06           00758         addlw   6       
0183   30FA           00759         movlw   0xfa                    ; if spd_a2d > 250
0184   1803           00760         btfsc   STATUS,C                ; 
0185   00B9           00761         movwf   spd_a2d                 ;  spd_a2d = 250
                      00762 ;       addlw   0x20    
                      00763 ;       movlw   0xe0                    ; if spd_a2d > 224, approx 85% of original max of 250
                      00764 ;       btfsc   STATUS,C                ; 
                      00765 ;       movwf   spd_a2d                 ;  spd_a2d = 224
                      00766 ; 08/07/09 end
0186   2847           00767         goto    idle
                      00768 
0187                  00769 tick2:
0187   3002           00770         movlw   2
0188   00B3           00771         movwf   a2d_chan
0189   228A           00772         call    acq_a2d                 ; acquire chan2 a2d - battery
                      00773 ;       movlw   0xff                    ; SIM - force battery ok
018A   00BA           00774         movwf   bat_a2d         
                      00775 ;       sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
                      00776 ;       btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V )
                      00777 ;       goto    bat_dead                ;  battery exhausted, shut down all motors
                      00778         ; update battery led here if battery level changed
                      00779 
018B   2847           00780         goto    idle
                      00781 
018C                  00782 tick3:
018C   3003           00783         movlw   3
018D   00B3           00784         movwf   a2d_chan
018E   228A           00785         call    acq_a2d                 ; acquire chan3 a2d - feed rate
                      00786 ;       movlw   0xff                    ; SIM - force feed ok
018F   00BB           00787         movwf   feed_a2d
0190   3C14           00788         sublw   0x14                    ; 20 - feed_a2d
0191   1C03           00789         btfss   STATUS,C                ;  skip if no borrow - feed_a2d < 20
                      00790 ;       goto    feed_ok1                ;MJZ COMMENTED THIS LINE
0192   2999           00791         goto    chk_feed_rate_type      ;MJZ ADDED LINE, IF > 20, CHECK IF MUST RESTRICT MAXIMUM FEED RA
                            TE FOR 2-LINE MODE
0193   083B           00792         movf    feed_a2d,w
0194   3C0F           00793         sublw   0x0f                    ; 15 - feed_a2d
0195   3014           00794         movlw   0x14
0196   1C03           00795         btfss   STATUS,C                ;  skip if no borrow - feed _a2d < 11
0197   00BB           00796         movwf   feed_a2d                ;  if 17 < feed_a2d < 20, speed_a2d = 20
0198   29A1           00797         goto    feed_ok1                ;MJZ ADDED LINE
                      00798 ;feed_ok1                                       ;MJZ COMMENTED THIS LINE
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00799 ;       goto    idle                    ;MJZ COMMENTED THIS LINE
0199                  00800 chk_feed_rate_type:                             ;MJZ ADDED LINE
0199   1C57           00801         btfss   feed_rate_type,0        ;MJZ ADDED LINE, IF SET, MUST RESTRICT MAXIMUM FEED RATE FOR 2-L
                            INE MODE
019A   29A1           00802         goto    feed_ok1                        ;MJZ ADDED LINE
019B   083B           00803         movf    feed_a2d,w                      ;MJZ ADDED LINE
019C   3C57           00804         sublw   0x57                            ;MJZ ADDED LINE, MAXIMUM FEED RATE FOR 2-LINE MODE
019D   1803           00805         btfsc   STATUS,C                        ;MJZ ADDED LINE, SKIP IF BORROW, IF FEED RATE HIGHER THA
                            N 0X57 (first try was 0x40)
019E   29A1           00806         goto    feed_ok1                        ;MJZ ADDED LINE, OK IF FEED RATE ALREADY LESS THAN 0X57
019F   3057           00807         movlw   0x57                            ;MJZ ADDED LINE
01A0   00BB           00808         movwf   feed_a2d                        ;MJZ ADDED LINE, RESTRICT FEED RATE TO 0X57 (first try w
                            as 0x40) MAXIMUM FOR 2-LINE MODE
01A1                  00809 feed_ok1:                                               ;MJZ ADDED LINE
01A1   2847           00810         goto idle                                       ;MJZ ADDED LINE
                      00811 
01A2                  00812 tick4:
01A2   3004           00813         movlw   4
01A3   00B3           00814         movwf   a2d_chan
01A4   228A           00815         call    acq_a2d                 ; acquire chan4 a2d - sweep enable
01A5   00BC           00816         movwf   sweep_a2d
01A6   2268           00817         call    update_remote           ; check if remote enable switch had changed
01A7   2847           00818         goto    idle
                      00819 
01A8                  00820 tick5:
01A8   22A9           00821         call    calc_bot_pwm
01A9   2333           00822         call    calc_top_pwm
01AA   2847           00823         goto    idle
                      00824 
01AB                  00825 tick6:
01AB   21B2           00826         call    update_top_pwm
                      00827 ;       call    update_top_pwm
                      00828 ;       call    update_bot_pwm
01AC   21CD           00829         call    update_bot_pwm
01AD   2847           00830         goto    idle
                      00831 
01AE                  00832 tick7:
01AE   21E8           00833         call    update_feed_pwm
01AF   2251           00834         call    update_sweep
                      00835 ;       call    update_bat_led
01B0   24A7           00836         call    record_bat_level
01B1   2847           00837         goto    idle
                      00838 
                      00839 
01B2                  00840 update_top_pwm:
01B2   0B28           00841         decfsz  top_inited,w            ; if TOP MOTOR PWM inited,
                      00842 ;       goto    upd_exit                ; 06/09/05 MJZ commented this line, see next line
01B3   2594           00843         call    top_not_inited  ; 06/09/05 MJZ added this line, at power-on, ramp up top serve motor reg
                            ardless of speed pot
01B4   0825           00844         movf    c_top_pwm,w             ;  load current top pwm value into W
01B5   0224           00845         subwf   t_top_pwm,w             ;  W = (target - current)
01B6   1903           00846         btfsc   STATUS,Z                ;  if current top pwm value equal target top pwm value
01B7   29CC           00847         goto    upd_exit                ;   done
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B8   1C03           00848         btfss   STATUS,C                ;  if current top pwm value < than target ( borrow cleared)
01B9   29C2           00849         goto    dec_top                 ;       (goto dec_top if borrow set)
01BA   39F8           00850         andlw   0xf8                    ;  if delta < 8
01BB   1D03           00851         btfss   STATUS,Z
01BC   29BF           00852         goto    inc_top_by_8
01BD   0A25           00853         incf    c_top_pwm,w             ;   incr top pwm value and save to W
01BE   29CA           00854         goto    set_top
01BF                  00855 inc_top_by_8:                           ; else incr top pwm value by 8
                      00856 ;       movlw   8
                      00857 ;       btfss   init_done,0             ;      if init_done flag is set
01BF   3004           00858         movlw   4                       ;      else inc by 4
01C0   0725           00859         addwf   c_top_pwm,w
01C1   29CA           00860         goto    set_top
01C2                  00861 dec_top:
01C2   3C00           00862         sublw   0                       ; figure out delta to decrement
01C3   39F8           00863         andlw   0xf8                    ; if delta < 8
01C4   1D03           00864         btfss   STATUS,Z
01C5   29C8           00865         goto    dec_top_by_8
01C6   0325           00866         decf    c_top_pwm,w             ;  dec top pwm value and save to W
01C7   29CA           00867         goto    set_top
01C8                  00868 dec_top_by_8
                      00869 ;       movlw   8
                      00870 ;       btfss   init_done,0             ; if init_done flag is not set
01C8   3004           00871         movlw   4                       ;      dec by 4
01C9   0225           00872         subwf   c_top_pwm,w             ; else dec top pwm value by 8
01CA                  00873 set_top:
01CA   00A5           00874         movwf   c_top_pwm               ;  save current top pwm value
01CB   0095           00875         movwf   CCPR1L                  ;  write new duty cycle value to PWM module 1
01CC                  00876 upd_exit:
01CC   0008           00877         return
                      00878 
01CD                  00879 update_bot_pwm:                         ; check if bottom pwm duty cycle need updating
01CD   0B29           00880         decfsz  bot_inited,w            ; if BOTTOM MOTOR PWM inited,
                      00881 ;       goto    update_done             ; 06/15/05 MJZ change, see next line
01CE   2597           00882         call    bot_not_inited  ; 06/15/05 MJZ change for ramping up bottom serve motor at power-on
01CF   0827           00883         movf    c_bot_pwm,w             ;  load current bottom pwm value into W
01D0   0226           00884         subwf   t_bot_pwm,w             ;  W = target - current
01D1   1903           00885         btfsc   STATUS,Z                ;  if current bottom pwm value = target bottom pwm value
01D2   29E7           00886         goto    update_done             ;   goto exit
01D3   1C03           00887         btfss   STATUS,C                ;  if current bottom pwm value < target ( no borrow)
01D4   29DD           00888         goto    dec_bot                 ; 
01D5   39F8           00889         andlw   0xf8                    ;  if delta < 8
01D6   1D03           00890         btfss   STATUS,Z
01D7   29DA           00891         goto    inc_bot_by_8
01D8   0A27           00892         incf    c_bot_pwm,w             ;   incr bottom pwm value and save to W
01D9   29E5           00893         goto    set_bot
01DA                  00894 inc_bot_by_8:
                      00895 ;       movlw   8                       ; else inc bot pwm value by 8
                      00896 ;       btfss   init_done,0             ;      if init_done flag is set
01DA   3004           00897         movlw   4                       ;      else inc by 4
01DB   0727           00898         addwf   c_bot_pwm,w
01DC   29E5           00899         goto    set_bot
                      00900 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01DD                  00901 dec_bot:
01DD   3C00           00902         sublw   0                       ; figure out delta to decr
01DE   39F8           00903         andlw   0xf8                    ; if delta < 8
01DF   1D03           00904         btfss   STATUS,Z
01E0   29E3           00905         goto    dec_bot_by_8
01E1   0327           00906         decf    c_bot_pwm,w             ;  dec bottom pwm value and save to W
01E2   29E5           00907         goto    set_bot
01E3                  00908 dec_bot_by_8
                      00909 ;       movlw   8                       ; else dec bot pwm value by 8
                      00910 ;       btfss   init_done,0             ;      if init_done flag is set
01E3   3004           00911         movlw   4                       ;      else dec by 4
01E4   0227           00912         subwf   c_bot_pwm,w
01E5                  00913 set_bot:
01E5   00A7           00914         movwf   c_bot_pwm               ;  save current bottom pwm value
01E6   009B           00915         movwf   CCPR2L                  ;  write new duty cycle value to PWM module 2
01E7                  00916 update_done:
01E7   0008           00917         return
                      00918 
                      00919 ; if soft_pwm == 0
                      00920 ;   if input >= 1.0 volt, enable software pwm
                      00921 ;   if input < 1.0 volt, do nothing
                      00922 ; if soft_pwm == 1
                      00923 ;   if input < 1.0 volt, soft_pwm = 0 and disable software pwm
                      00924 ;   if input > 1.0, adjust pwmdesired
                      00925 ; check a2d of feed control
01E8                  00926 update_feed_pwm:
01E8   0B2A           00927         decfsz  feed_inited,w
01E9   2A37           00928         goto    chk_feed_xit
01EA   1AD0           00929         btfsc   remote_toggle,REMOTE_BIT ; if remote switch is on
01EB   29EE           00930         goto    no_remote_feed
01EC   1C50           00931         btfss   remote_toggle,FEED_BIT  ;    and feed toggle is off
01ED   29F2           00932         goto    feed_off                ;        disable feed
01EE                  00933 no_remote_feed:
01EE   083B           00934         movf    feed_a2d,w
01EF   3C13           00935         sublw   0x13                    ; if input < 0.4V (no borrow)
01F0   1C03           00936         btfss   STATUS,C
01F1   29FB           00937         goto    over1v
01F2                  00938 feed_off:
01F2   0B37           00939         decfsz  soft_pwm,w              ;  and soft_pwm was on
01F3   2A37           00940         goto    chk_feed_xit
                      00941         ; disable software pwm
01F4   138B           00942         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
01F5   01B7           00943         clrf    soft_pwm
01F6   01B0           00944         clrf    pwmdesired
01F7   1007           00945         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
01F8   11C3           00946         bcf     led_bits,FEED_LED
01F9   1186           00947         bcf     PORTB,FEED_LED          ;  turn feed led off
01FA   2A37           00948         goto    chk_feed_xit
01FB                  00949 over1v
01FB   0B37           00950         decfsz  soft_pwm,w              ; if soft_pwm was off
01FC   29FE           00951         goto    enable_feed
01FD   2A07           00952         goto    update_feed
01FE                  00953 enable_feed:
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00954         ; enable software pwm
01FE   1586           00955         bsf     PORTB,FEED_LED          ; turn feed led on
01FF   15C3           00956         bsf     led_bits,FEED_LED
0200   0181           00957         clrf    TMR0                    ; reset timer 0
0201   30A0           00958         movlw   INTCONVAL               ; enable timer0 intr
0202   008B           00959         movwf   INTCON
0203   0AB7           00960         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
0204   3043           00961         movlw   0x43                    ; got straight to 26% duty cycle
0205   00BF           00962         movwf   delta_s
0206   2A35           00963         goto    set_pwm_value
                      00964 
0207                  00965 update_feed:                            ; check if feed motor pwm duty cycle need updating
                      00966 
0207   3007           00967         movlw   0x07                    ; if feed_a2d > 248
0208   073B           00968         addwf   feed_a2d,W              ;
0209   1C03           00969         btfss   STATUS,C                ; and
020A   2A12           00970         goto    calc_feed
020B   3020           00971         movlw   0x20                    ;  if pwmdesired > 223
020C   0730           00972         addwf   pwmdesired,W            ;
020D   1C03           00973         btfss   STATUS,C                ;  
020E   2A12           00974         goto    calc_feed
020F   0F30           00975         incfsz  pwmdesired,w
0210   00B0           00976         movwf   pwmdesired
0211   2A37           00977         goto    chk_feed_xit            ;  if > 233, step up by one to 255
                      00978         
0212                  00979 calc_feed:
0212   3014           00980         movlw   0x14                    ; calc delta c
0213   023B           00981         subwf   feed_a2d,w
0214   00BE           00982         movwf   delta_c                 ; delta_c = feed_a2d - 20
0215   3E43           00983         addlw   0x43                    ;  W = 67 + delta_c
0216   00BF           00984         movwf   delta_s                 ;    save in delta_s
0217   1003           00985         bcf     STATUS,C
0218   0CBE           00986         rrf     delta_c,F               ;  ( div by 2 )
0219   1003           00987         bcf     STATUS,C
021A   0CBE           00988         rrf     delta_c,F               ;  ( div by 4 )
021B   083E           00989         movf    delta_c,W
021C   02BF           00990         subwf   delta_s,F               ;         - delta_c / 4
021D   1003           00991         bcf     STATUS,C
021E   0CBE           00992         rrf     delta_c,F               ;  ( div by 8 )
021F   1003           00993         bcf     STATUS,C
0220   0CBE           00994         rrf     delta_c,F               ;  ( div by 16 )
0221   083E           00995         movf    delta_c,W
0222   07BF           00996         addwf   delta_s,F               ;         + delta_c / 16
0223   1003           00997         bcf     STATUS,C
0224   0CBE           00998         rrf     delta_c,F               ;  ( div by 32 )
0225   1003           00999         bcf     STATUS,C
0226   0C3E           01000         rrf     delta_c,W               ;  ( div by 64 )
0227   023F           01001         subwf   delta_s,W               ;         - delta_c / 64
                      01002 
0228   00BF           01003         movwf   delta_s                 ; delta_s is now new feed pwm value
0229   0830           01004         movf    pwmdesired,w
022A   023F           01005         subwf   delta_s,w               ; W = new pwm value - pwmdesired
022B   1C03           01006         btfss   STATUS,C                ; skip if no borrow: new pwm value > pwmdesired
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

022C   2A35           01007         goto    set_pwm_value           ;    new pwm value is smaller, ok to ramp dowm immediately
022D   39FC           01008         andlw   0xfc                    ;
022E   1903           01009         btfsc   STATUS,Z                ; if delta < 4
022F   2A35           01010         goto    set_pwm_value           ;    set to new pwm value
0230   3003           01011         movlw   3                       ; else incr pwmdesired by 3
0231   1C36           01012         btfss   init_done,0             ;       if not init_done, incr by 2
0232   3002           01013         movlw   2
0233   07B0           01014         addwf   pwmdesired,f
0234   2A37           01015         goto    chk_feed_xit
                      01016         
0235                  01017 set_pwm_value
0235   083F           01018         movf    delta_s,w
0236   00B0           01019         movwf   pwmdesired              ; save current feed pwm value
0237                  01020 chk_feed_xit:
0237   0008           01021         return
                      01022 
                      01023 ; at 13 seconds, if pot > 25% duty cycle, init feed pwm to 25% duty cycle
                      01024 ; at 14 seconds, if pot > 50% duty cycle, init feed pwm to 50% duty cycle
0238                  01025 init_feed_pwm:                          ; this gets called before feed_inited is set
0238   083B           01026         movf    feed_a2d,w
0239   3C20           01027         sublw   0x20                    ; if input < 0.4V (no borrow)
023A   1C03           01028         btfss   STATUS,C
023B   2A45           01029         goto    over_pt4_v
023C   0B37           01030         decfsz  soft_pwm,w              ;  and soft_pwm was on
023D   2A50           01031         goto    init_feed_xit
                      01032         ; disable software pwm
023E   138B           01033         bcf     INTCON,GIE              ;  disable GLOBAL INTERRUPT ENABLE
023F   01B7           01034         clrf    soft_pwm
0240   01B0           01035         clrf    pwmdesired
0241   1007           01036         bcf     PORTC,PWMOUTBIT         ;  force feed motor off
0242   11C3           01037         bcf     led_bits,FEED_LED
0243   1186           01038         bcf     PORTB,FEED_LED          ;  turn feed led off
0244   2A50           01039         goto    init_feed_xit
0245                  01040 over_pt4_v
0245   0B37           01041         decfsz  soft_pwm,w              ; if soft_pwm was off
0246   2A48           01042         goto    init_enable_feed
0247   2A4E           01043         goto    init_update_feed
0248                  01044 init_enable_feed:
                      01045         ; enable software pwm
0248   1586           01046         bsf     PORTB,FEED_LED          ; turn feed led on
0249   15C3           01047         bsf     led_bits,FEED_LED
024A   0181           01048         clrf    TMR0                    ; reset timer 0
024B   30A0           01049         movlw   INTCONVAL               ; enable timer0 intr
024C   008B           01050         movwf   INTCON
024D   0AB7           01051         incf    soft_pwm,f              ; indicate feed pwm active by setting soft_pwm
024E                  01052 init_update_feed:                               ; check if feed motor pwm duty cycle need updating
024E   083B           01053         movf    feed_a2d,w              ; *** go straight to feed_a2d value
024F   00B0           01054         movwf   pwmdesired              ; save current feed pwm value
0250                  01055 init_feed_xit:
0250   0008           01056         return
                      01057 
                      01058 
                      01059 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0251                  01060 update_sweep:
                      01061 ; turn on/off sweep motor based on a2d
0251   0B2B           01062         decfsz  sweep_inited,w          ; if sweep not inited exit
0252   2A64           01063         goto    sweep_exit
0253   1ED0           01064         btfss   remote_toggle,REMOTE_BIT; if remote not enable,
0254   2A65           01065         goto    sweep_remote
0255   083C           01066         movf    sweep_a2d,w
                      01067 ;       sublw   0x33                    ;  if sweep switch < 1.0V (no borrow)
0256   3C99           01068         sublw   0x99                    ;MJZ ADDED LINE, CHANGED TO < 3.0V TO TURN SWEEP ON REGARDLESS O
                            F WHICH RESISTOR DIVIDER CIRCUIT ACTIVATED
0257   1C03           01069         btfss   STATUS,C
0258   2A60           01070         goto    sweep_off
0259                  01071 sweep_on
0259   184D           01072         btfsc   sweep_is_on,0           ;   if motor already enabled, exit
025A   2A64           01073         goto    sweep_exit
025B   2575           01074         call    linesw_toggle_init      ;MJZ ADDED LINE, IF SWEEP MOTOR WAS JUST ENABLED, INIT LINESW_TO
                            GGLE TO MATCH 2-LINE SWITCH VALUE
025C   1587           01075         bsf     PORTC,SWEEP_EN          ;    enable sweep motor
025D   104C           01076         bcf     rbif_bits,0             ;    don't check for sweep motor error for 1 second     
025E   0ACD           01077         incf    sweep_is_on,f
025F   2A64           01078         goto    sweep_exit1
0260                  01079 sweep_off
0260   1C4D           01080         btfss   sweep_is_on,0
0261   2A64           01081         goto    sweep_exit
0262   1187           01082         bcf     PORTC,SWEEP_EN          ; else disable sweep motor
0263   01CD           01083         clrf    sweep_is_on
0264                  01084 sweep_exit1:
                      01085 ;       btfss   remote_toggle,REMOTE_BIT; if remote not enable,
                      01086 ;       goto    sweep_exit
                      01087 ;       movf    pwr_on_code,W           ;       if timeout or brown out
                      01088 ;       btfsc   STATUS,Z
                      01089 ;       goto    sweep_exit
                      01090 ;       movwf   flash_code              ;               flash the reset type code 2 time
                      01091 ;       call    flash_error
                      01092 ;       movf    pwr_on_code,W
                      01093 ;       movwf   flash_code
                      01094 ;       call    flash_error
                      01095 ;       bcf     led_bits,GREEN_LED
0264                  01096 sweep_exit:
0264   0008           01097         return
                      01098 
0265                  01099 sweep_remote:                           ; remote switch on
0265   1CD0           01100         btfss   remote_toggle,SWEEP_BIT ;  set SWEEP output based on SWEEP_BIT
0266   2A60           01101         goto    sweep_off
0267   2A59           01102         goto    sweep_on
                      01103 
                      01104 ; check if remote enable switch had changed
0268                  01105 update_remote:
0268   0B36           01106         decfsz  init_done,W             ; if init not done, don't bother
0269   2A86           01107         goto    update_rmxit
026A   0850           01108         movf    remote_toggle,W         ; pick up remote_toggle byte
026B   3920           01109         andlw   REMOTE_ON
026C   0607           01110         xorwf   PORTC,W                 ; exclusive or with PORTC
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

026D   3920           01111         andlw   REMOTE_ON               ; did REMOTE_ON change value
026E   1903           01112         btfsc   STATUS,Z                ; if no change, exit
026F   2A86           01113         goto    update_rmxit
                      01114 ;       movlw   0x20
                      01115 ;       movwf   remote_block            ; flush usart
0270   3020           01116         movlw   REMOTE_ON
0271   06D0           01117         xorwf   remote_toggle,F
0272   1AD0           01118         btfsc   remote_toggle,REMOTE_BIT ; if remote switch just turned on,
0273   2A87           01119         goto    remote_off
                      01120 
                      01121 ;       call    usart_enable
0274   1683           01122         bsf     STATUS,RP0              ; goto bank 1
0275   3081           01123         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0276   0099           01124         movwf   SPBRG
0277   3020           01125         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0278   0098           01126         movwf   TXSTA                   ; asynchronous mode, low speed mode
0279   1283           01127         bcf     STATUS,RP0              ; goto bank 0
027A   3090           01128         movlw   0x90                    ; 8-bit receive, receiver enabled
027B   0098           01129         movwf   RCSTA                   ; serial port enabled
027C   081A           01130         movf    RCREG,W                 ; flush input data
027D   081A           01131         movf    RCREG,W                 ; flush input data
                      01132 
                      01133 ;       movlw   REMOTE_ON
                      01134 ;       iorlw   FEED_TOGGLE
                      01135 ;       movwf   remote_toggle           ; then set remote and feed toggles
027E   1450           01136         bsf     remote_toggle,FEED_BIT  ;   set feed toggle
027F   184D           01137         btfsc   sweep_is_on,0           ;      if sweep is on
0280   14D0           01138         bsf     remote_toggle,SWEEP_BIT ;         set sweep bit
0281   084D           01139         movf    sweep_is_on,W           ; copy sweep_is_on flag to last_sweep
0282   00D3           01140         movwf   last_sweep
0283   304B           01141         movlw   BLOCK_CNT-8             ; short beep
0284   00D1           01142         movwf   remote_block
0285   2513           01143         call    usart_disable
0286                  01144 update_rmxit:
0286   0008           01145         return
0287                  01146 remote_off:
                      01147 ;       call    usart_off
0287   10D0           01148         bcf     remote_toggle,SWEEP_BIT ; turn off sweep_toggle
0288   2D19           01149         goto    usart_off
0289   0008           01150         return
                      01151 ;
                      01152 ; acquire reading on analog channel
                      01153 ; enters: (a2d_chan) = chanel number
                      01154 ; exits: W = result
028A                  01155 acq_a2d
028A   0EB3           01156         swapf   a2d_chan,F              ; move channel number
028B   1003           01157         bcf     STATUS,C                ;  clear carry bit before rotate
028C   0C33           01158         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
028D   3881           01159         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
028E   009F           01160         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
                      01161                                         ;;acquisition delay - incr channel number for next op
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

028F   0EB3           01162         swapf   a2d_chan,F              ; restore channel number
0290   0AB3           01163         incf    a2d_chan,F              ; incr channel number
0291   3005           01164         movlw   5                       ; mod 5 - only channels 0-4 valid
0292   0233           01165         subwf   a2d_chan,W
0293   1903           01166         btfsc   STATUS,Z
0294   00B3           01167         movwf   a2d_chan                ;      wrap to 0 if next chan is 5
                      01168 
0295   3018           01169         movlw   0x18                    ; need 19.6us acquisition time
0296   00C8           01170         movwf   delay
0297                  01171 delaylp:
0297   0BC8           01172         decfsz  delay,f
0298   2A97           01173         goto    delaylp
0299                  01174 WaitNoInt
0299   0801           01175         movf    TMR0,W                  ; waiting till enough time
029A   3CD0           01176         sublw   0d0h                    ; for one conversion before start
029B   1C03           01177         btfss   STATUS,C                ; of the next timer interrupt
029C   2A99           01178         goto    WaitNoInt               ; (Conv can be disturbed by an intr)
029D   151F           01179         bsf     ADCON0,GO               ; start ADC
029E                  01180 WaitAdc
029E   191F           01181         btfsc   ADCON0,GO               ; waiting until ACDC...
029F   2A9E           01182         goto    WaitAdc                 ; ... is ready
                      01183 ; result is waiting in ADRES, but first select next channel and start acquisition
02A0   0EB3           01184         swapf   a2d_chan,F              ; restore channel number
02A1   1003           01185         bcf     STATUS,C                ;  clear carry bit before rotate
02A2   0C33           01186         rrf     a2d_chan,W              ;  bits 5-3 in Wreg
02A3   3881           01187         iorlw   ADCON0VAL               ; or in FOSC/32, ADON
02A4   009F           01188         movwf   ADCON0                  ;  set ADC configuration and selecting analog chan
02A5   0EB3           01189         swapf   a2d_chan,F              ; restore channel number
                      01190 
02A6   081E           01191         movf    ADRES,W                 ; put result into W-reg
02A7   0064           01192         clrwdt                          ; clear watch dog timer
02A8   0008           01193         return
                      01194 
                      01195 ; calculate desired bottom pwm
02A9                  01196 calc_bot_pwm
                      01197 ; first calculate speed based on no spin
                      01198 ; 08/07/09 start
                      01199 ;       movlw   0x8f
02A9   308F           01200         movlw   0x8f                    ; minimum speed pot read allowed
                      01201 ; 08/07/09 end
02AA   0239           01202         subwf   spd_a2d,w
02AB   00BF           01203         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01204 ; 08/07/09 start
                      01205 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01206 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
02AC   3E4A           01207         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 72/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01208 ; 08/07/09 end
02AD   00BD           01209         movwf   calc_pwm
02AE   1003           01210         bcf     STATUS,C
02AF   0CBF           01211         rrf     delta_s,F               ; (div by 2)
                      01212 ; 08/07/09 start
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01213 ;       movf    delta_s,w
                      01214 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01215 ; 08/07/09 end
02B0   1003           01216         bcf     STATUS,C
02B1   0CBF           01217         rrf     delta_s,f               ; (div by 4)
02B2   083F           01218         movf    delta_s,w
02B3   07BD           01219         addwf   calc_pwm,F              ;               + delta_s / 4
02B4   1003           01220         bcf     STATUS,C
02B5   0CBF           01221         rrf     delta_s,F               ; (div by 8)
                      01222 ; 08/07/09 start
02B6   083F           01223         movf    delta_s,w
02B7   07BD           01224         addwf   calc_pwm,F              ;               + delta_s / 8
                      01225 ; 08/07/09 end
02B8   1003           01226         bcf     STATUS,C
02B9   0CBF           01227         rrf     delta_s,F               ; (div by 16)
                      01228 ; 08/07/09 start
02BA   02BD           01229         subwf   calc_pwm,f              ;               - delta_s / 16
                      01230 ; 08/07/09 end
                      01231 ;       bcf     STATUS,C
                      01232 ;       rrf     delta_s,W               ; (div by 32)
                      01233 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01234 ; 08/07/09 end
                      01235 ; now adjust based on spin
02BB   0838           01236         movf    spin_a2d,w
02BC   3CBA           01237         sublw   0xba                    ; 186 - spin_a2d
02BD   1903           01238         btfsc   STATUS,Z                ; if 186 <= spin_a2d <= 191, then no spin
02BE   2B2B           01239         goto    no_spin1
02BF   1803           01240         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
02C0   2AC5           01241         goto    adjust_backspin1
02C1   3E05           01242         addlw   5                       ;
02C2   1803           01243         btfsc   STATUS,C                ; if spin_a2d is 187,188,189,190 or 191, then no spin
02C3   2B2B           01244         goto    no_spin1
02C4   2B03           01245         goto    adjust_topspin1
02C5                  01246 adjust_backspin1:                       ; if spin_a2d < 186 then we have back spin
02C5   30C5           01247         movlw   0xc5
02C6   0239           01248         subwf   spd_a2d,W               ; speed_a2d - 197
02C7   1803           01249         btfsc   STATUS,C                ; skip if borrow (slow speed)
02C8   2AE1           01250         goto    high_spd1
02C9   308F           01251         movlw   0x8f                    ; slow speed
02CA   0239           01252         subwf   spd_a2d,w
02CB   00BF           01253         movwf   delta_s                 ; delta_s = speed_a2d - 143
02CC   00C9           01254         movwf   mult1                   ; mult1 =       delta_s
02CD   1003           01255         bcf     STATUS,C
02CE   0CBF           01256         rrf     delta_s,f               ; (div by 2)
02CF   1003           01257         bcf     STATUS,C
02D0   0CBF           01258         rrf     delta_s,f               ; (div by 4)
02D1   083F           01259         movf    delta_s,w
02D2   07C9           01260         addwf   mult1,f                 ;               + delta_s / 4
02D3   1003           01261         bcf     STATUS,C
02D4   0CBF           01262         rrf     delta_s,f               ; (div by 8)
02D5   1003           01263         bcf     STATUS,C
02D6   0CBF           01264         rrf     delta_s,f               ; (div by 16)
02D7   083F           01265         movf    delta_s,w
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D8   02C9           01266         subwf   mult1,f                 ;               - delta_s / 16
02D9   1003           01267         bcf     STATUS,C
02DA   0C3F           01268         rrf     delta_s,w               ; (div by 32)
02DB   07C9           01269         addwf   mult1,f                 ;               + delta_s / 32
02DC   300B           01270         movlw   0x0b
02DD   00CA           01271         movwf   mult2
02DE   24DD           01272         call    mult_sub                ; W = 11 * mult1 / 64
02DF   00C9           01273         movwf   mult1                   ; mult1 is maxspin for this speed
02E0   2AF9           01274         goto    adjust_bs1
02E1                  01275 high_spd1:
02E1   30C5           01276         movlw   0xc5
02E2   0239           01277         subwf   spd_a2d,W               ; speed_a2d - 197
02E3   00BF           01278         movwf   delta_s                 ; delta_s = speed_a2d - 197
02E4   00C9           01279         movwf   mult1
02E5   1003           01280         bcf     STATUS,C
02E6   0CBF           01281         rrf     delta_s,f               ; (div by 2)
02E7   1003           01282         bcf     STATUS,C
02E8   0CBF           01283         rrf     delta_s,f               ; (div by 4)
02E9   083F           01284         movf    delta_s,w
02EA   07C9           01285         addwf   mult1,f                 ;               + delta_s / 4
02EB   1003           01286         bcf     STATUS,C
02EC   0CBF           01287         rrf     delta_s,f               ; (div by 8)
02ED   1003           01288         bcf     STATUS,C
02EE   0CBF           01289         rrf     delta_s,f               ; (div by 16)
02EF   083F           01290         movf    delta_s,w
02F0   02C9           01291         subwf   mult1,f                 ;               - delta_s / 16
02F1   1003           01292         bcf     STATUS,C
02F2   0C3F           01293         rrf     delta_s,w               ; (div by 32)
02F3   07C9           01294         addwf   mult1,f                 ;               + delta_s / 32
02F4   300B           01295         movlw   0x0b
02F5   00CA           01296         movwf   mult2
02F6   24DD           01297         call    mult_sub                ; W = 11 * mult1 / 64
02F7   3C0B           01298         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
02F8   00C9           01299         movwf   mult1                   ; mul1 is maxspin for this speed
02F9                  01300 adjust_bs1:
02F9   0838           01301         movf    spin_a2d,w
02FA   3CBA           01302         sublw   0xba                    ; 186 - spin_a2d
02FB   00BF           01303         movwf   delta_s                 ; amount of back spin desired (delta back_spin)
02FC   00CA           01304         movwf   mult2                   ; max delta spin = delta_s
02FD   1003           01305         bcf     STATUS,C
02FE   0C3F           01306         rrf     delta_s,w               ; (div by 2)
02FF   07CA           01307         addwf   mult2,f                 ;               + delta_s / 2
0300   24DD           01308         call    mult_sub                ; W = maxspin * (delta back_spin) / 64
0301   07BD           01309         addwf   calc_pwm,f              ; calc_pwm = calc_pwm + maxspin * (delta back_spin) / 64
0302   2B2B           01310         goto    no_spin1
                      01311 
0303                  01312 adjust_topspin1:
0303   30BF           01313         movlw   0xbf                    ; mult1 = spin_a2d - 191
0304   0238           01314         subwf   spin_a2d,w
0305   00C9           01315         movwf   mult1                   ; max top spin = delta_spin
0306   00BF           01316         movwf   delta_s
0307   1003           01317         bcf     STATUS,C
0308   0CBF           01318         rrf     delta_s,f               ; (div by 2)
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0309   1003           01319         bcf     STATUS,C
030A   0CBF           01320         rrf     delta_s,f               ; (div by 4)
030B   1003           01321         bcf     STATUS,C
030C   0CBF           01322         rrf     delta_s,f               ; (div by 8)
030D   083F           01323         movf    delta_s,w
030E   07C9           01324         addwf   mult1,f                 ;               + delta_spin / 8 
030F   1003           01325         bcf     STATUS,C
0310   0CBF           01326         rrf     delta_s,f               ; (div by 16)
0311   083F           01327         movf    delta_s,w
0312   02C9           01328         subwf   mult1,f                 ;               - delta_spin / 16
0313   1003           01329         bcf     STATUS,C
0314   0C3F           01330         rrf     delta_s,w               ; (div by 32)
0315   07C9           01331         addwf   mult1,f                 ;               + delta_spin / 32
                      01332 
0316   30C5           01333         movlw   0xc5
0317   0239           01334         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
0318   1C03           01335         btfss   STATUS,C                ; skip if no borrow (fast speed)
0319   2B26           01336         goto    slow_spd
                      01337                                         ; fast speed:
031A   00BF           01338         movwf   delta_s                 ; maxspin = delta_speed / 2
031B   1003           01339         bcf     STATUS,C
031C   0CBF           01340         rrf     delta_s,f               ; (div by 2)
031D   083F           01341         movf    delta_s,w
031E   00CA           01342         movwf   mult2
031F   1003           01343         bcf     STATUS,C
0320   0CBF           01344         rrf     delta_s,F               ; (div by 4)
0321   1003           01345         bcf     STATUS,C
0322   0C3F           01346         rrf     delta_s,W               ; (div by 8)
0323   024A           01347         subwf   mult2,W                 ;           - delta_speed / 8
0324   3E29           01348         addlw   0x29                    ;           + 41
0325   2B27           01349         goto    ts_com1
                      01350 
0326                  01351 slow_spd
0326   3029           01352         movlw   0x29                    ; slow speed: maxspin = 41
0327                  01353 ts_com1
0327   023D           01354         subwf   calc_pwm,w
0328   00CA           01355         movwf   mult2                   ; mult2 = calc_pwm - maxspin
0329   24DD           01356         call    mult_sub                ; W = (max top spin) * (calc_pwm - maxspin) / 64
032A   02BD           01357         subwf   calc_pwm,f              ; calc_pwm = calc_pwm - (196 - spin_a2d) * (calc_pwm - maxspin) 
                            / 64
032B                  01358 no_spin1
                      01359 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01360 ;       sublw   0xf3                    ; DEBUG
                      01361 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01362 ;       goto    force255                ; DEBUG
032B   083D           01363         movf    calc_pwm,w
032C   00A6           01364         movwf   t_bot_pwm
032D   3C1F           01365         sublw   0x1f                    ; 41 - t_bot_pwm
032E   1C03           01366         btfss   STATUS,C                ; skip if no borrow
032F   0008           01367         return
0330   301F           01368         movlw   0x1f
0331   00A6           01369         movwf   t_bot_pwm
0332   0008           01370         return                          ;  make at least 41
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01371 ;force255                               ; DEBUG
                      01372 ;       movlw   0xff                    ; DEBUG
                      01373 ;       movwf   t_bot_pwm               ; DEBUG
                      01374 ;       return                          ; DEBUG
                      01375 
                      01376 ; calculate desired top pwm
0333                  01377 calc_top_pwm
                      01378 ; first calculate speed based on no spin
                      01379 ; 08/07/09 start
                      01380 ;       movlw   0x8f
0333   308F           01381         movlw   0x8f                    ; minimum speed pot read allowed
                      01382 ; 08/07/09 end
0334   0239           01383         subwf   spd_a2d,w
0335   00BF           01384         movwf   delta_s                 ; delta_s = speed_a2d - 143
                      01385 ; 08/07/09 start
                      01386 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s
                      01387 ;       addlw   0x3d                    ; calc_pwm = 61 + delta_s, 61/255 = 24% duty cycle minimum pwm/s
                            peed?
0336   3E4A           01388         addlw   0x4a                    ; calc_pwm = 61 + delta_s, 74/255 = 29% duty cycle minimum pwm/s
                            peed?
                      01389 ; 08/07/09 end
0337   00BD           01390         movwf   calc_pwm
0338   1003           01391         bcf     STATUS,C
0339   0CBF           01392         rrf     delta_s,F               ; (div by 2)
                      01393 ; 08/07/09 start
                      01394 ;       movf    delta_s,w
                      01395 ;       addwf   calc_pwm,F              ;               + delta_s / 2
                      01396 ; 08/07/09 end
033A   1003           01397         bcf     STATUS,C
033B   0CBF           01398         rrf     delta_s,f               ; (div by 4)
033C   083F           01399         movf    delta_s,w
033D   07BD           01400         addwf   calc_pwm,F              ;               + delta_s / 4
033E   1003           01401         bcf     STATUS,C
033F   0CBF           01402         rrf     delta_s,F               ; (div by 8)
                      01403 ; 08/07/09 start
0340   083F           01404         movf    delta_s,w
0341   07BD           01405         addwf   calc_pwm,F              ;               + delta_s / 8
                      01406 ; 08/07/09 end
0342   1003           01407         bcf     STATUS,C
0343   0CBF           01408         rrf     delta_s,F               ; (div by 16)
                      01409 ; 08/07/09 start
0344   02BD           01410         subwf   calc_pwm,f              ;               - delta_s / 16
                      01411 ; 08/07/09 end
                      01412 ;       bcf     STATUS,C
                      01413 ;       rrf     delta_s,W               ; (div by 32)
                      01414 ;       subwf   calc_pwm,f              ;               - delta_s / 32
                      01415 ; 08/07/09 end
                      01416 ; now adjust based on spin
0345   0838           01417         movf    spin_a2d,w
0346   3CBA           01418         sublw   0xba                    ; 186 - spin_a2d
0347   1903           01419         btfsc   STATUS,Z                ; if spin_a2d is 186, then no spin
0348   2BB3           01420         goto    no_spin
0349   1803           01421         btfsc   STATUS,C                ; if spin_a2d < 186, then we have back spin (skip if borrow)
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

034A   2B98           01422         goto    adjust_backspin
034B   3E05           01423         addlw   5                       ;
034C   1803           01424         btfsc   STATUS,C                ; if spin_a2d is 187-191, then no spin
034D   2BB3           01425         goto    no_spin
034E                  01426 adjust_topspin:                         ; if spin_a2d > 197 then we have top spin
034E   30C5           01427         movlw   0xc5
034F   0239           01428         subwf   spd_a2d,W               ; speed_a2d - 197
0350   1803           01429         btfsc   STATUS,C                ; skip if borrow (slow speed)
0351   2B6A           01430         goto    high_spd
0352   308F           01431         movlw   0x8f                    ; slow speed
0353   0239           01432         subwf   spd_a2d,w
0354   00BF           01433         movwf   delta_s                 ; delta_s = speed_a2d - 143
0355   00C9           01434         movwf   mult1                   ; mult1 =       delta_s
0356   1003           01435         bcf     STATUS,C
0357   0CBF           01436         rrf     delta_s,f               ; (div by 2)
0358   1003           01437         bcf     STATUS,C
0359   0CBF           01438         rrf     delta_s,f               ; (div by 4)
035A   083F           01439         movf    delta_s,w
035B   07C9           01440         addwf   mult1,f                 ;               + delta_s / 4
035C   1003           01441         bcf     STATUS,C
035D   0CBF           01442         rrf     delta_s,f               ; (div by 8)
035E   1003           01443         bcf     STATUS,C
035F   0CBF           01444         rrf     delta_s,f               ; (div by 16)
0360   083F           01445         movf    delta_s,w
0361   02C9           01446         subwf   mult1,f                 ;               - delta_s / 16
0362   1003           01447         bcf     STATUS,C
0363   0C3F           01448         rrf     delta_s,w               ; (div by 32)
0364   07C9           01449         addwf   mult1,f                 ;               + delta_s / 32
0365   300B           01450         movlw   0x0b
0366   00CA           01451         movwf   mult2
0367   24DD           01452         call    mult_sub                ; W = 11 * mult1 / 64
0368   00C9           01453         movwf   mult1                   ; mult1 is maxspin for this speed
0369   2B82           01454         goto    adjust_ts
036A                  01455 high_spd:
036A   30C5           01456         movlw   0xc5
036B   0239           01457         subwf   spd_a2d,W               ; speed_a2d - 197
036C   00BF           01458         movwf   delta_s                 ; delta_s = speed_a2d - 197
036D   00C9           01459         movwf   mult1
036E   1003           01460         bcf     STATUS,C
036F   0CBF           01461         rrf     delta_s,f               ; (div by 2)
0370   1003           01462         bcf     STATUS,C
0371   0CBF           01463         rrf     delta_s,f               ; (div by 4)
0372   083F           01464         movf    delta_s,w
0373   07C9           01465         addwf   mult1,f                 ;               + delta_s / 4
0374   1003           01466         bcf     STATUS,C
0375   0CBF           01467         rrf     delta_s,f               ; (div by 8)
0376   1003           01468         bcf     STATUS,C
0377   0CBF           01469         rrf     delta_s,f               ; (div by 16)
0378   083F           01470         movf    delta_s,w
0379   02C9           01471         subwf   mult1,f                 ;               - delta_s / 16
037A   1003           01472         bcf     STATUS,C
037B   0C3F           01473         rrf     delta_s,w               ; (div by 32)
037C   07C9           01474         addwf   mult1,f                 ;               + delta_s / 32
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

037D   300B           01475         movlw   0x0b
037E   00CA           01476         movwf   mult2
037F   24DD           01477         call    mult_sub                ; W = 11 * mult1 / 64
0380   3C0B           01478         sublw   0x0b                    ; W = 11 - 11 * mult1 / 64
0381   00C9           01479         movwf   mult1                   ; mul1 is maxspin for this speed
0382                  01480 adjust_ts:
0382   30BF           01481         movlw   0xbf                    ; spin_a2d - 191
0383   0238           01482         subwf   spin_a2d,w
0384   00BF           01483         movwf   delta_s                 ; amount of top spin desired (delta top_spin)
0385   00CA           01484         movwf   mult2                   ; max delta spin = delts_s
0386   1003           01485         bcf     STATUS,C
0387   0CBF           01486         rrf     delta_s,f               ; (div by 2)
0388   1003           01487         bcf     STATUS,C
0389   0CBF           01488         rrf     delta_s,f               ; (div by 4)
038A   1003           01489         bcf     STATUS,C
038B   0CBF           01490         rrf     delta_s,f               ; (div by 8)
038C   083F           01491         movf    delta_s,w
038D   07CA           01492         addwf   mult2,f                 ;               + delta_s / 8
038E   1003           01493         bcf     STATUS,C
038F   0CBF           01494         rrf     delta_s,f               ; (div by 16)
0390   083F           01495         movf    delta_s,w
0391   02CA           01496         subwf   mult2,f                 ;               - delta_s / 16
0392   1003           01497         bcf     STATUS,C
0393   0C3F           01498         rrf     delta_s,w               ; (div by 32)
0394   07CA           01499         addwf   mult2,f                 ;               + delta_s / 32
0395   24DD           01500         call    mult_sub                ; W = maxspin * (delta top_spin) / 64
0396   07BD           01501         addwf   calc_pwm,f
0397   2BB3           01502         goto    no_spin
                      01503 
0398                  01504 adjust_backspin:
0398   0838           01505         movf    spin_a2d,w
0399   3CBA           01506         sublw   0xba                    ; mult1 = 186 - spin_a2d
039A   00C9           01507         movwf   mult1
039B   1003           01508         bcf     STATUS,C                ; max backspin = (186 - spin_a2d) * 3 / 2
039C   0C49           01509         rrf     mult1,w
039D   07C9           01510         addwf   mult1,f
                      01511 
039E   30C5           01512         movlw   0xc5
039F   0239           01513         subwf   spd_a2d,W               ; delta speed = speed_a2d - 197
03A0   1C03           01514         btfss   STATUS,C                ; skip if no borrow (fast speed)
03A1   2BAE           01515         goto    slow_spd1
                      01516                                         ; fast speed:
03A2   00BF           01517         movwf   delta_s                 ; maxspin =
03A3   1003           01518         bcf     STATUS,C
03A4   0CBF           01519         rrf     delta_s,f               ; (div by 2)
03A5   083F           01520         movf    delta_s,w               ;           delta_speed / 2
03A6   00CA           01521         movwf   mult2
03A7   1003           01522         bcf     STATUS,C
03A8   0CBF           01523         rrf     delta_s,f               ; (div by 4)
03A9   1003           01524         bcf     STATUS,C                
03AA   0C3F           01525         rrf     delta_s,w               ; (div by 8)
03AB   024A           01526         subwf   mult2,w                 ;           - delta_speed / 8
03AC   3E29           01527         addlw   0x29                    ;           + 41
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AD   2BAF           01528         goto    bs_com
                      01529 
03AE                  01530 slow_spd1
03AE   3029           01531         movlw   0x29
03AF                  01532 bs_com
03AF   023D           01533         subwf   calc_pwm,w
03B0   00CA           01534         movwf   mult2                   ; mult2 = calc_pwm - maxspin
03B1   24DD           01535         call    mult_sub                ; W = (max back spin) * (calc_pwm - maxspin) / 64
03B2   02BD           01536         subwf   calc_pwm,f              ; calc_pwm -= W
03B3                  01537 no_spin
                      01538 ;       movf    calc_pwm,w              ; DEBUG - force 100% PWM if 96%
                      01539 ;       sublw   0xf3                    ; DEBUG
                      01540 ;       btfss   STATUS,C                ; DEBUG if 96%, goto force 100%
                      01541 ;       goto    force255_1              ; DEBUG
03B3   083D           01542         movf    calc_pwm,w
03B4   00A4           01543         movwf   t_top_pwm
03B5   0008           01544         return
                      01545 ;force255_1                             ; DEBUG
                      01546 ;       movwf   0xff                    ; DEBUG
                      01547 ;       movwf   t_top_pwm               ; DEBUG
                      01548 ;       return                          ; DEBUG
                      01549 
03B6                  01550 power_is_off:
                      01551 ; here at power on if detected the power switch is off
                      01552 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01553 ;       clrwdt                          ;  let wdt reset processor
                      01554 
03B6   0186           01555         clrf    PORTB                   ; turn off all LED
03B7   083A           01556         movf    bat_a2d,w               ; get battery level
03B8   3C99           01557         sublw   99h                     ; battery input at least 3.0V? (battery at least 13.2V)
03B9   1803           01558         btfsc   STATUS,C                ;    skip if no borrow (> 3.0V)
03BA   2BD8           01559         goto    charg_lt_3_0            ; charging, below 3.0V
03BB   1903           01560         btfsc   STATUS,Z
03BC   2BD8           01561         goto    charg_lt_3_0
03BD   083A           01562         movf    bat_a2d,w
                      01563 ;       sublw   0a3h                    ; battery input at least 3.2V? (battery at least 14.1V), MJZ COM
                            MENTED THIS LINE
03BE   3C9F           01564         sublw   09fh                    ;MJZ ADDED THIS LINE, battery input at least 3.1V? (battery at l
                            east 13.7V)
03BF   1803           01565         btfsc   STATUS,C                ;    skip if no borrow (> 3.2V)
03C0   2BCF           01566         goto    charg_lt_3_2            ; charging, below 3.2V
03C1   1903           01567         btfsc   STATUS,Z
03C2   2BCF           01568         goto    charg_lt_3_2
03C3   083A           01569         movf    bat_a2d,w
                      01570 ;       sublw   0a8h                    ; battery input at least 3.3V? (battery at least 14.5V), MJZ COM
                            MENTED THIS LINE
03C4   3CA3           01571         sublw   0a3h                    ;MJZ ADDED THIS LINE, battery input at least 3.2V? (battery at l
                            east 14.1V)
03C5   1803           01572         btfsc   STATUS,C                ;    skip if no borrow (> 3.3V)
03C6   2BCE           01573         goto    charg_lt_3_3
03C7   1903           01574         btfsc   STATUS,Z
03C8   2BCE           01575         goto    charg_lt_3_3
                      01576                                         ; we are here because we are charging and power > 3.3V
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03C9   1506           01577         bsf     PORTB,GREEN_LED         ;   green on and red off
03CA                  01578 wait_reset_lp:
03CA   0064           01579         clrwdt
                      01580 ;       btfss   PORTB,0         ; if RB0/INT bit is not set, power had been turned back on, MJZ COMMENTE
                            D THIS LINE
03CB   1E06           01581         btfss   PORTB,4         ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03CC   1486           01582         bsf     PORTB,RED_LED           ;  set red led
03CD   2BCA           01583         goto    wait_reset_lp           ; loop forever until charging power removed and system reset
                      01584                                         ; 
                      01585                                         ; 
                      01586 
03CE                  01587 charg_lt_3_3:                           ; charging, 3.2V < power level < 3.3V
03CE   2BD0           01588         goto    flash_grn               ; we want red off and flashing green
03CF                  01589 charg_lt_3_2:                           ; charging, 3.0V < power level < 3.2V
                      01590 ;       bsf     PORTB,RED_LED           ; we want red on and flashing green, MJZ COMMENTED THIS LINE
03CF   2BD4           01591         goto    flash_red               ;MJZ ADDED THIS LINE, we want flashing red and green off
03D0                  01592 flash_grn:
03D0   1506           01593         bsf     PORTB,GREEN_LED         ; turn on green led
03D1   3004           01594         movlw   GREEN_LED_ON
03D2   00CA           01595         movwf   mult2                   ; bits to toggle
03D3   2BDB           01596         goto    flash_com
                      01597 
03D4                  01598 flash_red:                                      ;MJZ ADDED THIS LINE
03D4   1486           01599         bsf PORTB,RED_LED               ;MJZ ADDED THIS LINE, turn on red led
03D5   3002           01600         movlw   RED_LED_ON              ;MJZ ADDED THIS LINE
03D6   00CA           01601         movwf   mult2                   ;MJZ ADDED THIS LINE
03D7   2BDB           01602         goto    flash_com               ;MJZ ADDED THIS LINE
                      01603 
03D8                  01604 charg_lt_3_0:                           ; charging, power level <= 3.0V
                      01605 ;       bsf     PORTB,GREEN_LED         ; turn on green led, MJZ COMMENTED THIS LINE
                      01606 ;       movlw   GREEN_LED_ON|RED_LED_ON ; toggle both red and green, only 1 on at a time, MJZ COMMENTED 
                            THIS LINE
                      01607 ;       movwf   mult2                   ;MJZ COMMENTED THIS LINE
                      01608 
03D8   1486           01609         bsf     PORTB,RED_LED           ;MJZ ADDED THIS LINE, we want red on and green off
03D9   3000           01610         movlw   0                               ;MJZ ADDED THIS LINE
03DA   00CA           01611         movwf   mult2                   ;MJZ ADDED THIS LINE
                      01612 
                      01613 
                      01614 
03DB                  01615 flash_com:
03DB   3040           01616         movlw   0x40
03DC   00C9           01617         movwf   mult1
03DD                  01618 fgrn_loop:
03DD   3004           01619         movlw   PAUSE_TIME
03DE   245E           01620         call    wait
03DF   3004           01621         movlw   PAUSE_TIME
03E0   245E           01622         call    wait
03E1   3004           01623         movlw   PAUSE_TIME
03E2   245E           01624         call    wait
03E3   084A           01625         movf    mult2,w                 ; get bits to toggle
03E4   0686           01626         xorwf   PORTB,F                 ; toggle leds
03E5   0BC9           01627         decfsz  mult1,f
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03E6   2BDD           01628         goto    fgrn_loop
                      01629 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on      
                            ;MJZ COMMENTED THIS LINE
03E7   1A06           01630         btfsc   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03E8   2C03           01631         goto    pwr_off_lp              ;  let wdt reset the system
03E9   3002           01632         movlw   2
03EA   00B3           01633         movwf   a2d_chan                ; get battery level again
03EB   228A           01634         call    acq_a2d
03EC   00BA           01635         movwf   bat_a2d         
03ED   2BB6           01636         goto    power_is_off
                      01637 
                      01638 
                      01639 ; check if RB7:RB4 pins had changed state
03EE                  01640 chk_rbif:
                      01641 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set, check if power switch is turned off
                      01642 ;       btfss   PORTB,0                 ; if power switch is turned off ;MJZ COMMENTED THIS LINE
03EE   1E06           01643         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03EF   2C04           01644         goto    chk_rbif3
                      01645 ;       btfss   PORTB,0                 ; check power switch again      ;MJZ COMMENTED THIS LINE
03F0   1E06           01646         btfss   PORTB,4                 ;MJZ ADDED THIS LINE, POWER SWITCH NOW ON RB4
03F1   2C04           01647         goto    chk_rbif3
03F2   018B           01648         clrf    INTCON                  ; disable all intrs
03F3   0197           01649         clrf    CCP1CON                 ; CCP1 Module is off
03F4   019D           01650         clrf    CCP2CON                 ; CCP2 Module is off
                      01651 ;       clrf    PORTC                   ; disable feed motor pwm
03F5   3040           01652         movlw   BEEP_OFF                ; beep is off
03F6   0087           01653         movwf   PORTC                   ; disable feed motor pwm
                      01654                                         ; disable bottom serve motor pwm
                      01655                                         ; disable top serve motor pwm
                      01656                                         ; sweep motor disabled
                      01657                                         ; elevation motor disabled
03F7   0186           01658         clrf    PORTB                   ; turn off all LED
03F8   0064           01659         clrwdt
03F9   1506           01660         bsf     PORTB,GREEN_LED
                      01661 ;       movlw   0x40
03FA   3080           01662         movlw   0x80
03FB   00C9           01663         movwf   mult1
03FC                  01664 pwr_off_loop:
03FC   3004           01665         movlw   PAUSE_TIME
03FD   245E           01666         call    wait
03FE   3006           01667         movlw   6                       ; red led on + green led on
03FF   0686           01668         xorwf   PORTB,F                 ; toggle red and green led, only 1 on
0400   0BC9           01669         decfsz  mult1,f
0401   2BFC           01670         goto    pwr_off_loop
                      01671 
0402   0186           01672         clrf    PORTB                   ; turn off all leds
0403                  01673 pwr_off_lp:
                      01674 ;       btfsc   PORTB,0                 ; if RB0/INT bit is not set, power had been turned back on
                      01675 ;       clrwdt                          ;  let wdt reset processor
0403   2C03           01676         goto    pwr_off_lp
                      01677 
0404                  01678 chk_rbif3:
                      01679 ;       btfss   INTCON,INTF             ; if RB0/INT flag is set,       ;MJZ COMMENTED THIS LINE
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0404   2C15           01680         goto    chk_rbif1
                      01681 
                      01682 
                      01683 
                      01684 ;MJZ ADDED LINE, PREVIOUS VERSION HAD POWER SWITCH ON RB0/INT0.
                      01685 ;MJZ ADDED LINE, CHK_RBIF2 WOULD HAVE BEEN RUN ONLY IF A POWER OFF ON RB0/INT0 SET INTF, BUT
                      01686 ;MJZ ADDED LINE, WHEN RB0 WAS READ, THE POWER OFF CONDITION HAD ALREADY GONE AWAY, I.E. A SPURIOUS SIGNA
                            L SET INTF.
                      01687 ;MJZ ADDED LINE, THE INTF WAS CHECKED FOR IN CHK_RBIF3, SO TO BE SAFE THAT LINE IS NOW COMMENTED SO CHK_
                            RBIF2 WOULD NEVER RUN.
                      01688 ;MJZ ADDED LINE, POWER OFF IS NOW DETECTED ON RB4 WHICH USED TO BE SWEEP MOTOR ERROR DETECTION.
                      01689 ;MJZ ADDED LINE, SWEEP MOTOR ERROR USED TO BE ON RB4, BUT NONE OF THAT LOGIC IS TAKEN OUT, BECAUSE THE P
                            OWER OFF DETECTION CODE
                      01690 ;MJZ ADDED LINE, IS EXECUTED BEFORE MOTOR ERROR CODE, SO IF RB4 IS SET, A POWER OFF IS DETECTED.
                      01691 ;MJZ ADDED LINE, BALL DROP IS NOW DETECTED ON RB0/INT0.
                      01692 
                      01693 
                      01694 
0405                  01695 chk_rbif2:
0405   30F9           01696         movlw   0xf9
0406   0586           01697         andwf   PORTB,F                 ; clear red and green led
0407   3004           01698         movlw   PAUSE_TIME
0408   245E           01699         call    wait
0409   1506           01700         bsf     PORTB,GREEN_LED
040A   3004           01701         movlw   PAUSE_TIME
040B   245E           01702         call    wait
040C   3006           01703         movlw   6
040D   0686           01704         xorwf   PORTB,F
040E   3004           01705         movlw   PAUSE_TIME
040F   245E           01706         call    wait
0410   3006           01707         movlw   6
0411   0686           01708         xorwf   PORTB,F
0412   30F9           01709         movlw   0xf9
0413   0586           01710         andwf   PORTB,F
0414   05C3           01711         andwf   led_bits,F
                      01712 ;       bcf     INTCON,INTF                     ; MJZ commented this line, INTF now used for ball drop d
                            etection.
0415                  01713 chk_rbif1:
0415   1C0B           01714         btfss   INTCON,RBIF             ; if RBIF is clear, return
0416   0008           01715         return
0417   0E06           01716         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
0418   100B           01717         bcf     INTCON,RBIF             ;  clear RBIF bit in INTCON
                      01718 ;       andlw   0x0f                    ;  clear upper bits
0419   054C           01719         andwf   rbif_bits,w             ;  and with mask
041A   1903           01720         btfsc   STATUS,Z                ;  if zero, return
041B   0008           01721         return
041C   3006           01722         movlw   6                       ; wait 10us
041D   00C4           01723         movwf   rbif_wait
041E                  01724 rbif_lp
041E   0E06           01725         swapf   PORTB,w                 ; double checking, get RB7:RB4 in lower bits
                      01726 ;       andlw   0x0f                    ;  clear upper bits
041F   054C           01727         andwf   rbif_bits,w             ;  and with mask
0420   1903           01728         btfsc   STATUS,Z                ;  if zero, return
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0421   0008           01729         return
0422   0BC4           01730         decfsz  rbif_wait,f
0423   2C1E           01731         goto    rbif_lp
0424   0E06           01732         swapf   PORTB,w                 ; get RB7:RB4 in lower bits
                      01733 ;       andlw   0x0f                    ;  clear upper bits
0425   054C           01734         andwf   rbif_bits,w             ; and with mask
0426   1903           01735         btfsc   STATUS,Z                ;  if zero, return
0427   0008           01736         return
0428   00C1           01737         movwf   err_no                  ; save as error number
                      01738 ; motor error, disable all motors, flash error code
                      01739 ;
0429                  01740 motor_error
                      01741         ; disable all motors
0429   0064           01742         clrwdt
042A   018B           01743         clrf    INTCON                  ; disable all intrs
042B   0197           01744         clrf    CCP1CON                 ; CCP1 Module is off
042C   019D           01745         clrf    CCP2CON                 ; CCP2 Module is off
                      01746 ;       clrf    PORTC                   ; disable feed motor pwm
042D   3040           01747         movlw   BEEP_OFF                ; disable feed motor pwm
042E   0087           01748         movwf   PORTC                   ; disable bottom serve motor pwm
                      01749                                         ; disable top serve motor pwm
                      01750                                         ; sweep motor disabled
                      01751                                         ; eleveation motor disabled
042F   0186           01752         clrf    PORTB                   ; turn off all LED
0430                  01753 moterr_lp
0430   3002           01754         movlw   2
0431   00C2           01755         movwf   flash_code
0432   0841           01756         movf    err_no,w                ; get motor error bits
0433   18C1           01757         btfsc   err_no,1                ; feed motor error
0434   2442           01758         call    flash_error             ;  flash 2
0435   3003           01759         movlw   3
0436   00C2           01760         movwf   flash_code
0437   19C1           01761         btfsc   err_no,3                ; top serve motor error
0438   2442           01762         call    flash_error             ;  flash 3
0439   3004           01763         movlw   4
043A   00C2           01764         movwf   flash_code
043B   1941           01765         btfsc   err_no,2                ; bottom serve motor error
043C   2442           01766         call    flash_error             ;  flash 4
043D   3005           01767         movlw   5
043E   00C2           01768         movwf   flash_code
                      01769 ;       btfsc   err_no,0                ; feed motor error      ;MJZ COMMENTED THIS LINE, SHOULD BE SWEE
                            P MOTOR ERROR
043F   1841           01770         btfsc   err_no,0                ; MJZ ADDED THIS LINE, SWEEP MOTOR ERROR
0440   2442           01771         call    flash_error             ;  flash 5
0441   2C30           01772         goto    moterr_lp
                      01773 
0442                  01774 flash_error:
                      01775 ;       movwf   flash_code              ; for err_no times,
0442   1106           01776         bcf     PORTB,GREEN_LED         ;   turn off green led
0443   3030           01777         movlw   FLASH_TIME
0444   245E           01778         call    wait
0445                  01779 flash_greenled
0445   1506           01780         bsf     PORTB,GREEN_LED         ;   turn on green led
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0446   3030           01781         movlw   FLASH_TIME
0447   245E           01782         call    wait
0448   1106           01783         bcf     PORTB,GREEN_LED         ;   turn off green led
0449   3030           01784         movlw   FLASH_TIME
044A   245E           01785         call    wait
044B   0BC2           01786         decfsz  flash_code,f
044C   2C45           01787         goto    flash_greenled
                      01788 
044D   3004           01789         movlw   PAUSE_TIME
044E   00C2           01790         movwf   flash_code
044F                  01791 pause
044F   3030           01792         movlw   FLASH_TIME              ; now pause
0450   245E           01793         call    wait
0451   0BC2           01794         decfsz  flash_code,f
0452   2C4F           01795         goto    pause
0453   0008           01796         return
                      01797 
                      01798 
                      01799 ; battery below 2.4V - disable all motors, LEDs green off and red flashing
0454                  01800 bat_dead
                      01801         ; disable all motors
0454   0064           01802         clrwdt
0455   018B           01803         clrf    INTCON                  ; disable all intrs
0456   0197           01804         clrf    CCP1CON                 ; CCP1 Module is off
0457   019D           01805         clrf    CCP2CON                 ; CCP2 Module is off
                      01806 ;       clrf    PORTC                   ; disable feed motor pwm
0458   3040           01807         movlw   BEEP_OFF                ; disable feed motor pwm
0459   0087           01808         movwf   PORTC                   ; disable bottom serve motor pwm
                      01809                                         ; disable top serve motor pwm
                      01810                                         ; sweep motor disabled
                      01811                                         ; elevation motor disabled
045A   0186           01812         clrf    PORTB                   ; turn off all LED
                      01813 
                      01814 ;flash_redled                           ;MJZ COMMENTED THIS LINE
                      01815 ;       movlw   RED_LED_ON              ;MJZ COMMENTED THIS LINE
                      01816 ;       xorwf   PORTB,f                 ; toggle red LED, MJZ COMMENTED THIS LINE
                      01817 ;       movlw   FLASH_TIME              ;MJZ COMMENTED THIS LINE
                      01818 ;       call    wait                    ;MJZ COMMENTED THIS LINE
                      01819 ;       goto    flash_redled    ;MJZ COMMENTED THIS LINE
                      01820 
                      01821 
045B                  01822 bat_dead_loop                           ;MJZ ADDED THIS LINE
045B   1486           01823         bsf             PORTB,RED_LED   ;MJZ ADDED THIS LINE, TURN ON RED LED
045C   0064           01824         clrwdt
045D   2C5B           01825         goto    bat_dead_loop   ;MJZ ADDED THIS LINE
                      01826 
                      01827         
                      01828 
                      01829 ; wait (W) number of timer1 overflows
                      01830 ; if (W) = 255, wait time is about 1.2 seconds
045E                  01831 wait
045E   00C0           01832         movwf   wait_cnt
045F                  01833 waitlp
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045F   0064           01834         clrwdt
0460   1C0C           01835         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
0461   2C5F           01836         goto    waitlp
0462   30A8           01837         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
0463   008E           01838         movwf   TMR1L
0464   3061           01839         movlw   MSEC5_MSB
0465   008F           01840         movwf   TMR1H
0466   100C           01841         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
0467   0BC0           01842         decfsz  wait_cnt,f              ;  decrement wait_cnt
0468   2C5F           01843         goto    waitlp
0469   0008           01844         return
                      01845 
                      01846 ; wait (W) number of timer1 overflows withou clearing watch dog timer
                      01847 ; if (W) = 255, wait time is about 1.2 seconds
046A                  01848 wait_no_clrwdt
046A   00C0           01849         movwf   wait_cnt
046B                  01850 waitlp1
046B   1C0C           01851         btfss   PIR1,TMR1IF             ; wait for timer1 to overflow
046C   2C6B           01852         goto    waitlp1
046D   30A8           01853         movlw   MSEC5_LSB               ; reset  timer1 to count up to 5 msec
046E   008E           01854         movwf   TMR1L
046F   3061           01855         movlw   MSEC5_MSB
0470   008F           01856         movwf   TMR1H
0471   100C           01857         bcf     PIR1,TMR1IF             ; clear timer1 overflow flag
0472   0BC0           01858         decfsz  wait_cnt,f              ;  decrement wait_cnt
0473   2C6B           01859         goto    waitlp1
0474   0008           01860         return
                      01861 
                      01862 ; initialize battery level on power up  
0475                  01863 init_bat_level:
0475   01C5           01864         clrf    power_level
0476   083A           01865         movf    bat_a2d,w
0477   3C84           01866         sublw   0x84                    ; 0x84 - bat_a2d
0478   1C03           01867         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
0479   2C84           01868         goto    init_pl_com                     ; if borrow, over 2.6V: power_level_tmp = 0
047A   0AC5           01869         incf    power_level,f
047B   083A           01870         movf    bat_a2d,w
047C   3C80           01871         sublw   0x80                    ; 0x80 - bat_a2d
047D   1C03           01872         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
047E   2C84           01873         goto    init_pl_com             ; if borrow, over 2.5V: power_level_tmp = 1
                      01874 ; less than 2.5V, about 10 mins left
047F   0AC5           01875         incf    power_level,f
0480   083A           01876         movf    bat_a2d,w
0481   3C7A           01877         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
0482   1803           01878         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
0483   0AC5           01879         incf    power_level,f   ;       if borrow, less then 2.4V: power_level_tmp = 3
0484                  01880 init_pl_com:
0484   0845           01881         movf    power_level,w
0485   00C6           01882         movwf   power_level_r
                      01883 ; fall through to set battery leds
                      01884 
                      01885 
                      01886 ; update battery leds. Called every 16 seconds. Take the lowest value from the last 16 second period
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0486                  01887 update_bat_led:
0486   0846           01888         movf    power_level_r,w
0487   00C5           01889         movwf   power_level
0488   3903           01890         andlw   0x03
0489   1903           01891         btfsc   STATUS,Z                ; power level 0: > 2.6V
048A   2C9B           01892         goto    over2_6v
048B   0BC5           01893         decfsz  power_level,f           ;
048C   2C8E           01894         goto    under2_5v
048D   2C98           01895         goto    over2_5v                ; power level 1: > 2.5V
                      01896 
                      01897 
048E                  01898 under2_5v
048E   0BC5           01899         decfsz  power_level,f
048F   2C54           01900         goto    bat_dead                        ; power level 3: < 2.4V ;MJZ DEBUG, COMMENTED THIS LINE
                      01901 ;       goto    over2_6v                        ;MJZ DEBUG, ADDED THIS LINE
                      01902 
                      01903 ;between_2.4v_2.5v                              ; less than 2.5V, about 10 mins left (GREEN OFF RED ON),
                             MJZ COMMENTED THIS LINE
                      01904 ;       btfss   led_bits,GREEN_LED      ; if green led on, turn it off, MJZ COMMENTED THIS LINE
                      01905 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      01906 ;       bcf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      01907 ;       bcf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
0490                  01908 between_2.4v_2.5v:                              ;MJZ ADDED THIS LINE, BETWEEN 2.4V & 2.5V, GREEN OFF, RE
                            D ON(FLASHING)
0490   1106           01909         bcf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE
0491   1486           01910         bsf             PORTB,RED_LED           ;MJZ ADDED THIS LINE
0492   2CA2           01911         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      01912 
                      01913 
0493                  01914 grn_off:
0493   18C3           01915         btfsc   led_bits,RED_LED        ; if red led off, turn it on
0494   2CA2           01916         goto    bat_led_xit
0495   14C3           01917         bsf     led_bits,RED_LED
0496   1486           01918         bsf     PORTB,RED_LED
0497   2CA2           01919         goto    bat_led_xit
                      01920 
                      01921 
                      01922 
                      01923 ;over2_5v:                                              ; between 2.5v and 2.7V - 1/3 capacity (GREEN ON
                             RED ON), MJZ COMMENTED THIS LINE
                      01924 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      01925 ;       goto    grn_off                         ;MJZ COMMENTED THIS LINE
                      01926 ;       bsf             led_bits,GREEN_LED      ;MJZ COMMENTED THIS LINE
                      01927 ;       bsf             PORTB,GREEN_LED         ;MJZ COMMENTED THIS LINE
                      01928 ;       goto    grn_off                         ; goto turn red led on if necessary, MJZ COMMENTED THIS 
                            LINE
0498                  01929 over2_5v:                                               ;MJZ ADDED THIS LINE, BETWEEN 2.5V & 2.7V - 1/3 
                            CAPACITY (GREEN ON(FLASHING), RED OFF)
0498   1086           01930         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
0499   1506           01931         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
049A   2CA2           01932         goto    bat_led_xit                     ;MJZ ADDED THIS LINE
                      01933 
                      01934 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01935 ;over2_6v:                                              ; greater than 2.6V, battery good       (GREEN O
                            N RED OFF), MJZ COMMENTED THIS LINE
                      01936 ;       btfsc   led_bits,GREEN_LED      ; if green led off, turn it on, MJZ COMMENTED THIS LINE
                      01937 ;       goto    grn_on
                      01938 ;       bsf     led_bits,GREEN_LED              ;MJZ COMMENTED THIS LINE
                      01939 ;       bsf     PORTB,GREEN_LED                 ;MJZ COMMENTED THIS LINE
049B                  01940 over2_6v:                                               ;MJZ ADDED THIS LINE, GREATER THAN 2.6V, BATTERY
                             GOOD (GREEN ON, RED OFF)
049B   1086           01941         bcf             PORTB,RED_LED           ;MJZ ADDED THIS LINE, TURN OFF RED LED
049C   1506           01942         bsf             PORTB,GREEN_LED         ;MJZ ADDED THIS LINE, TURN ON GREEN LED
049D   2CA2           01943         goto    bat_led_xit                     ;MJZ ADDED THIS LINE    
                      01944 
                      01945 
049E                  01946 grn_on:
049E   1CC3           01947         btfss   led_bits,RED_LED        ; if red led on, turn it off
049F   2CA2           01948         goto    bat_led_xit
04A0   10C3           01949         bcf     led_bits,RED_LED
04A1   1086           01950         bcf     PORTB,RED_LED
                      01951 
04A2                  01952 bat_led_xit:
04A2   0846           01953         movf    power_level_r,w
04A3   00C5           01954         movwf   power_level
04A4   3003           01955         movlw   3
04A5   00C6           01956         movwf   power_level_r
04A6   0008           01957         return  
                      01958 
                      01959 
04A7                  01960 record_bat_level:
                      01961 ; within a 16second time period, record the lowest power level
04A7   01C7           01962         clrf    power_level_tmp
04A8   083A           01963         movf    bat_a2d,w
04A9   3C84           01964         sublw   0x84                    ; 0x84 - bat_a2d
04AA   1C03           01965         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.6V
04AB   2CB6           01966         goto    pl_com                  ; if borrow, over 2.6V: power_level_tmp = 0
04AC   0AC7           01967         incf    power_level_tmp,f
04AD   083A           01968         movf    bat_a2d,w
04AE   3C80           01969         sublw   0x80                    ; 0x80 - bat_a2d
04AF   1C03           01970         btfss   STATUS,C                ; if no borrow, battery a2d is less than 2.5V
04B0   2CB6           01971         goto    pl_com                  ; if borrow, over 2.5V: power_level_tmp = 1
                      01972 ; less than 2.5V, about 10 mins left
04B1   0AC7           01973         incf    power_level_tmp,f
04B2   083A           01974         movf    bat_a2d,w
04B3   3C7A           01975         sublw   0x7a                    ; if battery less than 2.4V (0x7a - W)  
04B4   1803           01976         btfsc   STATUS,C                ;       skip if borrow set ( > 2.4V ): power_level_tmp = 2
04B5   0AC7           01977         incf    power_level_tmp,f       ;       if borrow, less then 2.4V: power_level_tmp = 3
04B6                  01978 pl_com:
04B6   0846           01979         movf    power_level_r,w         ; power_level_r - power_level_tmp
04B7   0247           01980         subwf   power_level_tmp,w
04B8   1803           01981         btfsc   STATUS,C                ; if borrow => power_level_tmp < power_level_r
04B9   2CBC           01982         goto    no_bat_adjust
04BA   0847           01983         movf    power_level_tmp,w       ;   power_level_r = new power level
04BB   00C6           01984         movwf   power_level_r
04BC                  01985 no_bat_adjust:
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BC   0008           01986         return  
                      01987 
04BD                  01988 debug_led:
04BD   083B           01989         movf    feed_a2d,w
04BE   00C2           01990         movwf   flash_code
04BF   0CC2           01991         rrf     flash_code,F
04C0   0CC2           01992         rrf     flash_code,F
04C1   0CC2           01993         rrf     flash_code,F
04C2   0CC2           01994         rrf     flash_code,F
04C3   0CC2           01995         rrf     flash_code,F
04C4   0C42           01996         rrf     flash_code,W
04C5   3903           01997         andlw   3
04C6   3E01           01998         addlw   1
04C7   00C2           01999         movwf   flash_code
04C8   2442           02000         call    flash_error
04C9   083B           02001         movf    feed_a2d,w
04CA   00C2           02002         movwf   flash_code
04CB   0CC2           02003         rrf     flash_code,F
04CC   0CC2           02004         rrf     flash_code,F
04CD   0C42           02005         rrf     flash_code,W
04CE   3907           02006         andlw   7
04CF   3E01           02007         addlw   1
04D0   00C2           02008         movwf   flash_code
04D1   2442           02009         call    flash_error
04D2   083B           02010         movf    feed_a2d,w
04D3   3907           02011         andlw   7
04D4   3E01           02012         addlw   1
04D5   00C2           02013         movwf   flash_code
04D6   2442           02014         call    flash_error
                      02015 
04D7   3003           02016         movlw   3
04D8   00B3           02017         movwf   a2d_chan
04D9   228A           02018         call    acq_a2d                 ; acquire chan3 a2d - feed rate
04DA   00BB           02019         movwf   feed_a2d
04DB   0064           02020         clrwdt
04DC   2CBD           02021         goto    debug_led
                      02022 
                      02023 ; special 16 bit multiply routine
                      02024 ;  temp:mult2 = mult2 x mult1
                      02025 ; returns temp:mult2 / 64
                      02026 ; returnw r2:r1 = mult2 x mult1
                      02027 ;
04DD                  02028 mult_sub:
04DD   0849           02029         movf    mult1,W                 ; if either mult1 or mult2 is 0
04DE   1903           02030         btfsc   STATUS,Z
04DF   2CF3           02031         goto    mult_ret_0              ; returns 0
04E0   084A           02032         movf    mult2,W                 ; if either mult1 or mult2 is 0
04E1   1903           02033         btfsc   STATUS,Z
04E2   2CF3           02034         goto    mult_ret_0              ; returns 0
04E3   01CA           02035         clrf    mult2
04E4   01A2           02036         clrf    temp
04E5                  02037 mult_lp:
04E5   07CA           02038         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04E6   1803           02039         btfsc   STATUS,C
04E7   0AA2           02040         incf    temp,f
04E8   0BC9           02041         decfsz  mult1,F
04E9   2CE5           02042         goto    mult_lp
04EA   084A           02043         movf    mult2,w
04EB   00CE           02044         movwf   r1
04EC   0822           02045         movf    temp,w
04ED   00CF           02046         movwf   r2
04EE   0DCA           02047         rlf     mult2,f                 ; div result by 64
04EF   0DA2           02048         rlf     temp,f
04F0   0DCA           02049         rlf     mult2,f
04F1   0D22           02050         rlf     temp,w
04F2   0008           02051         return
                      02052 
04F3                  02053 mult_ret_0
04F3   3400           02054         retlw   0
                      02055 
                      02056 
                      02057 
                      02058 ; special 16 bit multiply routine
                      02059 ;  temp:mult2 = mult2 x mult1
                      02060 ; returns (temp:mult2 + 63) / 64
                      02061 ;
04F4                  02062 mult_sub1:
04F4   0849           02063         movf    mult1,W                 ; if either mult1 or mult2 is 0
04F5   1903           02064         btfsc   STATUS,Z
04F6   2CF3           02065         goto    mult_ret_0              ; returns 0
04F7   084A           02066         movf    mult2,W                 ; if either mult1 or mult2 is 0
04F8   1903           02067         btfsc   STATUS,Z
04F9   2CF3           02068         goto    mult_ret_0              ; returns 0
04FA   01CA           02069         clrf    mult2
04FB   01A2           02070         clrf    temp
04FC                  02071 mult_lp1:
04FC   07CA           02072         addwf   mult2,f                 ; add mult2 mult1 times (mult2 x mult1)
04FD   1803           02073         btfsc   STATUS,C
04FE   0AA2           02074         incf    temp,f
04FF   0BC9           02075         decfsz  mult1,F
0500   2CFC           02076         goto    mult_lp1
0501   303F           02077         movlw   0x3f
0502   07CA           02078         addwf   mult2,f                 
0503   1803           02079         btfsc   STATUS,C
0504   0AA2           02080         incf    temp,f                  ; temp:mult2 += 63
0505   0DCA           02081         rlf     mult2,f                 ; div result by 64
0506   0DA2           02082         rlf     temp,f
0507   0DCA           02083         rlf     mult2,f
0508   0D22           02084         rlf     temp,w
0509   0008           02085         return
                      02086 
                      02087 ; enable usart
050A                  02088 usart_enable:
                      02089         ; init usart
050A   1683           02090         bsf     STATUS,RP0              ; goto bank 1
                      02091 ;       movlw   0xff                    ; 1200 baud
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

050B   3081           02092         movlw   0x81                    ; 2400 baud
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
050C   0099           02093         movwf   SPBRG
050D   3020           02094         movlw   0x20                    ; 8-bit transimit, transmitter enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
050E   0098           02095         movwf   TXSTA                   ; asynchronous mode, low speed mode
050F   1283           02096         bcf     STATUS,RP0              ; goto bank 0
0510   3090           02097         movlw   0x90                    ; 8-bit receive, receiver enabled
0511   0098           02098         movwf   RCSTA                   ; serial port enabled
0512   0008           02099         return
                      02100 
                      02101 ; disable usart
0513                  02102 usart_disable
0513   1683           02103         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0514   0198           02104         clrf    TXSTA                   ; disable transmitter
0515   1283           02105         bcf     STATUS,RP0              ; goto bank 0
0516   0198           02106         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02107 ;       bsf     PORTC,6                 ; beep is 30 ff's
0517   1307           02108         bcf     PORTC,6                 ; beep is 30 00's
0518   0008           02109         return
                      02110 
                      02111 ; disable usart with no beep
0519                  02112 usart_off
0519   1683           02113         bsf     STATUS,RP0              ; goto bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
051A   0198           02114         clrf    TXSTA                   ; disable transmitter
051B   1283           02115         bcf     STATUS,RP0              ; goto bank 0
051C   0198           02116         clrf    RCSTA                   ; serial port disabled, receiver disabled
                      02117 ;       bcf     PORTC,6                 ; no beep - beep is 30 ff's
051D   1707           02118         bsf     PORTC,6                 ; no beep - beep is 30 00's
051E   0008           02119         return
                      02120 
                      02121 ; if there is data in RCREG, return in W (returned as 0x30 + data)
051F                  02122 getchar:
051F   0103           02123         clrw
0520   1E8C           02124         btfss   PIR1,RCIF               ; if not input data, return 0 in W
0521   0008           02125         return
0522   081A           02126         movf    RCREG,W                 ; else read input data
0523   3E30           02127         addlw   0x30
0524   0008           02128         return
                      02129 
                      02130 ; get transmits status, 0 = not ok to send, 1 = ok to send
0525                  02131 xmit_status:
0525   0103           02132         clrw
0526   1A0C           02133         btfsc   PIR1,TXIF               ; if xmit not empty, skip
0527   3001           02134         movlw   1
0528   0008           02135         return
                      02136 
                      02137 ; send data in (W) to usart
0529                  02138 putchar:
0529   0099           02139         movwf   TXREG                   ; write data to usart
052A   0008           02140         return
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02141 
                      02142 ; called every 5 msec to handle anything related to the remote control
052B                  02143 chk_remote:
052B   1AD0           02144         btfsc remote_toggle,REMOTE_BIT  ; if remote not enabled, exit
052C   0008           02145         return
052D   0851           02146         movf    remote_block,W          ; if remote blocking,
052E   1903           02147         btfsc   STATUS,Z                ;
052F   2D39           02148         goto    no_blocking
0530   3C42           02149         sublw   0x42                    ;  if 100msec had elapsed,
0531   1903           02150         btfsc   STATUS,Z                ;
                      02151 ;       bcf     PORTC,6                 ;   turn off beep - beep is 30 ff's
0532   1707           02152         bsf     PORTC,6                 ;   turn off beep - beep is 30 00's
0533   0BD1           02153         decfsz  remote_block,F          ;  if last block,
0534   0008           02154         return
0535   250A           02155         call    usart_enable            ;   re-enable usart
0536   251F           02156         call    getchar                 ;   flush
0537   251F           02157         call    getchar                 ;    input fifo
0538   0008           02158         return
                      02159 
0539                  02160 no_blocking:
0539   251F           02161         call    getchar
053A   39FF           02162         andlw   0xff                    ; if no input, exit
053B   1903           02163         btfsc   STATUS,Z
053C   0008           02164         return
053D   3C38           02165         sublw   0x38    
053E   1903           02166         btfsc   STATUS,Z                ; got 8 from transmitter - toggle sweep function
053F   2D4B           02167         goto    sweep_toggled
0540   3C06           02168         sublw   0x06
0541   1903           02169         btfsc   STATUS,Z                ; got 2 from transmiiter - toggle feed functions
0542   2D50           02170         goto    feed_toggled
0543   30A0           02171         movlw   0xa0
0544   00D1           02172         movwf   remote_block
                      02173 ;no long beep   call    usart_disable
0545   2519           02174         call    usart_off               ; no long beep
0546   0008           02175         return
                      02176 
0547                  02177 set_remote_block
0547   3053           02178         movlw   BLOCK_CNT
0548   00D1           02179         movwf   remote_block
0549   2513           02180         call    usart_disable
054A   0008           02181         return
                      02182 
054B                  02183 sweep_toggled:
054B   301E           02184         movlw   0x1e                    ; set up to send 30 FF's
054C   00D2           02185         movwf   FF_count
054D   3002           02186         movlw   SWEEP_TOGGLE
054E   06D0           02187         xorwf   remote_toggle,F
                      02188 ;       movlw   8                       ; DEBUG
                      02189 ;       movwf   beep_count              ; DEBUG
054F   2D47           02190         goto    set_remote_block
                      02191 
0550                  02192 feed_toggled:
0550   301E           02193         movlw   0x1e                    ; set up to send 30 FF's
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0551   00D2           02194         movwf   FF_count
0552   3001           02195         movlw   FEED_TOGGLE
0553   06D0           02196         xorwf   remote_toggle,F
                      02197 ;       movlw   2                       ; DEBUG
                      02198 ;       movwf   beep_count              ; DEBUG
0554   2D47           02199         goto    set_remote_block
                      02200 
                      02201 
                      02202 
                      02203 ; Current sweep/2-line switch configuration.
                      02204 ; Sweep Enable SPST (On/Off) rocker, Sweep On / Sweep Off, input ot uC.
                      02205 ; Sweep Mode SPDT (On/Off/On) rocker, Narrow 2-line / Continuous Sweep / Wide 2-line, either On position
                             allows respective 2-line
                      02206 ; limit switch to be input to the uC.
                      02207 ; Sweep Enable switch  must be on for sweep motor to turn on in any sweep mode.
                      02208 ; Continuous sweep is when Sweep Mode Switch is off (center position), not allowing any 2-line limit swi
                            tch detection.
                      02209 ; Narrow or Wide 2-Line mode is when Sweep Mode Switch is on in either direction allowing either narrow 
                            or wide limit
                      02210 ; switch detection.
                      02211 ; If sweep is on in continuous mode and then it is switched to any 2-line mode, a ball could be released
                             before the sweep stops at 
                      02212 ; a 2-line limit switch, because we do not know we are in 2-line mode until the first 2-line limit switc
                            h is detected.
                      02213 ; When a 2-line limit switch is detected (change of state), the feed motor speed is restricted so ball f
                            eed rate is slower than
                      02214 ; side to side sweep.
                      02215 
                      02216 
0555                  02217 chk_2linesw:                                    ; called every 5ms
0555   1C4D           02218         btfss   sweep_is_on,0           ; If sweep motor on flag is on, I.E. sweep switch or remote turn
                            ed sweep on
0556   2D88           02219         goto    normal_feed_rate        ; If sweep motor on flag is off, set feed rate to normal.
                      02220 
0557   1E05           02221         btfss   PORTA,LINESWBIT
0558   258B           02222         call    restrict_feed_rate
                      02223 
                      02224 ; THE FOLLOWING TWO LINES CORRECTED THE PROBLEM IF IN 2-LINE MODE AND 2-LINE LIMIT SWITCH ON (MACHINE ST
                            OPPED
                      02225 ; AT 2-LINE), WHEN 2-LINE ROCKER WAS TURNED OFF, SWEEP MOTOR WOULD NOT START BACK UP UNTIL SWEEP SWITCH 
                            WAS TOGGLED
                      02226 
0559   1A05           02227         btfsc   PORTA,LINESWBIT         ; IF 2-LINE LIMIT SWITCH IS OFF...
055A   1587           02228         bsf             PORTC,SWEEP_EN          ; TURN ON SWEEP MOTOR
                      02229 
                      02230         
                      02231 
055B   0855           02232         movf    linesw_toggle,W         ; GET 2-LINE LIMIT SWITCH TOGGLE FLAG BYTE
055C   3910           02233         andlw   0x10                            ; BIT 4 IS THE ACTUAL FLAG, GET RID OF OTHER BITS (THERE
                             SHOULDN'T BE ANY)
055D   0605           02234         xorwf   PORTA,W                         ; COMPARE TO PORTA
055E   3910           02235         andlw   0x10                            ; GET RID OF EXTRA BITS AGAIN
055F   1903           02236         btfsc   STATUS,Z                        ; DID 2-LINE LIMIT SWITCH CHANGE STATE?
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0560   2D62           02237         goto    linesw_no_change        ;
0561   2D6B           02238         goto    linesw_change           ;
0562                  02239 linesw_no_change:                               ; IF 2-LINE LIMIT SWITCH DID NOT CHANGE STATE
0562   1E05           02240         btfss   PORTA,LINESWBIT         ; If 2-Line limit switch is on, don't do anything, otherwise sta
                            rt sweep timer.
0563   0008           02241         return
0564   3000           02242         movlw   0                                       ;
0565   0656           02243         xorwf   sweep_timer,W           ; IF SWEEP TIMER IS 0, 6 SECONDS SINCE LAST LINE SWITCH CLOSURE 
                            DETECTED
0566   1D03           02244         btfss   STATUS,Z                        ; THEN ASSUME NOT 2-LINE MODE AND SET FEED RATE BACK TO 
                            NORMAL ALGORITHM
0567   0008           02245         return                                          ; IF TIMER NOT EXPIRED, HAVEN'T WAITED LONG ENOU
                            GH
0568   3000           02246         movlw   0x00                            ; 0=NORMAL FEED RATE ALGORITHM
0569   00D7           02247         movwf   feed_rate_type          ; SET FEED RATE TO NORMAL ALGORITHM
056A   0008           02248         return                                          ;
056B                  02249 linesw_change:                                  ; IF 2-LINE SWITCH DID CHANGE STATE
                      02250 ;       movlw   0x01                            ; 1=RESTRICTED FEED RATE FOR 2-LINE MODE
                      02251 ;       movwf   feed_rate_type          ; SET FEED RATE TO RESTRICTED FOR 2-LINE MODE
056B   3006           02252         movlw   0x06                            ; 8 SECONDS
056C   00D6           02253         movwf   sweep_timer                     ; START TIMER AT 6 SECONDS (REALLY x SEC, BECAUSE OF MIS
                            CALCULATION WITH 5MS TIMER)
056D   3010           02254         movlw   0x10                            ;
056E   06D5           02255         xorwf   linesw_toggle,F         ; IF CHANGE (TOGGLE), PUT NEW VALUE IN LINESW_TOGGLE
                      02256 ;       btfss   PORTA,LINESWBIT         ; CHECK FOR 2-LINE LIMIT SWITCH ON (LOW)
                      02257 ;       bcf             PORTC,SWEEP_EN          ; IF 2-LINE LIMIT SWITCH IS ON, TURN OFF SWEEP MOTOR, TH
                            EN LEAVE ROUTINE
                      02258 ;       return                                          ; IF 2-LINE LIMIT SWITCH IS OFF, LEAVE ROUTINE
056F   1A05           02259         btfsc   PORTA,LINESWBIT
0570   0008           02260         return
0571   3001           02261         movlw   0x01
0572   00D7           02262         movwf   feed_rate_type
0573   1187           02263         bcf             PORTC,SWEEP_EN
0574   0008           02264         return
0575                  02265 linesw_toggle_init:                             ; WHEN SWEEP IS JUST TURNED ON, MUST MATCH LINESW_TOGGLE
                             VALUE TO 2-LINE SWITCH VALUE
0575   1A05           02266         btfsc   PORTA,4                         ;
0576   2D78           02267         goto    linesw_toggle_set       ;
0577   2D7B           02268         goto    linesw_toggle_clr       ;
0578                  02269 linesw_toggle_set:                              ;
0578   3010           02270         movlw   0x10                            ;
0579   00D5           02271         movwf   linesw_toggle           ;
057A   0008           02272         return                                          ;       
057B                  02273 linesw_toggle_clr:                              ;
057B   01D5           02274         clrf    linesw_toggle           ;
057C   0008           02275         return                                          ;
                      02276 
                      02277 ; IF THERE WAS A LINESW_TOGGLE CHANGE AND 2-LINE LIMIT SWITCH IS NOW OFF (SWEEPING), START TIMER AT 0 (C
                            LEAR), IF NOT
                      02278 ; ANOTHER TOGGLE WITHIN APPROX. 6 SECONDS, THEN 2-LINE MODE IS NOW OFF AND USE NORMAL FEED RATE ALGORITH
                            M.
                      02279 ;
                      02280 
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

057D                  02281 chk_intf:                                               ; CALLED EVERY 5MS
057D   1C4D           02282         btfss   sweep_is_on,0           ; IF SWEEP MOTOR ON FLAG IS ON
057E   0008           02283         return                                          ;
                      02284 ;       btfsc   INTCON,INTF                     ; CHECK FOR RB0/INT FLAG SET
                      02285 ;       btfsc   PORTB,0                         ; Flag was set, now double check ball detect switch inpu
                            t still on.
                      02286 ;       return                                          ;
                      02287 ;       goto    ball_dropped            ; Double checked that ball was dropped.
057F   1C8B           02288         btfss   INTCON,INTF                     ; If RBO/INT flag set, double check switch is still on (
                            debounce/noise filter).
0580   0008           02289         return                                          ; If RBO/INT flag not set, return.
0581   1C06           02290         btfss   PORTB,0                         ; If ball detect switch is still on, then ball was dropp
                            ed.
0582   2D85           02291         goto    ball_dropped            ;
0583   108B           02292         bcf             INTCON,INTF                     ; If ball detect switch is no longer on, it was 
                            a spurious detection, clear INTF and return.
0584   0008           02293         return
0585                  02294 ball_dropped:                                   ;
0585   1587           02295         bsf             PORTC,SWEEP_EN          ; ...THEN TURN ON SWEEP MOTOR
0586   108B           02296         bcf             INTCON,INTF                     ;
0587   0008           02297         return                                          ;
0588                  02298 normal_feed_rate
0588   3000           02299         movlw   0x00                            ; 0=Normal feed rate algorithm
0589   00D7           02300         movwf   feed_rate_type          ; If sweep motor on flag is not on, set feed rate to normal.
058A   0008           02301         return                                          ;
058B                  02302 restrict_feed_rate
058B   3001           02303         movlw   0x01
058C   00D7           02304         movwf   feed_rate_type
058D   0008           02305         return
                      02306 
                      02307 ; WHEN 2-LINE MODE (LINE LIMIT SWITCH) IS DETECTED, MUST REDUCE MAXIMUM BALL FEED RATE SO THAT TIME BETW
                            EEN
                      02308 ; BALLS FED IS LONGER THAN TIME TO SWEEP SIDE TO SIDE (APPROX. 5 SECONDS), I.E. LIMIT FEED MOTOR SPEED.
                      02309 ; WHEN 2-LINE MODE IS NOT DETECTED FOR LONGER THAN A SIDE TO SIDE SWEEP, MUST GO BACK TO NORMAL FEED RAT
                            E ALGORITHM.
                      02310 
                      02311 
                      02312 
058E                  02313 toggle_green_led:
058E   3004           02314         movlw   GREEN_LED_ON    ; value to turn on green LED
058F   0686           02315         xorwf   PORTB,f                 ; toggle green LED
0590   0008           02316         return
                      02317 
0591                  02318 toggle_red_led:
0591   3002           02319         movlw   RED_LED_ON              ; value to turn on red LED
0592   0686           02320         xorwf   PORTB,f                 ; toggle red LED
0593   0008           02321         return
                      02322 
                      02323 ; The following lines were a part of the fix for the ball jam problem at power-on.
                      02324 ; If the machine was powered on and a ball that was already in the chute got jammed in the server wheels
                            , the machine
                      02325 ; would not shut down with an overcurrent error if the speed pot was set fairly low.
                      02326 ; The top serve motor is the first to turn on and would cause the jam.
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02327 ; The jammed top server motor would just continue to draw excessive current until it's free-wheeling dio
                            de would heat up and fail.
                      02328 ; The changes dated 06/09/05 make the top serve motor spin up quickly at power-on, regardless of the pot
                             setting.
                      02329 ; Then if a ball gets jammed at power-on, enough current is present to trip the overcurrent circuit.
0594                  02330 top_not_inited:                         ; 06/09/05 MJZ added this line
0594   308F           02331         movlw   0x8f                    ; 06/09/05 MJZ added this line
0595   00A4           02332         movwf   t_top_pwm               ; 06/09/05 MJZ added this line
0596   0008           02333         return                                  ; 06/09/05 MJZ added this line
                      02334 
                      02335 ; The following lines and all lines dated 06/15/05 are changes that, at power-on, ramp up the bottom ser
                            ve motor to fairly 
                      02336 ; fast speed, regardless of the pot setting, before it is allowed to be set to the pot. When the changes
                            , 06/09/05, were added
                      02337 ; to ramp up the top serve motor at power-on, the top serve motor, if the speed pot was set low, would s
                            low down before the 
                      02338 ; bottom serve motor would start spinning. The bottom serve motor would pull a ball, that was already in
                             the chute, into the
                      02339 ; wheels and the serve motors would jam on the ball without overcurrent detection, because both motors a
                            re drawing too little
                      02340 ; current. Now the bottom serve motor will draw enough current at the ball jam time to trip the overcurr
                            ent detection circuit.
0597                  02341 bot_not_inited:                         ; 06/15/05 MJZ added this line
0597   308F           02342         movlw   0x8f                    ; 06/15/05 MJZ added this line
0598   00A6           02343         movwf   t_bot_pwm               ; 06/15/05 MJZ added this line
0599   0008           02344         return                                  ; 06/15/05 MJZ added this line
                      02345 
                      02346 
                      02347         END                       ; directive 'end of program'
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

ADCON0                            0000001F
ADCON0VAL                         00000081
ADCON1                            0000009F
ADCON1VAL                         00000002
ADCS0                             00000006
ADCS1                             00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRES                             0000001E
BATTERY                           00000002
BEEP_OFF                          00000040
BF                                00000000
BLOCK_CNT                         00000053
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
ELEV_EN                           00000004
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

F                                 00000001
FEEDBIT                           00000003
FEED_BIT                          00000000
FEED_LED                          00000003
FEED_TOGGLE                       00000001
FERR                              00000002
FF_count                          00000052
FLASH_TIME                        00000030
FSR                               00000004
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
GREEN_LED                         00000002
GREEN_LED_ON                      00000004
HighImpInt                        000000AF
HighImpInt2                       000000B1
HighImpShrt                       0000008B
Highpulse                         00000086
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTCONVAL                         000000A0
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
LINESWBIT                         00000004
LowImpInt                         000000DD
LowImpInt2                        000000DF
LowImpShrt                        000000BA
Lowpulse                          000000B6
MSEC5_LSB                         000000A8
MSEC5_MSB                         00000061
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTIONVAL                         000000C8
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

OPTION_REG                        00000081
P                                 00000004
PAUSE_TIME                        00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PMADR                             0000010D
PMADRH                            0000010F
PMCON1                            0000018C
PMDATA                            0000010C
PMDATH                            0000010E
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PWM1                              00000002
PWM2                              00000001
PWMADJUSTVAL                      00000016
PWMMAXVAL                         0000001D
PWMOUTBIT                         00000000
PwmInt                            00000083
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RED_LED                           00000001
RED_LED_ON                        00000002
REMOTE_BIT                        00000005
REMOTE_ON                         00000020
RP0                               00000005
RP1                               00000006
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SMP                               00000007
SPBRG                             00000099
SPDBIT                            00000001
SPEN                              00000007
SPINPBIT                          00000000
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SWEEPEN                           00000004
SWEEP_BIT                         00000001
SWEEP_EN                          00000003
SWEEP_TOGGLE                      00000002
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TICK_CNT                          00000057
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISAVAL                          0000003F
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISBVAL                          000000F1
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

TRISC7                            00000007
TRISCVAL                          000000A0
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WaitAdc                           0000029E
WaitNoInt                         00000299
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CP_ALL                           00003FEF
_CP_OFF                           00003FFF
_CP_ON                            00003FEF
_DEVID1                           00002006
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_RC                          00003FFF
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F73                           00000001
__DEBUG                           1
a2d_chan                          00000033
acq_a2d                           0000028A
adjust_backspin                   00000398
adjust_backspin1                  000002C5
adjust_bs1                        000002F9
adjust_topspin                    0000034E
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

adjust_topspin1                   00000303
adjust_ts                         00000382
at0sec                            00000046
at10sec                           00000109
at11sec                           00000109
at12sec                           0000010A
at13sec                           0000010A
at14sec                           0000010B
at15sec                           0000010D
at1sec                            000000E3
at2sec                            000000FA
at3sec                            000000FA
at4sec                            000000FB
at5sec                            000000FC
at6sec                            00000104
at7sec                            00000105
at8sec                            00000108
at9sec                            00000109
atcom                             0000010C
ball_dropped                      00000585
bat_a2d                           0000003A
bat_dead                          00000454
bat_dead_loop                     0000045B
bat_led_xit                       000004A2
beep_count                        00000054
between_2.4v_2.5v                 00000490
bot_inited                        00000029
bot_not_inited                    00000597
bs_com                            000003AF
c_bot_pwm                         00000027
c_top_pwm                         00000025
calc_bot_pwm                      000002A9
calc_feed                         00000212
calc_pwm                          0000003D
calc_top_pwm                      00000333
charg_lt_3_0                      000003D8
charg_lt_3_2                      000003CF
charg_lt_3_3                      000003CE
chk_2linesw                       00000555
chk_feed_rate_type                00000199
chk_feed_xit                      00000237
chk_intf                          0000057D
chk_rbif                          000003EE
chk_rbif1                         00000415
chk_rbif2                         00000405
chk_rbif3                         00000404
chk_remote                        0000052B
counter                           0000002E
counter2                          0000002F
debug_led                         000004BD
dec_bot                           000001DD
dec_bot_by_8                      000001E3
dec_top                           000001C2
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

dec_top_by_8                      000001C8
delay                             00000048
delaylp                           00000297
delta_c                           0000003E
delta_s                           0000003F
enable_feed                       000001FE
err_no                            00000041
feed_a2d                          0000003B
feed_inited                       0000002A
feed_off                          000001F2
feed_ok                           00000145
feed_ok1                          000001A1
feed_rate_type                    00000057
feed_toggled                      00000550
fgrn_loop                         000003DD
flash_code                        00000042
flash_com                         000003DB
flash_error                       00000442
flash_greenled                    00000445
flash_grn                         000003D0
flash_red                         000003D4
getchar                           0000051F
grn_off                           00000493
grn_on                            0000049E
high_spd                          0000036A
high_spd1                         000002E1
i_second                          0000006F
idle                              00000047
inc_bot_by_8                      000001DA
inc_top_by_8                      000001BF
init_bat_level                    00000475
init_done                         00000036
init_enable_feed                  00000248
init_feed_pwm                     00000238
init_feed_xit                     00000250
init_pl_com                       00000484
init_update_feed                  0000024E
last_sweep                        00000053
led_bits                          00000043
linesw_change                     0000056B
linesw_no_change                  00000562
linesw_toggle                     00000055
linesw_toggle_clr                 0000057B
linesw_toggle_init                00000575
linesw_toggle_set                 00000578
main                              00000010
moterr_lp                         00000430
motor_error                       00000429
msec5                             00000035
mult1                             00000049
mult2                             0000004A
mult3                             0000004B
mult_lp                           000004E5
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

mult_lp1                          000004FC
mult_ret_0                        000004F3
mult_sub                          000004DD
mult_sub1                         000004F4
no_bat_adjust                     000004BC
no_blocking                       00000539
no_remote_feed                    000001EE
no_spin                           000003B3
no_spin1                          0000032B
normal_feed_rate                  00000588
not_second                        00000064
npwr_on_reset                     00000162
over1v                            000001FB
over2_5v                          00000498
over2_6v                          0000049B
over_pt4_v                        00000245
pause                             0000044F
pl_com                            000004B6
power_is_off                      000003B6
power_level                       00000045
power_level_r                     00000046
power_level_tmp                   00000047
putchar                           00000529
pwmdesired                        00000030
pwmhelp                           00000032
pwmmax                            00000031
pwr_off_loop                      000003FC
pwr_off_lp                        00000403
pwr_on_code                       00000023
pwr_on_reset                      00000166
r1                                0000004E
r2                                0000004F
rbif_bits                         0000004C
rbif_lp                           0000041E
rbif_wait                         00000044
record_bat_level                  000004A7
remote_block                      00000051
remote_off                        00000287
remote_toggle                     00000050
restrict_feed_rate                0000058B
sec0init                          00000110
seconds                           00000034
set_bot                           000001E5
set_pwm_value                     00000235
set_remote_block                  00000547
set_top                           000001CA
slow_spd                          00000326
slow_spd1                         000003AE
soft_pwm                          00000037
spd_a2d                           00000039
spin_a2d                          00000038
stacks                            0000002D
stackw                            0000002C
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

status_temp                       00000021
sweep_a2d                         0000003C
sweep_exit                        00000264
sweep_exit1                       00000264
sweep_inited                      0000002B
sweep_is_on                       0000004D
sweep_off                         00000260
sweep_on                          00000259
sweep_remote                      00000265
sweep_timer                       00000056
sweep_toggled                     0000054B
t_bot_pwm                         00000026
t_top_pwm                         00000024
temp                              00000022
tick0                             0000016C
tick1                             00000179
tick2                             00000187
tick3                             0000018C
tick4                             000001A2
tick5                             000001A8
tick6                             000001AB
tick7                             000001AE
toggle_green_led                  0000058E
toggle_red_led                    00000591
top_inited                        00000028
top_not_inited                    00000594
ts_com1                           00000327
under2_5v                         0000048E
upd_exit                          000001CC
update_bat_led                    00000486
update_bot_pwm                    000001CD
update_done                       000001E7
update_feed                       00000207
update_feed_pwm                   000001E8
update_remote                     00000268
update_rmxit                      00000286
update_sweep                      00000251
update_top_pwm                    000001B2
usart_disable                     00000513
usart_enable                      0000050A
usart_off                         00000519
w_temp                            00000020
wait                              0000045E
wait_cnt                          00000040
wait_no_clrwdt                    0000046A
wait_reset_lp                     000003CA
waitlp                            0000045F
waitlp1                           0000046B
xmit_status                       00000525
MPASM  5.51          CS019B05-SINGLEWHEEL.ASM   8-7-2025  14:49:22         PAGE 58


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XX--XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXX------ ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1432
Program Memory Words Free:  2664


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    21 reported,     0 suppressed

